import {
  require_react_is
} from "./chunk-KXMNDRCQ.js";
import {
  require_react
} from "./chunk-JFTBQ7A7.js";
import {
  __commonJS,
  __esm,
  __export,
  __toCommonJS
} from "./chunk-AC2VUBZ6.js";

// node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "node_modules/object-assign/index.js"(exports, module) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2["_" + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
          return test2[n];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function(target2, source) {
      var from;
      var to = toObject(target2);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key2 in from) {
          if (hasOwnProperty.call(from, key2)) {
            to[key2] = from[key2];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from, symbols[i])) {
              to[symbols[i]] = from[symbols[i]];
            }
          }
        }
      }
      return to;
    };
  }
});

// node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS({
  "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  }
});

// node_modules/prop-types/lib/has.js
var require_has = __commonJS({
  "node_modules/prop-types/lib/has.js"(exports, module) {
    module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  }
});

// node_modules/prop-types/checkPropTypes.js
var require_checkPropTypes = __commonJS({
  "node_modules/prop-types/checkPropTypes.js"(exports, module) {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      ReactPropTypesSecret = require_ReactPropTypesSecret();
      loggedTypeFailures = {};
      has = require_has();
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    var ReactPropTypesSecret;
    var loggedTypeFailures;
    var has;
    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error(
                  (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                );
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning(
                (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
              );
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning(
                "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
              );
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module.exports = checkPropTypes;
  }
});

// node_modules/prop-types/factoryWithTypeCheckers.js
var require_factoryWithTypeCheckers = __commonJS({
  "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
    "use strict";
    var ReactIs = require_react_is();
    var assign = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var has = require_has();
    var checkPropTypes = require_checkPropTypes();
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module.exports = function(isValidElement, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x, y) {
        if (x === y) {
          return x !== 0 || 1 / x === 1 / y;
        } else {
          return x !== x && y !== y;
        }
      }
      function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error(
                "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
              );
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
              manualPropTypeWarningCount < 3) {
                printWarning(
                  "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                );
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError(
              "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
              { expectedType }
            );
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i = 0; i < propValue.length; i++) {
            var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning(
                "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
              );
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i = 0; i < expectedValues.length; i++) {
            if (is(propValue, expectedValues[i])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key2, value) {
            var type2 = getPreciseType(value);
            if (type2 === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key2 in propValue) {
            if (has(propValue, key2)) {
              var error = typeChecker(propValue, key2, componentName, location, propFullName + "." + key2, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
          return emptyFunctionThatReturnsNull;
        }
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (typeof checker !== "function") {
            printWarning(
              "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
            );
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
            var checker2 = arrayOfTypeCheckers[i2];
            var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location, propFullName, key2, type2) {
        return new PropTypeError(
          (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key2 + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type2 + "`."
        );
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key2 in shapeTypes) {
            var checker = shapeTypes[key2];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key2, getPreciseType(checker));
            }
            var error = checker(propValue, key2, componentName, location, propFullName + "." + key2, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign({}, props[propName], shapeTypes);
          for (var key2 in allKeys) {
            var checker = shapeTypes[key2];
            if (has(shapeTypes, key2) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key2, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` key `" + key2 + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
              );
            }
            var error = checker(propValue, key2, componentName, location, propFullName + "." + key2, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type2 = getPreciseType(value);
        switch (type2) {
          case "array":
          case "object":
            return "an " + type2;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type2;
          default:
            return type2;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }
});

// node_modules/prop-types/index.js
var require_prop_types = __commonJS({
  "node_modules/prop-types/index.js"(exports, module) {
    if (true) {
      ReactIs = require_react_is();
      throwOnDirectAccess = true;
      module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module.exports = null();
    }
    var ReactIs;
    var throwOnDirectAccess;
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/agChartOptions.js
var __FORCE_MODULE_DETECTION;
var init_agChartOptions = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/agChartOptions.js"() {
    __FORCE_MODULE_DETECTION = 0;
  }
});

// node_modules/ag-charts-community/dist/esm/es5/util/time/interval.js
var __extends, TimeInterval, CountableTimeInterval;
var init_interval = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/util/time/interval.js"() {
    __extends = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    TimeInterval = /** @class */
    function() {
      function TimeInterval2(encode13, decode13, rangeCallback) {
        this._encode = encode13;
        this._decode = decode13;
        this._rangeCallback = rangeCallback;
      }
      TimeInterval2.prototype.floor = function(date) {
        var d = new Date(date);
        var e = this._encode(d);
        return this._decode(e);
      };
      TimeInterval2.prototype.ceil = function(date) {
        var d = new Date(Number(date) - 1);
        var e = this._encode(d);
        return this._decode(e + 1);
      };
      TimeInterval2.prototype.range = function(start, stop, extend) {
        var _a5;
        var rangeCallback = (_a5 = this._rangeCallback) === null || _a5 === void 0 ? void 0 : _a5.call(this, start, stop);
        var e0 = this._encode(extend ? this.floor(start) : this.ceil(start));
        var e1 = this._encode(extend ? this.ceil(stop) : this.floor(stop));
        if (e1 < e0) {
          return [];
        }
        var range2 = [];
        for (var e = e0; e <= e1; e++) {
          var d = this._decode(e);
          range2.push(d);
        }
        rangeCallback === null || rangeCallback === void 0 ? void 0 : rangeCallback();
        return range2;
      };
      return TimeInterval2;
    }();
    CountableTimeInterval = /** @class */
    function(_super) {
      __extends(CountableTimeInterval2, _super);
      function CountableTimeInterval2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      CountableTimeInterval2.prototype.getOffset = function(snapTo, step) {
        var s = typeof snapTo === "number" || snapTo instanceof Date ? this._encode(new Date(snapTo)) : 0;
        return Math.floor(s) % step;
      };
      CountableTimeInterval2.prototype.every = function(step, options) {
        var _this = this;
        var offset4 = 0;
        var rangeCallback;
        var _a5 = (options !== null && options !== void 0 ? options : {}).snapTo, snapTo = _a5 === void 0 ? "start" : _a5;
        if (typeof snapTo === "string") {
          var initialOffset_1 = offset4;
          rangeCallback = function(start, stop) {
            var s = snapTo === "start" ? start : stop;
            offset4 = _this.getOffset(s, step);
            return function() {
              return offset4 = initialOffset_1;
            };
          };
        } else if (typeof snapTo === "number") {
          offset4 = this.getOffset(new Date(snapTo), step);
        } else if (snapTo instanceof Date) {
          offset4 = this.getOffset(snapTo, step);
        }
        var encode13 = function(date) {
          var e = _this._encode(date);
          return Math.floor((e - offset4) / step);
        };
        var decode13 = function(encoded) {
          return _this._decode(encoded * step + offset4);
        };
        var interval = new TimeInterval(encode13, decode13, rangeCallback);
        return interval;
      };
      return CountableTimeInterval2;
    }(TimeInterval);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/util/time/millisecond.js
function encode(date) {
  return date.getTime();
}
function decode(encoded) {
  return new Date(encoded);
}
var millisecond, millisecond_default;
var init_millisecond = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/util/time/millisecond.js"() {
    init_interval();
    millisecond = new CountableTimeInterval(encode, decode);
    millisecond_default = millisecond;
  }
});

// node_modules/ag-charts-community/dist/esm/es5/util/time/duration.js
var epochYear, durationSecond, durationMinute, durationHour, durationDay, durationWeek, durationMonth, durationYear;
var init_duration = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/util/time/duration.js"() {
    epochYear = new Date(0).getFullYear();
    durationSecond = 1e3;
    durationMinute = durationSecond * 60;
    durationHour = durationMinute * 60;
    durationDay = durationHour * 24;
    durationWeek = durationDay * 7;
    durationMonth = durationDay * 30;
    durationYear = durationDay * 365;
  }
});

// node_modules/ag-charts-community/dist/esm/es5/util/time/second.js
function encode2(date) {
  return Math.floor((date.getTime() - offset) / durationSecond);
}
function decode2(encoded) {
  return new Date(offset + encoded * durationSecond);
}
var offset, second, second_default;
var init_second = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/util/time/second.js"() {
    init_interval();
    init_duration();
    offset = new Date().getTimezoneOffset() * durationMinute;
    second = new CountableTimeInterval(encode2, decode2);
    second_default = second;
  }
});

// node_modules/ag-charts-community/dist/esm/es5/util/time/minute.js
function encode3(date) {
  return Math.floor((date.getTime() - offset2) / durationMinute);
}
function decode3(encoded) {
  return new Date(offset2 + encoded * durationMinute);
}
var offset2, minute, minute_default;
var init_minute = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/util/time/minute.js"() {
    init_interval();
    init_duration();
    offset2 = new Date().getTimezoneOffset() * durationMinute;
    minute = new CountableTimeInterval(encode3, decode3);
    minute_default = minute;
  }
});

// node_modules/ag-charts-community/dist/esm/es5/util/time/hour.js
function encode4(date) {
  return Math.floor((date.getTime() - offset3) / durationHour);
}
function decode4(encoded) {
  return new Date(offset3 + encoded * durationHour);
}
var offset3, hour, hour_default;
var init_hour = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/util/time/hour.js"() {
    init_interval();
    init_duration();
    offset3 = new Date().getTimezoneOffset() * durationMinute;
    hour = new CountableTimeInterval(encode4, decode4);
    hour_default = hour;
  }
});

// node_modules/ag-charts-community/dist/esm/es5/util/time/day.js
function encode5(date) {
  var utc = Date.UTC(date.getFullYear(), date.getMonth(), date.getDate());
  return Math.floor(utc / durationDay);
}
function decode5(encoded) {
  var d = new Date(0);
  d.setDate(d.getDate() + encoded);
  d.setHours(0, 0, 0, 0);
  return d;
}
var day, day_default;
var init_day = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/util/time/day.js"() {
    init_interval();
    init_duration();
    day = new CountableTimeInterval(encode5, decode5);
    day_default = day;
  }
});

// node_modules/ag-charts-community/dist/esm/es5/util/time/week.js
function weekday(n) {
  var base = Date.UTC(baseSunday.getFullYear(), baseSunday.getMonth(), baseSunday.getDate()) + n * durationDay;
  function encode13(date) {
    var utc = Date.UTC(date.getFullYear(), date.getMonth(), date.getDate());
    return Math.floor((utc - base) / durationWeek);
  }
  function decode13(encoded) {
    var d = new Date(base);
    d.setDate(d.getDate() + encoded * 7);
    return d;
  }
  return new CountableTimeInterval(encode13, decode13);
}
var baseSunday, sunday, monday, tuesday, wednesday, thursday, friday, saturday, week_default;
var init_week = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/util/time/week.js"() {
    init_duration();
    init_interval();
    baseSunday = new Date(2023, 0, 1);
    sunday = weekday(0);
    monday = weekday(1);
    tuesday = weekday(2);
    wednesday = weekday(3);
    thursday = weekday(4);
    friday = weekday(5);
    saturday = weekday(6);
    week_default = sunday;
  }
});

// node_modules/ag-charts-community/dist/esm/es5/util/time/month.js
function encode6(date) {
  return date.getFullYear() * 12 + date.getMonth();
}
function decode6(encoded) {
  var year2 = Math.floor(encoded / 12);
  var month2 = encoded - year2 * 12;
  return new Date(year2, month2, 1);
}
var month, month_default;
var init_month = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/util/time/month.js"() {
    init_interval();
    month = new CountableTimeInterval(encode6, decode6);
    month_default = month;
  }
});

// node_modules/ag-charts-community/dist/esm/es5/util/time/year.js
function encode7(date) {
  return date.getFullYear();
}
function decode7(encoded) {
  var d = new Date();
  d.setFullYear(encoded);
  d.setMonth(0, 1);
  d.setHours(0, 0, 0, 0);
  return d;
}
var year, year_default;
var init_year = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/util/time/year.js"() {
    init_interval();
    year = new CountableTimeInterval(encode7, decode7);
    year_default = year;
  }
});

// node_modules/ag-charts-community/dist/esm/es5/util/time/utcMinute.js
function encode8(date) {
  return Math.floor(date.getTime() / durationMinute);
}
function decode8(encoded) {
  return new Date(encoded * durationMinute);
}
var utcMinute;
var init_utcMinute = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/util/time/utcMinute.js"() {
    init_interval();
    init_duration();
    utcMinute = new CountableTimeInterval(encode8, decode8);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/util/time/utcHour.js
function encode9(date) {
  return Math.floor(date.getTime() / durationHour);
}
function decode9(encoded) {
  return new Date(encoded * durationHour);
}
var utcHour;
var init_utcHour = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/util/time/utcHour.js"() {
    init_interval();
    init_duration();
    utcHour = new CountableTimeInterval(encode9, decode9);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/util/time/utcDay.js
function encode10(date) {
  return Math.floor(date.getTime() / durationDay);
}
function decode10(encoded) {
  var d = new Date(0);
  d.setUTCDate(d.getUTCDate() + encoded);
  d.setUTCHours(0, 0, 0, 0);
  return d;
}
var utcDay;
var init_utcDay = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/util/time/utcDay.js"() {
    init_interval();
    init_duration();
    utcDay = new CountableTimeInterval(encode10, decode10);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/util/time/utcMonth.js
function encode11(date) {
  return date.getUTCFullYear() * 12 + date.getUTCMonth();
}
function decode11(encoded) {
  var year2 = Math.floor(encoded / 12);
  var month2 = encoded - year2 * 12;
  return new Date(Date.UTC(year2, month2, 1));
}
var utcMonth;
var init_utcMonth = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/util/time/utcMonth.js"() {
    init_interval();
    utcMonth = new CountableTimeInterval(encode11, decode11);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/util/time/utcYear.js
function encode12(date) {
  return date.getUTCFullYear();
}
function decode12(encoded) {
  var d = new Date();
  d.setUTCFullYear(encoded);
  d.setUTCMonth(0, 1);
  d.setUTCHours(0, 0, 0, 0);
  return d;
}
var utcYear;
var init_utcYear = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/util/time/utcYear.js"() {
    init_interval();
    utcYear = new CountableTimeInterval(encode12, decode12);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/util/time/index.js
var time_exports = {};
__export(time_exports, {
  day: () => day,
  friday: () => friday,
  hour: () => hour,
  millisecond: () => millisecond,
  minute: () => minute,
  monday: () => monday,
  month: () => month,
  saturday: () => saturday,
  second: () => second,
  sunday: () => sunday,
  thursday: () => thursday,
  tuesday: () => tuesday,
  utcDay: () => utcDay,
  utcHour: () => utcHour,
  utcMinute: () => utcMinute,
  utcMonth: () => utcMonth,
  utcYear: () => utcYear,
  wednesday: () => wednesday,
  year: () => year
});
var init_time = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/util/time/index.js"() {
    init_millisecond();
    init_second();
    init_minute();
    init_hour();
    init_day();
    init_week();
    init_month();
    init_year();
    init_utcMinute();
    init_utcHour();
    init_utcDay();
    init_utcMonth();
    init_utcYear();
  }
});

// node_modules/ag-charts-community/dist/esm/es5/util/userAgent.js
function isDesktop() {
  var userAgent = navigator.userAgent;
  if (MOBILE.some(function(r) {
    return r.test(userAgent);
  })) {
    return false;
  }
  return true;
}
var MOBILE;
var init_userAgent = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/util/userAgent.js"() {
    MOBILE = [/Android/i, /webOS/i, /iPhone/i, /iPad/i, /iPod/i, /BlackBerry/i, /Windows Phone/i];
  }
});

// node_modules/ag-charts-community/dist/esm/es5/canvas/hdpiCanvas.js
var HdpiCanvas;
var init_hdpiCanvas = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/canvas/hdpiCanvas.js"() {
    init_userAgent();
    HdpiCanvas = /** @class */
    function() {
      function HdpiCanvas2(_a5) {
        var _b2 = _a5.document, document2 = _b2 === void 0 ? window.document : _b2, _c2 = _a5.width, width = _c2 === void 0 ? 600 : _c2, _d2 = _a5.height, height = _d2 === void 0 ? 300 : _d2, _e = _a5.domLayer, domLayer = _e === void 0 ? false : _e, _f = _a5.zIndex, zIndex = _f === void 0 ? 0 : _f, _g = _a5.name, name = _g === void 0 ? void 0 : _g, _h = _a5.overrideDevicePixelRatio, overrideDevicePixelRatio = _h === void 0 ? void 0 : _h;
        this._container = void 0;
        this._enabled = true;
        this._pixelRatio = NaN;
        this._width = 0;
        this._height = 0;
        this.document = document2;
        this.element = document2.createElement("canvas");
        this.element.width = width;
        this.element.height = height;
        this.context = this.element.getContext("2d");
        this.imageSource = this.context.canvas;
        var style = this.element.style;
        style.userSelect = "none";
        style.display = "block";
        if (domLayer) {
          style.position = "absolute";
          style.zIndex = String(zIndex);
          style.top = "0";
          style.left = "0";
          style.pointerEvents = "none";
          style.opacity = "1";
          if (name) {
            this.element.id = name;
          }
        }
        this.setPixelRatio(overrideDevicePixelRatio);
        this.resize(width, height);
      }
      Object.defineProperty(HdpiCanvas2.prototype, "container", {
        get: function() {
          return this._container;
        },
        set: function(value) {
          if (this._container !== value) {
            this.remove();
            if (value) {
              value.appendChild(this.element);
            }
            this._container = value;
          }
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(HdpiCanvas2.prototype, "enabled", {
        get: function() {
          return this._enabled;
        },
        set: function(value) {
          this.element.style.display = value ? "block" : "none";
          this._enabled = !!value;
        },
        enumerable: false,
        configurable: true
      });
      HdpiCanvas2.prototype.remove = function() {
        var parentNode = this.element.parentNode;
        if (parentNode != null) {
          parentNode.removeChild(this.element);
        }
      };
      HdpiCanvas2.prototype.destroy = function() {
        this.element.remove();
        this.element.width = 0;
        this.element.height = 0;
        this.context.clearRect(0, 0, 0, 0);
        Object.freeze(this);
      };
      HdpiCanvas2.prototype.snapshot = function() {
      };
      HdpiCanvas2.prototype.clear = function() {
        this.context.save();
        this.context.resetTransform();
        this.context.clearRect(0, 0, this.width, this.height);
        this.context.restore();
      };
      HdpiCanvas2.prototype.toImage = function() {
        var img = this.document.createElement("img");
        img.src = this.getDataURL();
        return img;
      };
      HdpiCanvas2.prototype.getDataURL = function(type2) {
        return this.element.toDataURL(type2);
      };
      HdpiCanvas2.prototype.download = function(fileName, fileFormat) {
        if (fileFormat === void 0) {
          fileFormat = "image/png";
        }
        fileName = (fileName || "").trim() || "image";
        var dataUrl = this.getDataURL(fileFormat);
        var document2 = this.document;
        var a = document2.createElement("a");
        a.href = dataUrl;
        a.download = fileName;
        a.style.display = "none";
        document2.body.appendChild(a);
        a.click();
        document2.body.removeChild(a);
      };
      Object.defineProperty(HdpiCanvas2.prototype, "pixelRatio", {
        get: function() {
          return this._pixelRatio;
        },
        enumerable: false,
        configurable: true
      });
      HdpiCanvas2.prototype.setPixelRatio = function(ratio) {
        var pixelRatio = ratio !== null && ratio !== void 0 ? ratio : window.devicePixelRatio;
        if (!isDesktop()) {
          pixelRatio = 1;
        }
        HdpiCanvas2.overrideScale(this.context, pixelRatio);
        this._pixelRatio = pixelRatio;
      };
      Object.defineProperty(HdpiCanvas2.prototype, "pixelated", {
        get: function() {
          return this.element.style.imageRendering === "pixelated";
        },
        set: function(value) {
          this.element.style.imageRendering = value ? "pixelated" : "auto";
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(HdpiCanvas2.prototype, "width", {
        get: function() {
          return this._width;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(HdpiCanvas2.prototype, "height", {
        get: function() {
          return this._height;
        },
        enumerable: false,
        configurable: true
      });
      HdpiCanvas2.prototype.resize = function(width, height) {
        if (!(width > 0 && height > 0)) {
          return;
        }
        var _a5 = this, element2 = _a5.element, context = _a5.context, pixelRatio = _a5.pixelRatio;
        element2.width = Math.round(width * pixelRatio);
        element2.height = Math.round(height * pixelRatio);
        element2.style.width = width + "px";
        element2.style.height = height + "px";
        context.resetTransform();
        this._width = width;
        this._height = height;
      };
      Object.defineProperty(HdpiCanvas2, "textMeasuringContext", {
        get: function() {
          if (this._textMeasuringContext) {
            return this._textMeasuringContext;
          }
          var canvas = document.createElement("canvas");
          this._textMeasuringContext = canvas.getContext("2d");
          return this._textMeasuringContext;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(HdpiCanvas2, "svgText", {
        get: function() {
          if (this._svgText) {
            return this._svgText;
          }
          var xmlns = "http://www.w3.org/2000/svg";
          var svg = document.createElementNS(xmlns, "svg");
          svg.setAttribute("width", "100");
          svg.setAttribute("height", "100");
          if (svg.classList) {
            svg.classList.add("text-measuring-svg");
          } else {
            svg.setAttribute("class", "text-measuring-svg");
          }
          svg.style.position = "absolute";
          svg.style.top = "-1000px";
          svg.style.visibility = "hidden";
          var svgText = document.createElementNS(xmlns, "text");
          svgText.setAttribute("x", "0");
          svgText.setAttribute("y", "30");
          svgText.setAttribute("text", "black");
          svg.appendChild(svgText);
          document.body.appendChild(svg);
          this._svgText = svgText;
          return svgText;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(HdpiCanvas2, "has", {
        get: function() {
          if (this._has) {
            return this._has;
          }
          var isChrome = navigator.userAgent.indexOf("Chrome") > -1;
          var isFirefox = navigator.userAgent.indexOf("Firefox") > -1;
          var isSafari = !isChrome && navigator.userAgent.indexOf("Safari") > -1;
          this._has = Object.freeze({
            textMetrics: this.textMeasuringContext.measureText("test").actualBoundingBoxDescent !== void 0 && // Firefox implemented advanced TextMetrics object in v74:
            // https://bugzilla.mozilla.org/show_bug.cgi?id=1102584
            // but it's buggy, so we'll keep using the SVG for text measurement in Firefox for now.
            !isFirefox && !isSafari,
            getTransform: this.textMeasuringContext.getTransform !== void 0
          });
          return this._has;
        },
        enumerable: false,
        configurable: true
      });
      HdpiCanvas2.measureText = function(text, font, textBaseline, textAlign) {
        var ctx = this.textMeasuringContext;
        ctx.font = font;
        ctx.textBaseline = textBaseline;
        ctx.textAlign = textAlign;
        return ctx.measureText(text);
      };
      HdpiCanvas2.getTextSize = function(text, font) {
        if (this.has.textMetrics) {
          var ctx = this.textMeasuringContext;
          ctx.font = font;
          var metrics = ctx.measureText(text);
          return {
            width: metrics.width,
            height: metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent
          };
        } else {
          return this.measureSvgText(text, font);
        }
      };
      HdpiCanvas2.measureSvgText = function(text, font) {
        var cache = this.textSizeCache;
        var fontCache = cache[font];
        if (fontCache) {
          var size_1 = fontCache[text];
          if (size_1) {
            return size_1;
          }
        } else {
          cache[font] = {};
        }
        var svgText = this.svgText;
        svgText.style.font = font;
        svgText.textContent = text;
        var bbox = svgText.getBBox();
        var size = {
          width: bbox.width,
          height: bbox.height
        };
        cache[font][text] = size;
        return size;
      };
      HdpiCanvas2.overrideScale = function(ctx, scale) {
        var depth = 0;
        var overrides = {
          save: function() {
            this.$save();
            depth++;
          },
          restore: function() {
            if (depth > 0) {
              this.$restore();
              depth--;
            } else {
              throw new Error("AG Charts - Unable to restore() past depth 0");
            }
          },
          setTransform: function(a, b, c, d, e, f) {
            if (typeof a === "object") {
              this.$setTransform(a);
            } else {
              this.$setTransform(a * scale, b * scale, c * scale, d * scale, e * scale, f * scale);
            }
          },
          resetTransform: function() {
            this.$setTransform(scale, 0, 0, scale, 0, 0);
          },
          verifyDepthZero: function() {
            if (depth !== 0) {
              throw new Error("AG Charts - Save/restore depth is non-zero: " + depth);
            }
          }
        };
        for (var name_1 in overrides) {
          if (Object.prototype.hasOwnProperty.call(overrides, name_1)) {
            if (!ctx["$" + name_1]) {
              ctx["$" + name_1] = ctx[name_1];
            }
            ctx[name_1] = overrides[name_1];
          }
        }
      };
      HdpiCanvas2.textSizeCache = {};
      return HdpiCanvas2;
    }();
  }
});

// node_modules/ag-charts-community/dist/esm/es5/scene/bbox.js
var __assign, __read, BBox;
var init_bbox = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/scene/bbox.js"() {
    __assign = function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    __read = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    BBox = /** @class */
    function() {
      function BBox2(x, y, width, height) {
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
      }
      BBox2.prototype.clone = function() {
        var _a5 = this, x = _a5.x, y = _a5.y, width = _a5.width, height = _a5.height;
        return new BBox2(x, y, width, height);
      };
      BBox2.prototype.equals = function(other) {
        return this.x === other.x && this.y === other.y && this.width === other.width && this.height === other.height;
      };
      BBox2.prototype.containsPoint = function(x, y) {
        return x >= this.x && x <= this.x + this.width && y >= this.y && y <= this.y + this.height;
      };
      BBox2.prototype.collidesBBox = function(other) {
        return this.x < other.x + other.width && this.x + this.width > other.x && this.y < other.y + other.height && this.y + this.height > other.y;
      };
      BBox2.prototype.isInfinite = function() {
        return Math.abs(this.x) === Infinity || Math.abs(this.y) === Infinity || Math.abs(this.width) === Infinity || Math.abs(this.height) === Infinity;
      };
      BBox2.prototype.shrink = function(amount, position) {
        var _this = this;
        var apply = function(pos, amt) {
          switch (pos) {
            case "top":
              _this.y += amt;
            case "bottom":
              _this.height -= amt;
              break;
            case "left":
              _this.x += amt;
            case "right":
              _this.width -= amt;
              break;
            case "vertical":
              _this.y += amt;
              _this.height -= amt * 2;
              break;
            case "horizontal":
              _this.x += amt;
              _this.width -= amt * 2;
              break;
            default:
              _this.x += amt;
              _this.width -= amt * 2;
              _this.y += amt;
              _this.height -= amt * 2;
          }
        };
        if (typeof amount === "number") {
          apply(position, amount);
        } else {
          Object.entries(amount).forEach(function(_a5) {
            var _b2 = __read(_a5, 2), pos = _b2[0], amt = _b2[1];
            return apply(pos, amt);
          });
        }
        return this;
      };
      BBox2.prototype.grow = function(amount, position) {
        if (typeof amount === "number") {
          this.shrink(-amount, position);
        } else {
          var paddingCopy = __assign({}, amount);
          for (var key2 in paddingCopy) {
            paddingCopy[key2] *= -1;
          }
          this.shrink(paddingCopy);
        }
        return this;
      };
      BBox2.merge = function(boxes) {
        var left = Infinity;
        var top = Infinity;
        var right = -Infinity;
        var bottom = -Infinity;
        boxes.forEach(function(box) {
          if (box.x < left) {
            left = box.x;
          }
          if (box.y < top) {
            top = box.y;
          }
          if (box.x + box.width > right) {
            right = box.x + box.width;
          }
          if (box.y + box.height > bottom) {
            bottom = box.y + box.height;
          }
        });
        return new BBox2(left, top, right - left, bottom - top);
      };
      return BBox2;
    }();
  }
});

// node_modules/ag-charts-community/dist/esm/es5/scene/matrix.js
var __read2, Matrix;
var init_matrix = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/scene/matrix.js"() {
    init_bbox();
    __read2 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    Matrix = /** @class */
    function() {
      function Matrix2(elements) {
        if (elements === void 0) {
          elements = [1, 0, 0, 1, 0, 0];
        }
        this.elements = elements;
      }
      Matrix2.prototype.setElements = function(elements) {
        var e = this.elements;
        e[0] = elements[0];
        e[1] = elements[1];
        e[2] = elements[2];
        e[3] = elements[3];
        e[4] = elements[4];
        e[5] = elements[5];
        return this;
      };
      Object.defineProperty(Matrix2.prototype, "identity", {
        get: function() {
          var e = this.elements;
          return e[0] === 1 && e[1] === 0 && e[2] === 0 && e[3] === 1 && e[4] === 0 && e[5] === 0;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Matrix2.prototype, "a", {
        get: function() {
          return this.elements[0];
        },
        set: function(value) {
          this.elements[0] = value;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Matrix2.prototype, "b", {
        get: function() {
          return this.elements[1];
        },
        set: function(value) {
          this.elements[1] = value;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Matrix2.prototype, "c", {
        get: function() {
          return this.elements[2];
        },
        set: function(value) {
          this.elements[2] = value;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Matrix2.prototype, "d", {
        get: function() {
          return this.elements[3];
        },
        set: function(value) {
          this.elements[3] = value;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Matrix2.prototype, "e", {
        get: function() {
          return this.elements[4];
        },
        set: function(value) {
          this.elements[4] = value;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Matrix2.prototype, "f", {
        get: function() {
          return this.elements[5];
        },
        set: function(value) {
          this.elements[5] = value;
        },
        enumerable: false,
        configurable: true
      });
      Matrix2.prototype.AxB = function(A, B, C) {
        var a = A[0] * B[0] + A[2] * B[1], b = A[1] * B[0] + A[3] * B[1], c = A[0] * B[2] + A[2] * B[3], d = A[1] * B[2] + A[3] * B[3], e = A[0] * B[4] + A[2] * B[5] + A[4], f = A[1] * B[4] + A[3] * B[5] + A[5];
        C = C || A;
        C[0] = a;
        C[1] = b;
        C[2] = c;
        C[3] = d;
        C[4] = e;
        C[5] = f;
      };
      Matrix2.prototype.multiplySelf = function(other) {
        this.AxB(this.elements, other.elements);
        return this;
      };
      Matrix2.prototype.multiply = function(other) {
        var elements = new Array(6);
        this.AxB(this.elements, other.elements, elements);
        return new Matrix2(elements);
      };
      Matrix2.prototype.preMultiplySelf = function(other) {
        this.AxB(other.elements, this.elements, this.elements);
        return this;
      };
      Matrix2.prototype.inverse = function() {
        var el = this.elements;
        var a = el[0], b = el[1], c = el[2], d = el[3];
        var e = el[4], f = el[5];
        var rD = 1 / (a * d - b * c);
        a *= rD;
        b *= rD;
        c *= rD;
        d *= rD;
        return new Matrix2([d, -b, -c, a, c * f - d * e, b * e - a * f]);
      };
      Matrix2.prototype.inverseTo = function(other) {
        var el = this.elements;
        var a = el[0], b = el[1], c = el[2], d = el[3];
        var e = el[4], f = el[5];
        var rD = 1 / (a * d - b * c);
        a *= rD;
        b *= rD;
        c *= rD;
        d *= rD;
        other.setElements([d, -b, -c, a, c * f - d * e, b * e - a * f]);
        return this;
      };
      Matrix2.prototype.invertSelf = function() {
        var el = this.elements;
        var a = el[0], b = el[1], c = el[2], d = el[3];
        var e = el[4], f = el[5];
        var rD = 1 / (a * d - b * c);
        a *= rD;
        b *= rD;
        c *= rD;
        d *= rD;
        el[0] = d;
        el[1] = -b;
        el[2] = -c;
        el[3] = a;
        el[4] = c * f - d * e;
        el[5] = b * e - a * f;
        return this;
      };
      Matrix2.prototype.transformPoint = function(x, y) {
        var e = this.elements;
        return {
          x: x * e[0] + y * e[2] + e[4],
          y: x * e[1] + y * e[3] + e[5]
        };
      };
      Matrix2.prototype.transformBBox = function(bbox, target2) {
        var elements = this.elements;
        var xx = elements[0];
        var xy = elements[1];
        var yx = elements[2];
        var yy = elements[3];
        var h_w = bbox.width * 0.5;
        var h_h = bbox.height * 0.5;
        var cx = bbox.x + h_w;
        var cy = bbox.y + h_h;
        var w = Math.abs(h_w * xx) + Math.abs(h_h * yx);
        var h = Math.abs(h_w * xy) + Math.abs(h_h * yy);
        if (!target2) {
          target2 = new BBox(0, 0, 0, 0);
        }
        target2.x = cx * xx + cy * yx + elements[4] - w;
        target2.y = cx * xy + cy * yy + elements[5] - h;
        target2.width = w + w;
        target2.height = h + h;
        return target2;
      };
      Matrix2.prototype.toContext = function(ctx) {
        if (this.identity) {
          return;
        }
        var e = this.elements;
        ctx.transform(e[0], e[1], e[2], e[3], e[4], e[5]);
      };
      Matrix2.flyweight = function(sourceMatrix) {
        return Matrix2.instance.setElements(sourceMatrix.elements);
      };
      Matrix2.updateTransformMatrix = function(matrix, scalingX, scalingY, rotation, translationX, translationY, opts2) {
        var _a5 = __read2([0, 0], 2), bbcx = _a5[0], bbcy = _a5[1];
        var sx = scalingX;
        var sy = scalingY;
        var scx;
        var scy;
        if (sx === 1 && sy === 1) {
          scx = 0;
          scy = 0;
        } else {
          scx = (opts2 === null || opts2 === void 0 ? void 0 : opts2.scalingCenterX) == null ? bbcx : opts2 === null || opts2 === void 0 ? void 0 : opts2.scalingCenterX;
          scy = (opts2 === null || opts2 === void 0 ? void 0 : opts2.scalingCenterY) == null ? bbcy : opts2 === null || opts2 === void 0 ? void 0 : opts2.scalingCenterY;
        }
        var r = rotation;
        var cos = Math.cos(r);
        var sin = Math.sin(r);
        var rcx;
        var rcy;
        if (r === 0) {
          rcx = 0;
          rcy = 0;
        } else {
          rcx = (opts2 === null || opts2 === void 0 ? void 0 : opts2.rotationCenterX) == null ? bbcx : opts2 === null || opts2 === void 0 ? void 0 : opts2.rotationCenterX;
          rcy = (opts2 === null || opts2 === void 0 ? void 0 : opts2.rotationCenterY) == null ? bbcy : opts2 === null || opts2 === void 0 ? void 0 : opts2.rotationCenterY;
        }
        var tx = translationX;
        var ty = translationY;
        var tx4 = scx * (1 - sx) - rcx;
        var ty4 = scy * (1 - sy) - rcy;
        matrix.setElements([
          cos * sx,
          sin * sx,
          -sin * sy,
          cos * sy,
          cos * tx4 - sin * ty4 + rcx + tx,
          sin * tx4 + cos * ty4 + rcy + ty
        ]);
        return matrix;
      };
      Matrix2.fromContext = function(ctx) {
        var domMatrix = ctx.getTransform();
        return new Matrix2([domMatrix.a, domMatrix.b, domMatrix.c, domMatrix.d, domMatrix.e, domMatrix.f]);
      };
      Matrix2.instance = new Matrix2();
      return Matrix2;
    }();
  }
});

// node_modules/ag-charts-community/dist/esm/es5/util/id.js
function resetIds() {
  for (var key2 in ID_MAP) {
    delete ID_MAP[key2];
  }
}
function createId(instance) {
  var _a5;
  var constructor = instance.constructor;
  var className = Object.prototype.hasOwnProperty.call(constructor, "className") ? constructor.className : constructor.name;
  if (!className) {
    throw new Error("The " + constructor + " is missing the 'className' property.");
  }
  var nextId = ((_a5 = ID_MAP[className]) !== null && _a5 !== void 0 ? _a5 : 0) + 1;
  ID_MAP[className] = nextId;
  return className + "-" + nextId;
}
var ID_MAP;
var init_id = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/util/id.js"() {
    ID_MAP = {};
  }
});

// node_modules/ag-charts-community/dist/esm/es5/util/window.js
function windowValue(name) {
  var WINDOW = typeof window !== "undefined" ? window : (
    // typeof global !== 'undefined' ? (global as any) :
    void 0
  );
  return WINDOW === null || WINDOW === void 0 ? void 0 : WINDOW[name];
}
var init_window = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/util/window.js"() {
  }
});

// node_modules/ag-charts-community/dist/esm/es5/scene/changeDetectable.js
function evalAvailable() {
  try {
    eval("");
    return true;
  } catch (e) {
    return false;
  }
}
function SceneChangeDetection(opts) {
  var _a = opts || {}, _b = _a.redraw, redraw = _b === void 0 ? RedrawType.TRIVIAL : _b, _c = _a.type, type = _c === void 0 ? "normal" : _c, changeCb = _a.changeCb, convertor = _a.convertor, _d = _a.checkDirtyOnAssignment, checkDirtyOnAssignment = _d === void 0 ? false : _d;
  var debug = windowValue("agChartsSceneChangeDetectionDebug") != null;
  return function(target, key) {
    var privateKey = "__" + key;
    if (target[key]) {
      return;
    }
    if (EVAL_USEABLE) {
      var setterJs = "\n                " + (debug ? "var setCount = 0;" : "") + "\n                function set_" + key + "(value) {\n                    const oldValue = this." + privateKey + ";\n                    " + (convertor ? "value = convertor(value);" : "") + "\n                    if (value !== oldValue) {\n                        this." + privateKey + " = value;\n                        " + (debug ? "console.log({ t: this, property: '" + key + "', oldValue, value, stack: new Error().stack });" : "") + "\n                        " + (type === "normal" ? "this.markDirty(this, " + redraw + ");" : "") + "\n                        " + (type === "transform" ? "this.markDirtyTransform(" + redraw + ");" : "") + "\n                        " + (type === "path" ? "if (!this._dirtyPath) { this._dirtyPath = true; this.markDirty(this, " + redraw + "); }" : "") + "\n                        " + (type === "font" ? "if (!this._dirtyFont) { this._dirtyFont = true; this.markDirty(this, " + redraw + "); }" : "") + "\n                        " + (changeCb ? "changeCb(this);" : "") + "\n                    }\n                    " + (checkDirtyOnAssignment ? "if (value != null && value._dirty > " + RedrawType.NONE + ") { this.markDirty(value, value._dirty); }" : "") + "\n                };\n                set_" + key + ";\n            ";
      var getterJs = "\n                function get_" + key + "() {\n                    return this." + privateKey + ";\n                };\n                get_" + key + ";\n            ";
      Object.defineProperty(target, key, {
        set: eval(setterJs),
        get: eval(getterJs),
        enumerable: true,
        configurable: true
      });
    } else {
      var setter = function(value) {
        var oldValue = this[privateKey];
        value = convertor ? convertor(value) : value;
        if (value !== oldValue) {
          this[privateKey] = value;
          if (type === "normal")
            this.markDirty(this, redraw);
          if (type === "transform")
            this.markDirtyTransform(redraw);
          if (type === "path" && !this._dirtyPath) {
            this._dirtyPath = true;
            this.markDirty(this, redraw);
          }
          if (type === "font" && !this._dirtyFont) {
            this._dirtyFont = true;
            this.markDirty(this, redraw);
          }
          if (changeCb)
            changeCb(this);
        }
        if (checkDirtyOnAssignment && value != null && value._dirty > RedrawType.NONE)
          this.markDirty(value, value._dirty);
      };
      var getter = function() {
        return this[privateKey];
      };
      Object.defineProperty(target, key, {
        set: setter,
        get: getter,
        enumerable: true,
        configurable: true
      });
    }
  };
}
var RedrawType, EVAL_USEABLE, ChangeDetectable;
var init_changeDetectable = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/scene/changeDetectable.js"() {
    init_window();
    (function(RedrawType2) {
      RedrawType2[RedrawType2["NONE"] = 0] = "NONE";
      RedrawType2[RedrawType2["TRIVIAL"] = 1] = "TRIVIAL";
      RedrawType2[RedrawType2["MINOR"] = 2] = "MINOR";
      RedrawType2[RedrawType2["MAJOR"] = 3] = "MAJOR";
    })(RedrawType || (RedrawType = {}));
    EVAL_USEABLE = evalAvailable();
    ChangeDetectable = /** @class */
    function() {
      function ChangeDetectable2() {
        this._dirty = RedrawType.MAJOR;
      }
      ChangeDetectable2.prototype.markDirty = function(_source, type2) {
        if (type2 === void 0) {
          type2 = RedrawType.TRIVIAL;
        }
        if (this._dirty > type2) {
          return;
        }
        this._dirty = type2;
      };
      ChangeDetectable2.prototype.markClean = function(_opts) {
        this._dirty = RedrawType.NONE;
      };
      ChangeDetectable2.prototype.isDirty = function() {
        return this._dirty > RedrawType.NONE;
      };
      return ChangeDetectable2;
    }();
  }
});

// node_modules/ag-charts-community/dist/esm/es5/scene/node.js
var __extends2, __decorate, __values, __read3, __spread, PointerEvents, zIndexChangedCallback, Node;
var init_node = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/scene/node.js"() {
    init_matrix();
    init_id();
    init_changeDetectable();
    __extends2 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate = function(decorators, target2, key2, desc) {
      var c = arguments.length, r = c < 3 ? target2 : desc === null ? desc = Object.getOwnPropertyDescriptor(target2, key2) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target2, key2, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target2, key2, r) : d(target2, key2)) || r;
      return c > 3 && r && Object.defineProperty(target2, key2, r), r;
    };
    __values = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read3 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read3(arguments[i]));
      return ar;
    };
    (function(PointerEvents2) {
      PointerEvents2[PointerEvents2["All"] = 0] = "All";
      PointerEvents2[PointerEvents2["None"] = 1] = "None";
    })(PointerEvents || (PointerEvents = {}));
    zIndexChangedCallback = function(o) {
      if (o.parent) {
        o.parent.dirtyZIndex = true;
      }
      o.zIndexChanged();
    };
    Node = /** @class */
    function(_super) {
      __extends2(Node2, _super);
      function Node2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.serialNumber = Node2._nextSerialNumber++;
        _this.id = createId(_this);
        _this.tag = NaN;
        _this.isContainerNode = false;
        _this._children = [];
        _this.childSet = {};
        _this.matrix = new Matrix();
        _this.inverseMatrix = new Matrix();
        _this._dirtyTransform = false;
        _this.scalingX = 1;
        _this.scalingY = 1;
        _this.scalingCenterX = null;
        _this.scalingCenterY = null;
        _this.rotationCenterX = null;
        _this.rotationCenterY = null;
        _this.rotation = 0;
        _this.translationX = 0;
        _this.translationY = 0;
        _this.visible = true;
        _this.dirtyZIndex = false;
        _this.zIndex = 0;
        _this.zIndexSubOrder = void 0;
        _this.pointerEvents = PointerEvents.All;
        return _this;
      }
      Object.defineProperty(Node2.prototype, "datum", {
        /**
         * Some arbitrary data bound to the node.
         */
        get: function() {
          var _a5;
          if (this._datum !== void 0) {
            return this._datum;
          }
          return (_a5 = this._parent) === null || _a5 === void 0 ? void 0 : _a5.datum;
        },
        set: function(datum) {
          this._datum = datum;
        },
        enumerable: false,
        configurable: true
      });
      Node2.prototype._setLayerManager = function(value) {
        var e_1, _a5;
        this._layerManager = value;
        this._debug = value === null || value === void 0 ? void 0 : value.debug;
        try {
          for (var _b2 = __values(this.children), _c2 = _b2.next(); !_c2.done; _c2 = _b2.next()) {
            var child = _c2.value;
            child._setLayerManager(value);
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c2 && !_c2.done && (_a5 = _b2.return))
              _a5.call(_b2);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
      };
      Object.defineProperty(Node2.prototype, "layerManager", {
        get: function() {
          return this._layerManager;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Node2.prototype, "parent", {
        get: function() {
          return this._parent;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Node2.prototype, "children", {
        get: function() {
          return this._children;
        },
        enumerable: false,
        configurable: true
      });
      Node2.prototype.append = function(nodes) {
        var e_2, _a5;
        if (!Array.isArray(nodes)) {
          nodes = [nodes];
        }
        try {
          for (var nodes_1 = __values(nodes), nodes_1_1 = nodes_1.next(); !nodes_1_1.done; nodes_1_1 = nodes_1.next()) {
            var node = nodes_1_1.value;
            if (node.parent) {
              throw new Error(node + " already belongs to another parent: " + node.parent + ".");
            }
            if (node.layerManager) {
              throw new Error(node + " already belongs to a scene: " + node.layerManager + ".");
            }
            if (this.childSet[node.id]) {
              throw new Error("Duplicate " + node.constructor.name + " node: " + node);
            }
            this._children.push(node);
            this.childSet[node.id] = true;
            node._parent = this;
            node._setLayerManager(this.layerManager);
          }
        } catch (e_2_1) {
          e_2 = { error: e_2_1 };
        } finally {
          try {
            if (nodes_1_1 && !nodes_1_1.done && (_a5 = nodes_1.return))
              _a5.call(nodes_1);
          } finally {
            if (e_2)
              throw e_2.error;
          }
        }
        this.dirtyZIndex = true;
        this.markDirty(this, RedrawType.MAJOR);
      };
      Node2.prototype.appendChild = function(node) {
        this.append(node);
        return node;
      };
      Node2.prototype.removeChild = function(node) {
        if (node.parent === this) {
          var i = this.children.indexOf(node);
          if (i >= 0) {
            this._children.splice(i, 1);
            delete this.childSet[node.id];
            node._parent = void 0;
            node._setLayerManager();
            this.dirtyZIndex = true;
            this.markDirty(node, RedrawType.MAJOR);
            return node;
          }
        }
        throw new Error("The node to be removed is not a child of this node.");
      };
      Node2.prototype.insertBefore = function(node, nextNode) {
        var parent = node.parent;
        if (node.parent) {
          node.parent.removeChild(node);
        }
        if (nextNode && nextNode.parent === this) {
          var i = this.children.indexOf(nextNode);
          if (i >= 0) {
            this._children.splice(i, 0, node);
            this.childSet[node.id] = true;
            node._parent = this;
            node._setLayerManager(this.layerManager);
          } else {
            throw new Error(nextNode + " has " + parent + " as the parent, but is not in its list of children.");
          }
          this.dirtyZIndex = true;
          this.markDirty(node, RedrawType.MAJOR);
        } else {
          this.append(node);
        }
        return node;
      };
      Node2.prototype.calculateCumulativeMatrix = function() {
        this.computeTransformMatrix();
        var matrix = Matrix.flyweight(this.matrix);
        var parent = this.parent;
        while (parent) {
          parent.computeTransformMatrix();
          matrix.preMultiplySelf(parent.matrix);
          parent = parent.parent;
        }
        return matrix;
      };
      Node2.prototype.transformPoint = function(x, y) {
        var matrix = this.calculateCumulativeMatrix();
        return matrix.invertSelf().transformPoint(x, y);
      };
      Node2.prototype.inverseTransformPoint = function(x, y) {
        var matrix = this.calculateCumulativeMatrix();
        return matrix.transformPoint(x, y);
      };
      Node2.prototype.transformBBox = function(bbox) {
        var matrix = this.calculateCumulativeMatrix();
        return matrix.invertSelf().transformBBox(bbox);
      };
      Node2.prototype.inverseTransformBBox = function(bbox) {
        var matrix = this.calculateCumulativeMatrix();
        return matrix.transformBBox(bbox);
      };
      Node2.prototype.markDirtyTransform = function() {
        this._dirtyTransform = true;
        this.markDirty(this, RedrawType.MAJOR);
      };
      Node2.prototype.containsPoint = function(_x, _y) {
        return false;
      };
      Node2.prototype.pickNode = function(x, y) {
        var _a5;
        if (!this.visible || this.pointerEvents === PointerEvents.None || !this.containsPoint(x, y)) {
          return;
        }
        var children = this.children;
        if (children.length > 1e3) {
          for (var i = children.length - 1; i >= 0; i--) {
            var hit = ((_a5 = children[i].computeBBox()) === null || _a5 === void 0 ? void 0 : _a5.containsPoint(x, y)) ? children[i].pickNode(x, y) : void 0;
            if (hit) {
              return hit;
            }
          }
        } else if (children.length) {
          for (var i = children.length - 1; i >= 0; i--) {
            var hit = children[i].pickNode(x, y);
            if (hit) {
              return hit;
            }
          }
        } else if (!this.isContainerNode) {
          return this;
        }
      };
      Node2.prototype.findNodes = function(predicate) {
        var e_3, _a5;
        var result = predicate(this) ? [this] : [];
        try {
          for (var _b2 = __values(this.children), _c2 = _b2.next(); !_c2.done; _c2 = _b2.next()) {
            var child = _c2.value;
            var childResult = child.findNodes(predicate);
            if (childResult) {
              result.push.apply(result, __spread(childResult));
            }
          }
        } catch (e_3_1) {
          e_3 = { error: e_3_1 };
        } finally {
          try {
            if (_c2 && !_c2.done && (_a5 = _b2.return))
              _a5.call(_b2);
          } finally {
            if (e_3)
              throw e_3.error;
          }
        }
        return result;
      };
      Node2.prototype.computeBBox = function() {
        return;
      };
      Node2.prototype.computeTransformedBBox = function() {
        var bbox = this.computeBBox();
        if (!bbox) {
          return void 0;
        }
        this.computeTransformMatrix();
        var matrix = Matrix.flyweight(this.matrix);
        var parent = this.parent;
        while (parent) {
          parent.computeTransformMatrix();
          matrix.preMultiplySelf(parent.matrix);
          parent = parent.parent;
        }
        matrix.transformBBox(bbox, bbox);
        return bbox;
      };
      Node2.prototype.computeTransformMatrix = function() {
        if (!this._dirtyTransform) {
          return;
        }
        var _a5 = this, matrix = _a5.matrix, scalingX = _a5.scalingX, scalingY = _a5.scalingY, rotation = _a5.rotation, translationX = _a5.translationX, translationY = _a5.translationY, scalingCenterX = _a5.scalingCenterX, scalingCenterY = _a5.scalingCenterY, rotationCenterX = _a5.rotationCenterX, rotationCenterY = _a5.rotationCenterY;
        Matrix.updateTransformMatrix(matrix, scalingX, scalingY, rotation, translationX, translationY, {
          scalingCenterX,
          scalingCenterY,
          rotationCenterX,
          rotationCenterY
        });
        matrix.inverseTo(this.inverseMatrix);
        this._dirtyTransform = false;
      };
      Node2.prototype.render = function(renderCtx) {
        var stats = renderCtx.stats;
        this._dirty = RedrawType.NONE;
        if (stats)
          stats.nodesRendered++;
      };
      Node2.prototype.clearBBox = function(ctx) {
        var bbox = this.computeBBox();
        if (bbox == null) {
          return;
        }
        var x = bbox.x, y = bbox.y, width = bbox.width, height = bbox.height;
        var topLeft = this.transformPoint(x, y);
        var bottomRight = this.transformPoint(x + width, y + height);
        ctx.clearRect(topLeft.x, topLeft.y, bottomRight.x - topLeft.x, bottomRight.y - topLeft.y);
      };
      Node2.prototype.markDirty = function(_source, type2, parentType) {
        if (type2 === void 0) {
          type2 = RedrawType.TRIVIAL;
        }
        if (parentType === void 0) {
          parentType = type2;
        }
        if (this._dirty > type2) {
          return;
        }
        if (this._dirty === type2 && type2 === parentType) {
          return;
        }
        this._dirty = type2;
        if (this.parent) {
          this.parent.markDirty(this, parentType);
        } else if (this.layerManager) {
          this.layerManager.markDirty();
        }
      };
      Object.defineProperty(Node2.prototype, "dirty", {
        get: function() {
          return this._dirty;
        },
        enumerable: false,
        configurable: true
      });
      Node2.prototype.markClean = function(opts2) {
        var e_4, _a5;
        var _b2 = opts2 || {}, _c2 = _b2.force, force = _c2 === void 0 ? false : _c2, _d2 = _b2.recursive, recursive = _d2 === void 0 ? true : _d2;
        if (this._dirty === RedrawType.NONE && !force) {
          return;
        }
        this._dirty = RedrawType.NONE;
        if (recursive) {
          try {
            for (var _e = __values(this.children), _f = _e.next(); !_f.done; _f = _e.next()) {
              var child = _f.value;
              child.markClean();
            }
          } catch (e_4_1) {
            e_4 = { error: e_4_1 };
          } finally {
            try {
              if (_f && !_f.done && (_a5 = _e.return))
                _a5.call(_e);
            } finally {
              if (e_4)
                throw e_4.error;
            }
          }
        }
      };
      Node2.prototype.visibilityChanged = function() {
      };
      Object.defineProperty(Node2.prototype, "nodeCount", {
        get: function() {
          var e_5, _a5;
          var count = 1;
          var dirtyCount = this._dirty >= RedrawType.NONE || this._dirtyTransform ? 1 : 0;
          var visibleCount = this.visible ? 1 : 0;
          try {
            for (var _b2 = __values(this._children), _c2 = _b2.next(); !_c2.done; _c2 = _b2.next()) {
              var child = _c2.value;
              var _d2 = child.nodeCount, childCount = _d2.count, childVisibleCount = _d2.visibleCount, childDirtyCount = _d2.dirtyCount;
              count += childCount;
              visibleCount += childVisibleCount;
              dirtyCount += childDirtyCount;
            }
          } catch (e_5_1) {
            e_5 = { error: e_5_1 };
          } finally {
            try {
              if (_c2 && !_c2.done && (_a5 = _b2.return))
                _a5.call(_b2);
            } finally {
              if (e_5)
                throw e_5.error;
            }
          }
          return { count, visibleCount, dirtyCount };
        },
        enumerable: false,
        configurable: true
      });
      Node2.prototype.zIndexChanged = function() {
      };
      Node2._nextSerialNumber = 0;
      __decorate([
        SceneChangeDetection({ type: "transform" })
      ], Node2.prototype, "scalingX", void 0);
      __decorate([
        SceneChangeDetection({ type: "transform" })
      ], Node2.prototype, "scalingY", void 0);
      __decorate([
        SceneChangeDetection({ type: "transform" })
      ], Node2.prototype, "scalingCenterX", void 0);
      __decorate([
        SceneChangeDetection({ type: "transform" })
      ], Node2.prototype, "scalingCenterY", void 0);
      __decorate([
        SceneChangeDetection({ type: "transform" })
      ], Node2.prototype, "rotationCenterX", void 0);
      __decorate([
        SceneChangeDetection({ type: "transform" })
      ], Node2.prototype, "rotationCenterY", void 0);
      __decorate([
        SceneChangeDetection({ type: "transform" })
      ], Node2.prototype, "rotation", void 0);
      __decorate([
        SceneChangeDetection({ type: "transform" })
      ], Node2.prototype, "translationX", void 0);
      __decorate([
        SceneChangeDetection({ type: "transform" })
      ], Node2.prototype, "translationY", void 0);
      __decorate([
        SceneChangeDetection({ redraw: RedrawType.MAJOR, changeCb: function(o) {
          return o.visibilityChanged();
        } })
      ], Node2.prototype, "visible", void 0);
      __decorate([
        SceneChangeDetection({
          redraw: RedrawType.TRIVIAL,
          changeCb: zIndexChangedCallback
        })
      ], Node2.prototype, "zIndex", void 0);
      __decorate([
        SceneChangeDetection({
          redraw: RedrawType.TRIVIAL,
          changeCb: zIndexChangedCallback
        })
      ], Node2.prototype, "zIndexSubOrder", void 0);
      return Node2;
    }(ChangeDetectable);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/util/compare.js
function ascendingStringNumberUndefined(a, b) {
  var diff = 0;
  if (typeof a === "number" && typeof b === "number") {
    diff = a - b;
  } else if (typeof a === "string" && typeof b === "string") {
    diff = a.localeCompare(b);
  } else if (a == null && b == null) {
  } else if (a == null) {
    diff = -1;
  } else if (b == null) {
    diff = 1;
  } else {
    diff = String(a).localeCompare(String(b));
  }
  return diff;
}
function compoundAscending(a, b, comparator) {
  var toLiteral = function(v) {
    if (typeof v === "function") {
      return v();
    }
    return v;
  };
  for (var idx in a) {
    var diff = comparator(toLiteral(a[idx]), toLiteral(b[idx]));
    if (diff !== 0) {
      return diff;
    }
  }
  return 0;
}
var init_compare = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/util/compare.js"() {
  }
});

// node_modules/ag-charts-community/dist/esm/es5/util/function.js
function doOnce(func, key2) {
  if (doOnceFlags[key2]) {
    return;
  }
  func();
  doOnceFlags[key2] = true;
}
var doOnceFlags;
var init_function = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/util/function.js"() {
    doOnceFlags = {};
  }
});

// node_modules/ag-charts-community/dist/esm/es5/util/logger.js
var __read4, __spread2, Logger;
var init_logger = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/util/logger.js"() {
    init_function();
    __read4 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread2 = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read4(arguments[i]));
      return ar;
    };
    Logger = {
      debug: function() {
        var logContent = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          logContent[_i] = arguments[_i];
        }
        console.log.apply(console, __spread2(logContent));
      },
      warn: function(message) {
        var logContent = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          logContent[_i - 1] = arguments[_i];
        }
        console.warn.apply(console, __spread2(["AG Charts - " + message], logContent));
      },
      error: function(message) {
        var logContent = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          logContent[_i - 1] = arguments[_i];
        }
        console.error.apply(console, __spread2(["AG Charts - " + message], logContent));
      },
      warnOnce: function(message) {
        var logContent = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          logContent[_i - 1] = arguments[_i];
        }
        doOnce(function() {
          return Logger.warn.apply(Logger, __spread2([message], logContent));
        }, "Logger.warn: " + message);
      },
      errorOnce: function(message) {
        var logContent = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          logContent[_i - 1] = arguments[_i];
        }
        doOnce(function() {
          return Logger.error.apply(Logger, __spread2([message], logContent));
        }, "Logger.warn: " + message);
      }
    };
  }
});

// node_modules/ag-charts-community/dist/esm/es5/scene/group.js
var __extends3, __assign2, __decorate2, __values2, __read5, __spread3, Group;
var init_group = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/scene/group.js"() {
    init_node();
    init_bbox();
    init_compare();
    init_logger();
    __extends3 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __assign2 = function() {
      __assign2 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign2.apply(this, arguments);
    };
    __decorate2 = function(decorators, target2, key2, desc) {
      var c = arguments.length, r = c < 3 ? target2 : desc === null ? desc = Object.getOwnPropertyDescriptor(target2, key2) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target2, key2, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target2, key2, r) : d(target2, key2)) || r;
      return c > 3 && r && Object.defineProperty(target2, key2, r), r;
    };
    __values2 = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read5 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread3 = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read5(arguments[i]));
      return ar;
    };
    Group = /** @class */
    function(_super) {
      __extends3(Group2, _super);
      function Group2(opts2) {
        var _a5;
        var _this = _super.call(this) || this;
        _this.opts = opts2;
        _this.opacity = 1;
        _this.lastBBox = void 0;
        var _b2 = opts2 || {}, zIndex = _b2.zIndex, zIndexSubOrder = _b2.zIndexSubOrder;
        _this.isContainerNode = true;
        if (zIndex !== void 0) {
          _this.zIndex = zIndex;
        }
        if (zIndexSubOrder !== void 0) {
          _this.zIndexSubOrder = zIndexSubOrder;
        }
        _this.name = (_a5 = _this.opts) === null || _a5 === void 0 ? void 0 : _a5.name;
        return _this;
      }
      Group2.prototype.zIndexChanged = function() {
        var _a5;
        if (this.layer) {
          (_a5 = this._layerManager) === null || _a5 === void 0 ? void 0 : _a5.moveLayer(this.layer, this.zIndex, this.zIndexSubOrder);
        }
      };
      Group2.prototype.isLayer = function() {
        return this.layer != null;
      };
      Group2.prototype._setLayerManager = function(scene) {
        var _this = this;
        var _a5;
        if (this._layerManager && this.layer) {
          this._layerManager.removeLayer(this.layer);
          this.layer = void 0;
        }
        if (this.layer) {
          throw new Error("AG Charts - unable to deregister scene rendering layer!");
        }
        _super.prototype._setLayerManager.call(this, scene);
        if (scene && ((_a5 = this.opts) === null || _a5 === void 0 ? void 0 : _a5.layer)) {
          var _b2 = this.opts || {}, zIndex = _b2.zIndex, zIndexSubOrder = _b2.zIndexSubOrder, name_1 = _b2.name;
          var getComputedOpacity = function() {
            return _this.getComputedOpacity();
          };
          var getVisibility = function() {
            return _this.getVisibility();
          };
          this.layer = scene.addLayer({ zIndex, zIndexSubOrder, name: name_1, getComputedOpacity, getVisibility });
        }
      };
      Group2.prototype.getComputedOpacity = function() {
        var opacity = 1;
        var node = this;
        do {
          if (node instanceof Group2) {
            opacity *= node.opacity;
          }
        } while (node = node.parent);
        return opacity;
      };
      Group2.prototype.getVisibility = function() {
        var node = this;
        var visible = this.visible;
        while (node = node.parent) {
          if (node.visible) {
            continue;
          }
          visible = node.visible;
        }
        return visible;
      };
      Group2.prototype.visibilityChanged = function() {
        if (this.layer) {
          this.layer.enabled = this.visible;
        }
      };
      Group2.prototype.markDirty = function(source, type2) {
        if (type2 === void 0) {
          type2 = RedrawType.TRIVIAL;
        }
        var parentType = type2 <= RedrawType.MINOR ? RedrawType.TRIVIAL : type2;
        _super.prototype.markDirty.call(this, source, type2, parentType);
      };
      Group2.prototype.containsPoint = function(_x, _y) {
        return true;
      };
      Group2.prototype.computeBBox = function() {
        this.computeTransformMatrix();
        return Group2.computeBBox(this.children);
      };
      Group2.prototype.computeTransformedBBox = function() {
        return this.computeBBox();
      };
      Group2.prototype.render = function(renderCtx) {
        var e_1, _a5;
        var _b2, _c2;
        var _d2 = this.opts, _e = (_d2 === void 0 ? {} : _d2).name, name = _e === void 0 ? void 0 : _e;
        var _f = this._debug, _g = (_f === void 0 ? {} : _f).consoleLog, consoleLog = _g === void 0 ? false : _g;
        var _h = this, dirty = _h.dirty, dirtyZIndex = _h.dirtyZIndex, layer = _h.layer, children = _h.children, clipRect = _h.clipRect;
        var ctx = renderCtx.ctx, forceRender = renderCtx.forceRender, clipBBox = renderCtx.clipBBox;
        var resized = renderCtx.resized, stats = renderCtx.stats;
        var canvasCtxTransform = ctx.getTransform();
        var isDirty = dirty >= RedrawType.MINOR || dirtyZIndex || resized;
        var isChildDirty = isDirty || children.some(function(n) {
          return n.dirty >= RedrawType.TRIVIAL;
        });
        if (name && consoleLog) {
          Logger.debug({ name, group: this, isDirty, isChildDirty, renderCtx, forceRender });
        }
        if (layer) {
          var currentBBox = this.computeBBox();
          if (this.lastBBox === void 0 || !this.lastBBox.equals(currentBBox)) {
            forceRender = true;
            this.lastBBox = currentBBox;
          } else if (!currentBBox.isInfinite()) {
            forceRender = false;
          }
        }
        if (!isDirty && !isChildDirty && !forceRender) {
          if (name && consoleLog && stats) {
            var counts = this.nodeCount;
            Logger.debug({ name, result: "skipping", renderCtx, counts, group: this });
          }
          if (layer && stats) {
            stats.layersSkipped++;
            stats.nodesSkipped += this.nodeCount.count;
          }
          this.markClean({ recursive: false });
          return;
        }
        var groupVisible = this.visible;
        if (layer) {
          ctx = layer.context;
          ctx.save();
          ctx.resetTransform();
          forceRender = true;
          layer.clear();
          if (clipBBox) {
            var width = clipBBox.width, height = clipBBox.height, x = clipBBox.x, y = clipBBox.y;
            if (consoleLog) {
              Logger.debug({ name, clipBBox, ctxTransform: ctx.getTransform(), renderCtx, group: this });
            }
            this.clipCtx(ctx, x, y, width, height);
          }
          ctx.setTransform(canvasCtxTransform);
        } else {
          ctx.globalAlpha *= this.opacity;
        }
        this.computeTransformMatrix();
        this.matrix.toContext(ctx);
        if (clipRect) {
          var x = clipRect.x, y = clipRect.y, width = clipRect.width, height = clipRect.height;
          ctx.save();
          if (consoleLog) {
            Logger.debug({ name, clipRect, ctxTransform: ctx.getTransform(), renderCtx, group: this });
          }
          this.clipCtx(ctx, x, y, width, height);
          clipBBox = this.matrix.inverse().transformBBox(clipRect);
        }
        if (dirtyZIndex) {
          this.sortChildren();
          forceRender = true;
        }
        var renderContextChanged = forceRender !== renderCtx.forceRender || clipBBox !== renderCtx.clipBBox || ctx !== renderCtx.ctx;
        var childRenderContext = renderContextChanged ? __assign2(__assign2({}, renderCtx), { ctx, forceRender, clipBBox }) : renderCtx;
        var skipped = 0;
        try {
          for (var children_1 = __values2(children), children_1_1 = children_1.next(); !children_1_1.done; children_1_1 = children_1.next()) {
            var child = children_1_1.value;
            if (!child.visible || !groupVisible) {
              child.markClean();
              if (stats)
                skipped += child.nodeCount.count;
              continue;
            }
            if (!forceRender && child.dirty === RedrawType.NONE) {
              if (stats)
                skipped += child.nodeCount.count;
              continue;
            }
            ctx.save();
            child.render(childRenderContext);
            ctx.restore();
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (children_1_1 && !children_1_1.done && (_a5 = children_1.return))
              _a5.call(children_1);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        if (stats)
          stats.nodesSkipped += skipped;
        _super.prototype.render.call(this, renderCtx);
        if (clipRect) {
          ctx.restore();
        }
        if (layer) {
          if (stats)
            stats.layersRendered++;
          ctx.restore();
          layer.snapshot();
          (_c2 = (_b2 = layer.context).verifyDepthZero) === null || _c2 === void 0 ? void 0 : _c2.call(_b2);
        }
        if (name && consoleLog && stats) {
          var counts = this.nodeCount;
          Logger.debug({ name, result: "rendered", skipped, renderCtx, counts, group: this });
        }
      };
      Group2.prototype.sortChildren = function() {
        this.dirtyZIndex = false;
        this.children.sort(function(a, b) {
          var _a5, _b2;
          return compoundAscending(__spread3([a.zIndex], (_a5 = a.zIndexSubOrder) !== null && _a5 !== void 0 ? _a5 : [void 0, void 0], [a.serialNumber]), __spread3([b.zIndex], (_b2 = b.zIndexSubOrder) !== null && _b2 !== void 0 ? _b2 : [void 0, void 0], [b.serialNumber]), ascendingStringNumberUndefined);
        });
      };
      Group2.prototype.clipCtx = function(ctx, x, y, width, height) {
        ctx.beginPath();
        ctx.moveTo(x, y);
        ctx.lineTo(x + width, y);
        ctx.lineTo(x + width, y + height);
        ctx.lineTo(x, y + height);
        ctx.closePath();
        ctx.clip();
      };
      Group2.computeBBox = function(nodes) {
        var left = Infinity;
        var right = -Infinity;
        var top = Infinity;
        var bottom = -Infinity;
        nodes.forEach(function(n) {
          if (!n.visible) {
            return;
          }
          var bbox = n.computeTransformedBBox();
          if (!bbox) {
            return;
          }
          var x = bbox.x;
          var y = bbox.y;
          if (x < left) {
            left = x;
          }
          if (y < top) {
            top = y;
          }
          if (x + bbox.width > right) {
            right = x + bbox.width;
          }
          if (y + bbox.height > bottom) {
            bottom = y + bbox.height;
          }
        });
        return new BBox(left, top, right - left, bottom - top);
      };
      Group2.prototype.setClipRectInGroupCoordinateSpace = function(bbox) {
        this.clipRect = bbox ? this.transformBBox(bbox) : void 0;
      };
      Group2.className = "Group";
      __decorate2([
        SceneChangeDetection({
          convertor: function(v) {
            return Math.min(1, Math.max(0, v));
          }
        })
      ], Group2.prototype, "opacity", void 0);
      return Group2;
    }(Node);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/canvas/hdpiOffscreenCanvas.js
var HdpiOffscreenCanvas;
var init_hdpiOffscreenCanvas = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/canvas/hdpiOffscreenCanvas.js"() {
    init_hdpiCanvas();
    init_userAgent();
    HdpiOffscreenCanvas = /** @class */
    function() {
      function HdpiOffscreenCanvas2(_a5) {
        var _b2 = _a5.width, width = _b2 === void 0 ? 600 : _b2, _c2 = _a5.height, height = _c2 === void 0 ? 300 : _c2, _d2 = _a5.overrideDevicePixelRatio, overrideDevicePixelRatio = _d2 === void 0 ? void 0 : _d2;
        this.enabled = true;
        this._pixelRatio = NaN;
        this._width = 0;
        this._height = 0;
        this.canvas = new OffscreenCanvas(width, height);
        this.context = this.canvas.getContext("2d");
        this.imageSource = this.canvas.transferToImageBitmap();
        this.setPixelRatio(overrideDevicePixelRatio);
        this.resize(width, height);
      }
      HdpiOffscreenCanvas2.isSupported = function() {
        return window["OffscreenCanvas"] != null;
      };
      HdpiOffscreenCanvas2.prototype.snapshot = function() {
        this.imageSource.close();
        this.imageSource = this.canvas.transferToImageBitmap();
      };
      HdpiOffscreenCanvas2.prototype.destroy = function() {
        this.imageSource.close();
        this.canvas.width = 0;
        this.canvas.height = 0;
        this.context.clearRect(0, 0, 0, 0);
      };
      HdpiOffscreenCanvas2.prototype.clear = function() {
        this.context.save();
        this.context.resetTransform();
        this.context.clearRect(0, 0, this.width, this.height);
        this.context.restore();
      };
      Object.defineProperty(HdpiOffscreenCanvas2.prototype, "pixelRatio", {
        get: function() {
          return this._pixelRatio;
        },
        enumerable: false,
        configurable: true
      });
      HdpiOffscreenCanvas2.prototype.setPixelRatio = function(ratio) {
        var pixelRatio = ratio !== null && ratio !== void 0 ? ratio : window.devicePixelRatio;
        if (!isDesktop()) {
          pixelRatio = 1;
        }
        HdpiCanvas.overrideScale(this.context, pixelRatio);
        this._pixelRatio = pixelRatio;
      };
      Object.defineProperty(HdpiOffscreenCanvas2.prototype, "width", {
        get: function() {
          return this._width;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(HdpiOffscreenCanvas2.prototype, "height", {
        get: function() {
          return this._height;
        },
        enumerable: false,
        configurable: true
      });
      HdpiOffscreenCanvas2.prototype.resize = function(width, height) {
        if (!(width > 0 && height > 0)) {
          return;
        }
        var _a5 = this, canvas = _a5.canvas, context = _a5.context, pixelRatio = _a5.pixelRatio;
        canvas.width = Math.round(width * pixelRatio);
        canvas.height = Math.round(height * pixelRatio);
        context.resetTransform();
        this._width = width;
        this._height = height;
      };
      return HdpiOffscreenCanvas2;
    }();
  }
});

// node_modules/ag-charts-community/dist/esm/es5/scene/scene.js
function buildSceneNodeHighlight() {
  var _a5;
  var config = (_a5 = windowValue("agChartsSceneDebug")) !== null && _a5 !== void 0 ? _a5 : [];
  if (typeof config === "string") {
    config = [config];
  }
  var result = [];
  config.forEach(function(name) {
    if (name === "layout") {
      result.push("seriesRoot", "legend", "root", /.*Axis-\d+-axis.*/);
    } else {
      result.push(name);
    }
  });
  return result;
}
var __assign3, __awaiter, __generator, __read6, __spread4, __values3, Scene;
var init_scene = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/scene/scene.js"() {
    init_hdpiCanvas();
    init_node();
    init_id();
    init_group();
    init_hdpiOffscreenCanvas();
    init_window();
    init_compare();
    init_logger();
    __assign3 = function() {
      __assign3 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign3.apply(this, arguments);
    };
    __awaiter = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __generator = function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    __read6 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread4 = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read6(arguments[i]));
      return ar;
    };
    __values3 = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    Scene = /** @class */
    function() {
      function Scene2(opts2) {
        var _a5, _b2;
        this.id = createId(this);
        this.layers = [];
        this._nextZIndex = 0;
        this._nextLayerId = 0;
        this._dirty = false;
        this._root = null;
        this.debug = {
          dirtyTree: false,
          stats: false,
          renderBoundingBoxes: false,
          consoleLog: false,
          sceneNodeHighlight: []
        };
        var _c2 = opts2.document, document2 = _c2 === void 0 ? window.document : _c2, _d2 = opts2.mode, mode = _d2 === void 0 ? windowValue("agChartsSceneRenderModel") || "adv-composite" : _d2, width = opts2.width, height = opts2.height, _e = opts2.overrideDevicePixelRatio, overrideDevicePixelRatio = _e === void 0 ? void 0 : _e;
        this.overrideDevicePixelRatio = overrideDevicePixelRatio;
        this.opts = { document: document2, mode };
        this.debug.consoleLog = windowValue("agChartsDebug") === true;
        this.debug.stats = (_a5 = windowValue("agChartsSceneStats")) !== null && _a5 !== void 0 ? _a5 : false;
        this.debug.dirtyTree = (_b2 = windowValue("agChartsSceneDirtyTree")) !== null && _b2 !== void 0 ? _b2 : false;
        this.debug.sceneNodeHighlight = buildSceneNodeHighlight();
        this.canvas = new HdpiCanvas({ document: document2, width, height, overrideDevicePixelRatio });
      }
      Object.defineProperty(Scene2.prototype, "container", {
        get: function() {
          return this.canvas.container;
        },
        set: function(value) {
          this.canvas.container = value;
        },
        enumerable: false,
        configurable: true
      });
      Scene2.prototype.download = function(fileName, fileFormat) {
        this.canvas.download(fileName, fileFormat);
      };
      Scene2.prototype.getDataURL = function(type2) {
        return this.canvas.getDataURL(type2);
      };
      Object.defineProperty(Scene2.prototype, "width", {
        get: function() {
          return this.pendingSize ? this.pendingSize[0] : this.canvas.width;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Scene2.prototype, "height", {
        get: function() {
          return this.pendingSize ? this.pendingSize[1] : this.canvas.height;
        },
        enumerable: false,
        configurable: true
      });
      Scene2.prototype.resize = function(width, height) {
        width = Math.round(width);
        height = Math.round(height);
        var lessThanZero = width <= 0 || height <= 0;
        var nan = isNaN(width) || isNaN(height);
        var unchanged = width === this.width && height === this.height;
        if (unchanged || nan || lessThanZero) {
          return false;
        }
        this.pendingSize = [width, height];
        this.markDirty();
        return true;
      };
      Scene2.prototype.addLayer = function(opts2) {
        var _a5;
        var mode = this.opts.mode;
        var layeredModes = ["composite", "dom-composite", "adv-composite"];
        if (!layeredModes.includes(mode)) {
          return void 0;
        }
        var _b2 = opts2.zIndex, zIndex = _b2 === void 0 ? this._nextZIndex++ : _b2, name = opts2.name, zIndexSubOrder = opts2.zIndexSubOrder, getComputedOpacity = opts2.getComputedOpacity, getVisibility = opts2.getVisibility;
        var _c2 = this, width = _c2.width, height = _c2.height, overrideDevicePixelRatio = _c2.overrideDevicePixelRatio;
        var domLayer = mode === "dom-composite";
        var advLayer = mode === "adv-composite";
        var canvas = !advLayer || !HdpiOffscreenCanvas.isSupported() ? new HdpiCanvas({
          document: this.opts.document,
          width,
          height,
          domLayer,
          zIndex,
          name,
          overrideDevicePixelRatio
        }) : new HdpiOffscreenCanvas({
          width,
          height,
          overrideDevicePixelRatio
        });
        var newLayer = {
          id: this._nextLayerId++,
          name,
          zIndex,
          zIndexSubOrder,
          canvas,
          getComputedOpacity,
          getVisibility
        };
        if (zIndex >= this._nextZIndex) {
          this._nextZIndex = zIndex + 1;
        }
        this.layers.push(newLayer);
        this.sortLayers();
        if (domLayer) {
          var domCanvases = this.layers.map(function(v) {
            return v.canvas;
          }).filter(function(v) {
            return v instanceof HdpiCanvas;
          });
          var newLayerIndex = domCanvases.findIndex(function(v) {
            return v === canvas;
          });
          var lastLayer = (_a5 = domCanvases[newLayerIndex - 1]) !== null && _a5 !== void 0 ? _a5 : this.canvas;
          lastLayer.element.insertAdjacentElement("afterend", canvas.element);
        }
        if (this.debug.consoleLog) {
          Logger.debug({ layers: this.layers });
        }
        return newLayer.canvas;
      };
      Scene2.prototype.removeLayer = function(canvas) {
        var index = this.layers.findIndex(function(l) {
          return l.canvas === canvas;
        });
        if (index >= 0) {
          this.layers.splice(index, 1);
          canvas.destroy();
          this.markDirty();
          if (this.debug.consoleLog) {
            Logger.debug({ layers: this.layers });
          }
        }
      };
      Scene2.prototype.moveLayer = function(canvas, newZIndex, newZIndexSubOrder) {
        var layer = this.layers.find(function(l) {
          return l.canvas === canvas;
        });
        if (layer) {
          layer.zIndex = newZIndex;
          layer.zIndexSubOrder = newZIndexSubOrder;
          this.sortLayers();
          this.markDirty();
          if (this.debug.consoleLog) {
            Logger.debug({ layers: this.layers });
          }
        }
      };
      Scene2.prototype.sortLayers = function() {
        this.layers.sort(function(a, b) {
          var _a5, _b2;
          return compoundAscending(__spread4([a.zIndex], (_a5 = a.zIndexSubOrder) !== null && _a5 !== void 0 ? _a5 : [void 0, void 0], [a.id]), __spread4([b.zIndex], (_b2 = b.zIndexSubOrder) !== null && _b2 !== void 0 ? _b2 : [void 0, void 0], [b.id]), ascendingStringNumberUndefined);
        });
      };
      Scene2.prototype.markDirty = function() {
        this._dirty = true;
      };
      Object.defineProperty(Scene2.prototype, "dirty", {
        get: function() {
          return this._dirty;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Scene2.prototype, "root", {
        get: function() {
          return this._root;
        },
        set: function(node) {
          if (node === this._root) {
            return;
          }
          if (this._root) {
            this._root._setLayerManager();
          }
          this._root = node;
          if (node) {
            if (node.parent === null && node.layerManager && node.layerManager !== this) {
              node.layerManager.root = null;
            }
            node._setLayerManager(this);
          }
          this.markDirty();
        },
        enumerable: false,
        configurable: true
      });
      Scene2.prototype.strip = function() {
        var e_1, _a5;
        var layers = this.layers;
        try {
          for (var layers_1 = __values3(layers), layers_1_1 = layers_1.next(); !layers_1_1.done; layers_1_1 = layers_1.next()) {
            var layer = layers_1_1.value;
            layer.canvas.destroy();
            delete layer["canvas"];
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (layers_1_1 && !layers_1_1.done && (_a5 = layers_1.return))
              _a5.call(layers_1);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        layers.splice(0, layers.length);
        this.root = null;
        this._dirty = false;
        this.canvas.context.resetTransform();
      };
      Scene2.prototype.destroy = function() {
        this.container = void 0;
        this.strip();
        this.canvas.destroy();
        Object.assign(this, { canvas: void 0, ctx: void 0 });
      };
      Scene2.prototype.render = function(opts2) {
        var _a5;
        return __awaiter(this, void 0, void 0, function() {
          var _b2, _c2, debugSplitTimes, _d2, extraDebugStats, _e, canvas, ctx, root, layers, pendingSize, mode, renderCtx, canvasCleared, _f, dirtyTree, paths;
          var _g;
          return __generator(this, function(_h) {
            _b2 = opts2 || {}, _c2 = _b2.debugSplitTimes, debugSplitTimes = _c2 === void 0 ? [performance.now()] : _c2, _d2 = _b2.extraDebugStats, extraDebugStats = _d2 === void 0 ? {} : _d2;
            _e = this, canvas = _e.canvas, ctx = _e.canvas.context, root = _e.root, layers = _e.layers, pendingSize = _e.pendingSize, mode = _e.opts.mode;
            if (pendingSize) {
              (_g = this.canvas).resize.apply(_g, __spread4(pendingSize));
              this.layers.forEach(function(layer) {
                var _a6;
                return (_a6 = layer.canvas).resize.apply(_a6, __spread4(pendingSize));
              });
              this.pendingSize = void 0;
            }
            if (root && !root.visible) {
              this._dirty = false;
              return [
                2
                /*return*/
              ];
            }
            if (root && !this.dirty) {
              if (this.debug.consoleLog) {
                Logger.debug("no-op", {
                  redrawType: RedrawType[root.dirty],
                  tree: this.buildTree(root)
                });
              }
              this.debugStats(debugSplitTimes, ctx, void 0, extraDebugStats);
              return [
                2
                /*return*/
              ];
            }
            renderCtx = {
              ctx,
              forceRender: true,
              resized: !!pendingSize,
              debugNodes: {}
            };
            if (this.debug.stats === "detailed") {
              renderCtx.stats = { layersRendered: 0, layersSkipped: 0, nodesRendered: 0, nodesSkipped: 0 };
            }
            canvasCleared = false;
            if (!root || root.dirty >= RedrawType.TRIVIAL) {
              canvasCleared = true;
              canvas.clear();
            }
            if (root && this.debug.dirtyTree) {
              _f = this.buildDirtyTree(root), dirtyTree = _f.dirtyTree, paths = _f.paths;
              Logger.debug({ dirtyTree, paths });
            }
            if (root && canvasCleared) {
              if (this.debug.consoleLog) {
                Logger.debug("before", {
                  redrawType: RedrawType[root.dirty],
                  canvasCleared,
                  tree: this.buildTree(root)
                });
              }
              if (root.visible) {
                ctx.save();
                root.render(renderCtx);
                ctx.restore();
              }
            }
            if (mode !== "dom-composite" && layers.length > 0 && canvasCleared) {
              this.sortLayers();
              ctx.save();
              ctx.setTransform(1 / canvas.pixelRatio, 0, 0, 1 / canvas.pixelRatio, 0, 0);
              layers.forEach(function(_a6) {
                var _b3 = _a6.canvas, imageSource = _b3.imageSource, enabled = _b3.enabled, getComputedOpacity = _a6.getComputedOpacity, getVisibility = _a6.getVisibility;
                if (!enabled || !getVisibility()) {
                  return;
                }
                ctx.globalAlpha = getComputedOpacity();
                ctx.drawImage(imageSource, 0, 0);
              });
              ctx.restore();
            }
            (_a5 = ctx.verifyDepthZero) === null || _a5 === void 0 ? void 0 : _a5.call(ctx);
            this._dirty = false;
            this.debugStats(debugSplitTimes, ctx, renderCtx.stats, extraDebugStats);
            this.debugSceneNodeHighlight(ctx, this.debug.sceneNodeHighlight, renderCtx.debugNodes);
            if (root && this.debug.consoleLog) {
              Logger.debug("after", { redrawType: RedrawType[root.dirty], canvasCleared, tree: this.buildTree(root) });
            }
            return [
              2
              /*return*/
            ];
          });
        });
      };
      Scene2.prototype.debugStats = function(debugSplitTimes, ctx, renderCtxStats, extraDebugStats) {
        var e_2, _a5;
        if (extraDebugStats === void 0) {
          extraDebugStats = {};
        }
        var end = performance.now();
        if (this.debug.stats) {
          var start = debugSplitTimes[0];
          debugSplitTimes.push(end);
          var pct = function(rendered, skipped) {
            var total = rendered + skipped;
            return rendered + " / " + total + " (" + Math.round(100 * rendered / total) + "%)";
          };
          var time_1 = function(start2, end2) {
            return Math.round((end2 - start2) * 100) / 100 + "ms";
          };
          var _b2 = renderCtxStats !== null && renderCtxStats !== void 0 ? renderCtxStats : {}, _c2 = _b2.layersRendered, layersRendered = _c2 === void 0 ? 0 : _c2, _d2 = _b2.layersSkipped, layersSkipped = _d2 === void 0 ? 0 : _d2, _e = _b2.nodesRendered, nodesRendered = _e === void 0 ? 0 : _e, _f = _b2.nodesSkipped, nodesSkipped = _f === void 0 ? 0 : _f;
          var splits = debugSplitTimes.map(function(t, i) {
            return i > 0 ? time_1(debugSplitTimes[i - 1], t) : null;
          }).filter(function(v) {
            return v != null;
          }).join(" + ");
          var extras = Object.entries(extraDebugStats).map(function(_a6) {
            var _b3 = __read6(_a6, 2), k = _b3[0], v = _b3[1];
            return k + ": " + v;
          }).join(" ; ");
          var stats = [
            time_1(start, end) + " (" + splits + ")",
            "" + extras,
            this.debug.stats === "detailed" ? "Layers: " + pct(layersRendered, layersSkipped) : null,
            this.debug.stats === "detailed" ? "Nodes: " + pct(nodesRendered, nodesSkipped) : null
          ].filter(function(v) {
            return v != null;
          });
          var lineHeight = 15;
          ctx.save();
          ctx.fillStyle = "white";
          ctx.fillRect(0, 0, 200, 10 + lineHeight * stats.length);
          ctx.fillStyle = "black";
          var index = 0;
          try {
            for (var stats_1 = __values3(stats), stats_1_1 = stats_1.next(); !stats_1_1.done; stats_1_1 = stats_1.next()) {
              var stat = stats_1_1.value;
              ctx.fillText(stat, 2, 10 + index++ * lineHeight);
            }
          } catch (e_2_1) {
            e_2 = { error: e_2_1 };
          } finally {
            try {
              if (stats_1_1 && !stats_1_1.done && (_a5 = stats_1.return))
                _a5.call(stats_1);
            } finally {
              if (e_2)
                throw e_2.error;
            }
          }
          ctx.restore();
        }
      };
      Scene2.prototype.debugSceneNodeHighlight = function(ctx, sceneNodeHighlight, debugNodes) {
        var e_3, _a5, e_4, _b2, e_5, _c2;
        var _d2;
        var regexpPredicate = function(matcher) {
          return function(n) {
            if (matcher.test(n.id)) {
              return true;
            }
            return n instanceof Group && n.name != null && matcher.test(n.name);
          };
        };
        var stringPredicate = function(match) {
          return function(n) {
            if (match === n.id) {
              return true;
            }
            return n instanceof Group && n.name != null && match === n.name;
          };
        };
        try {
          for (var sceneNodeHighlight_1 = __values3(sceneNodeHighlight), sceneNodeHighlight_1_1 = sceneNodeHighlight_1.next(); !sceneNodeHighlight_1_1.done; sceneNodeHighlight_1_1 = sceneNodeHighlight_1.next()) {
            var next = sceneNodeHighlight_1_1.value;
            if (typeof next === "string" && debugNodes[next] != null)
              continue;
            var predicate = typeof next === "string" ? stringPredicate(next) : regexpPredicate(next);
            var nodes = (_d2 = this.root) === null || _d2 === void 0 ? void 0 : _d2.findNodes(predicate);
            if (!nodes || nodes.length === 0) {
              Logger.debug("no debugging node with id [" + next + "] in scene graph.");
              continue;
            }
            try {
              for (var nodes_1 = (e_4 = void 0, __values3(nodes)), nodes_1_1 = nodes_1.next(); !nodes_1_1.done; nodes_1_1 = nodes_1.next()) {
                var node = nodes_1_1.value;
                if (node instanceof Group && node.name) {
                  debugNodes[node.name] = node;
                } else {
                  debugNodes[node.id] = node;
                }
              }
            } catch (e_4_1) {
              e_4 = { error: e_4_1 };
            } finally {
              try {
                if (nodes_1_1 && !nodes_1_1.done && (_b2 = nodes_1.return))
                  _b2.call(nodes_1);
              } finally {
                if (e_4)
                  throw e_4.error;
              }
            }
          }
        } catch (e_3_1) {
          e_3 = { error: e_3_1 };
        } finally {
          try {
            if (sceneNodeHighlight_1_1 && !sceneNodeHighlight_1_1.done && (_a5 = sceneNodeHighlight_1.return))
              _a5.call(sceneNodeHighlight_1);
          } finally {
            if (e_3)
              throw e_3.error;
          }
        }
        ctx.save();
        try {
          for (var _e = __values3(Object.entries(debugNodes)), _f = _e.next(); !_f.done; _f = _e.next()) {
            var _g = __read6(_f.value, 2), name_1 = _g[0], node = _g[1];
            var bbox = node.computeTransformedBBox();
            if (!bbox) {
              Logger.debug("no bbox for debugged node [" + name_1 + "].");
              continue;
            }
            ctx.globalAlpha = 0.8;
            ctx.strokeStyle = "red";
            ctx.lineWidth = 1;
            ctx.strokeRect(bbox.x, bbox.y, bbox.width, bbox.height);
            ctx.fillStyle = "red";
            ctx.strokeStyle = "white";
            ctx.font = "16px sans-serif";
            ctx.textBaseline = "top";
            ctx.textAlign = "left";
            ctx.lineWidth = 2;
            ctx.strokeText(name_1, bbox.x, bbox.y, bbox.width);
            ctx.fillText(name_1, bbox.x, bbox.y, bbox.width);
          }
        } catch (e_5_1) {
          e_5 = { error: e_5_1 };
        } finally {
          try {
            if (_f && !_f.done && (_c2 = _e.return))
              _c2.call(_e);
          } finally {
            if (e_5)
              throw e_5.error;
          }
        }
        ctx.restore();
      };
      Scene2.prototype.buildTree = function(node) {
        var _this = this;
        var _a5;
        var name = (_a5 = node instanceof Group ? node.name : null) !== null && _a5 !== void 0 ? _a5 : node.id;
        return __assign3({
          name,
          node,
          dirty: RedrawType[node.dirty]
        }, node.children.map(function(c) {
          return _this.buildTree(c);
        }).reduce(function(result, childTree) {
          var treeNodeName = childTree.name;
          var _a6 = childTree.node, visible = _a6.visible, opacity = _a6.opacity, zIndex = _a6.zIndex, zIndexSubOrder = _a6.zIndexSubOrder, childNode = childTree.node;
          if (!visible || opacity <= 0) {
            treeNodeName = "(" + treeNodeName + ")";
          }
          if (childNode instanceof Group && childNode.isLayer()) {
            treeNodeName = "*" + treeNodeName + "*";
          }
          var key2 = [
            "" + (treeNodeName !== null && treeNodeName !== void 0 ? treeNodeName : "<unknown>"),
            "z: " + zIndex,
            zIndexSubOrder && "zo: " + zIndexSubOrder.join(" / ")
          ].filter(function(v) {
            return !!v;
          }).join(" ");
          result[key2] = childTree;
          return result;
        }, {}));
      };
      Scene2.prototype.buildDirtyTree = function(node) {
        var _this = this;
        var _a5;
        if (node.dirty === RedrawType.NONE) {
          return { dirtyTree: {}, paths: [] };
        }
        var childrenDirtyTree = node.children.map(function(c) {
          return _this.buildDirtyTree(c);
        }).filter(function(c) {
          return c.paths.length > 0;
        });
        var name = (_a5 = node instanceof Group ? node.name : null) !== null && _a5 !== void 0 ? _a5 : node.id;
        var paths = childrenDirtyTree.length === 0 ? [name] : childrenDirtyTree.map(function(c) {
          return c.paths;
        }).reduce(function(r, p) {
          return r.concat(p);
        }, []).map(function(p) {
          return name + "." + p;
        });
        return {
          dirtyTree: __assign3({
            name,
            node,
            dirty: RedrawType[node.dirty]
          }, childrenDirtyTree.map(function(c) {
            return c.dirtyTree;
          }).filter(function(t) {
            return t.dirty !== void 0;
          }).reduce(function(result, childTree) {
            result[childTree.name || "<unknown>"] = childTree;
            return result;
          }, {})),
          paths
        };
      };
      Scene2.className = "Scene";
      return Scene2;
    }();
  }
});

// node_modules/ag-charts-community/dist/esm/es5/util/observable.js
var Observable;
var init_observable = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/util/observable.js"() {
    Observable = /** @class */
    function() {
      function Observable2() {
        this.allEventListeners = /* @__PURE__ */ new Map();
      }
      Observable2.prototype.addEventListener = function(type2, listener) {
        if (typeof listener !== "function") {
          throw new Error("AG Charts - listener must be a Function");
        }
        var allEventListeners = this.allEventListeners;
        var eventListeners = allEventListeners.get(type2);
        if (!eventListeners) {
          eventListeners = /* @__PURE__ */ new Set();
          allEventListeners.set(type2, eventListeners);
        }
        if (!eventListeners.has(listener)) {
          eventListeners.add(listener);
        }
      };
      Observable2.prototype.removeEventListener = function(type2, listener) {
        var allEventListeners = this.allEventListeners;
        var eventListeners = allEventListeners.get(type2);
        if (!eventListeners) {
          return;
        }
        eventListeners.delete(listener);
        if (eventListeners.size === 0) {
          allEventListeners.delete(type2);
        }
      };
      Observable2.prototype.hasEventListener = function(type2) {
        return this.allEventListeners.has(type2);
      };
      Observable2.prototype.clearEventListeners = function() {
        this.allEventListeners.clear();
      };
      Observable2.prototype.fireEvent = function(event) {
        var listeners = this.allEventListeners.get(event.type);
        listeners === null || listeners === void 0 ? void 0 : listeners.forEach(function(listener) {
          return listener(event);
        });
      };
      return Observable2;
    }();
  }
});

// node_modules/ag-charts-community/dist/esm/es5/util/value.js
function isDiscrete(value) {
  return isString(value) || isStringObject(value);
}
function isContinuous(value) {
  var isNumberObject = function(v) {
    return !!v && Object.prototype.hasOwnProperty.call(v, "valueOf") && isNumber(v.valueOf());
  };
  var isDate2 = function(v) {
    return v instanceof Date && !isNaN(+v);
  };
  return isNumber(value) || isNumberObject(value) || isDate2(value);
}
function checkDatum(value, isContinuousScale) {
  if (isContinuousScale && isContinuous(value)) {
    return value;
  } else if (!isContinuousScale) {
    if (!isDiscrete(value)) {
      return String(value);
    }
    return value;
  }
  return void 0;
}
var isString, isStringObject, isDate, isNumber;
var init_value = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/util/value.js"() {
    isString = function(v) {
      return typeof v === "string";
    };
    isStringObject = function(v) {
      return !!v && Object.prototype.hasOwnProperty.call(v, "toString") && isString(v.toString());
    };
    isDate = function(v) {
      return v instanceof Date && !isNaN(+v);
    };
    isNumber = function(v) {
      return typeof v === "number" && Number.isFinite(v);
    };
  }
});

// node_modules/ag-charts-community/dist/esm/es5/util/decorator.js
function initialiseConfig(target2, propertyKeyOrSymbol, propertyKey, valueStoreKey) {
  if (Object.getOwnPropertyDescriptor(target2, CONFIG_KEY) == null) {
    Object.defineProperty(target2, CONFIG_KEY, { value: {} });
  }
  var config = target2[CONFIG_KEY];
  if (config[propertyKey] != null) {
    return config[propertyKey];
  }
  config[propertyKey] = { setters: [], getters: [] };
  var descriptor = Object.getOwnPropertyDescriptor(target2, propertyKeyOrSymbol);
  var prevSet = descriptor === null || descriptor === void 0 ? void 0 : descriptor.set;
  var prevGet = descriptor === null || descriptor === void 0 ? void 0 : descriptor.get;
  var getter2 = function() {
    var e_1, _a5;
    var _b2, _c2;
    var value = prevGet ? prevGet.call(this) : this[valueStoreKey];
    try {
      for (var _d2 = __values4((_c2 = (_b2 = config[propertyKey]) === null || _b2 === void 0 ? void 0 : _b2.getters) !== null && _c2 !== void 0 ? _c2 : []), _e = _d2.next(); !_e.done; _e = _d2.next()) {
        var transformFn = _e.value;
        value = transformFn(this, propertyKeyOrSymbol, value);
        if (value === BREAK_TRANSFORM_CHAIN) {
          return void 0;
        }
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (_e && !_e.done && (_a5 = _d2.return))
          _a5.call(_d2);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
    return value;
  };
  var setter2 = function(value) {
    var e_2, _a5;
    var _b2, _c2;
    var setters = (_c2 = (_b2 = config[propertyKey]) === null || _b2 === void 0 ? void 0 : _b2.setters) !== null && _c2 !== void 0 ? _c2 : [];
    var oldValue;
    if (setters.some(function(f) {
      return f.length > 2;
    })) {
      oldValue = prevGet ? prevGet.call(this) : this[valueStoreKey];
    }
    try {
      for (var setters_1 = __values4(setters), setters_1_1 = setters_1.next(); !setters_1_1.done; setters_1_1 = setters_1.next()) {
        var transformFn = setters_1_1.value;
        value = transformFn(this, propertyKeyOrSymbol, value, oldValue);
        if (value === BREAK_TRANSFORM_CHAIN) {
          return;
        }
      }
    } catch (e_2_1) {
      e_2 = { error: e_2_1 };
    } finally {
      try {
        if (setters_1_1 && !setters_1_1.done && (_a5 = setters_1.return))
          _a5.call(setters_1);
      } finally {
        if (e_2)
          throw e_2.error;
      }
    }
    if (prevSet) {
      prevSet.call(this, value);
    } else {
      this[valueStoreKey] = value;
    }
  };
  Object.defineProperty(target2, propertyKeyOrSymbol, {
    set: setter2,
    get: getter2,
    enumerable: true,
    configurable: false
  });
  return config[propertyKey];
}
function addTransformToInstanceProperty(setTransform, getTransform) {
  return function(target2, propertyKeyOrSymbol) {
    var propertyKey = propertyKeyOrSymbol.toString();
    var valueStoreKey = "__" + propertyKey;
    var _a5 = initialiseConfig(target2, propertyKeyOrSymbol, propertyKey, valueStoreKey), getters = _a5.getters, setters = _a5.setters;
    setters.push(setTransform);
    if (getTransform) {
      getters.splice(0, 0, getTransform);
    }
  };
}
var __values4, BREAK_TRANSFORM_CHAIN, CONFIG_KEY;
var init_decorator = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/util/decorator.js"() {
    __values4 = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    BREAK_TRANSFORM_CHAIN = Symbol("BREAK");
    CONFIG_KEY = "__decorator_config";
  }
});

// node_modules/ag-charts-community/dist/esm/es5/util/deprecation.js
function createDeprecationWarning() {
  return function(key2, message) {
    var msg = ["Property [" + key2 + "] is deprecated.", message].filter(function(v) {
      return v != null;
    }).join(" ");
    Logger.warnOnce(msg);
  };
}
function Deprecated(message, opts2) {
  var def = opts2 === null || opts2 === void 0 ? void 0 : opts2.default;
  var warn = createDeprecationWarning();
  return addTransformToInstanceProperty(function(_, key2, value) {
    if (value !== def) {
      warn(key2.toString(), message);
    }
    return value;
  });
}
function DeprecatedAndRenamedTo(newPropName, mapValue) {
  var warnDeprecated2 = createDeprecationWarning();
  return addTransformToInstanceProperty(function(target2, key2, value) {
    if (value !== target2[newPropName]) {
      warnDeprecated2(key2.toString(), "Use [" + newPropName + "] instead.");
      target2[newPropName] = mapValue ? mapValue(value) : value;
    }
    return BREAK_TRANSFORM_CHAIN;
  }, function(target2, key2) {
    warnDeprecated2(key2.toString(), "Use [" + newPropName + "] instead.");
    return target2[newPropName];
  });
}
var init_deprecation = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/util/deprecation.js"() {
    init_decorator();
    init_logger();
  }
});

// node_modules/ag-charts-community/dist/esm/es5/util/color.js
var __read7, Color;
var init_color = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/util/color.js"() {
    init_logger();
    __read7 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    Color = /** @class */
    function() {
      function Color2(r, g, b, a) {
        if (a === void 0) {
          a = 1;
        }
        this.r = Math.min(1, Math.max(0, r || 0));
        this.g = Math.min(1, Math.max(0, g || 0));
        this.b = Math.min(1, Math.max(0, b || 0));
        this.a = Math.min(1, Math.max(0, a || 0));
      }
      Color2.validColorString = function(str) {
        if (str.indexOf("#") >= 0) {
          return !!Color2.parseHex(str);
        }
        if (str.indexOf("rgb") >= 0) {
          return !!Color2.stringToRgba(str);
        }
        return !!Color2.nameToHex[str.toLowerCase()];
      };
      Color2.fromString = function(str) {
        if (str.indexOf("#") >= 0) {
          return Color2.fromHexString(str);
        }
        var hex = Color2.nameToHex[str.toLowerCase()];
        if (hex) {
          return Color2.fromHexString(hex);
        }
        if (str.indexOf("rgb") >= 0) {
          return Color2.fromRgbaString(str);
        }
        throw new Error("Invalid color string: '" + str + "'");
      };
      Color2.tryParseFromString = function(str) {
        try {
          return Color2.fromString(str);
        } catch (e) {
          Logger.warnOnce("invalid color string: '" + str + "'.");
          return Color2.fromArray([0, 0, 0]);
        }
      };
      Color2.parseHex = function(input) {
        input = input.replace(/ /g, "").slice(1);
        var parts;
        switch (input.length) {
          case 6:
          case 8:
            parts = [];
            for (var i = 0; i < input.length; i += 2) {
              parts.push(parseInt("" + input[i] + input[i + 1], 16));
            }
            break;
          case 3:
          case 4:
            parts = input.split("").map(function(p) {
              return parseInt(p, 16);
            }).map(function(p) {
              return p + p * 16;
            });
            break;
        }
        if ((parts === null || parts === void 0 ? void 0 : parts.length) >= 3) {
          if (parts.every(function(p) {
            return p >= 0;
          })) {
            if (parts.length === 3) {
              parts.push(255);
            }
            return parts;
          }
        }
      };
      Color2.fromHexString = function(str) {
        var values = Color2.parseHex(str);
        if (values) {
          var _a5 = __read7(values, 4), r = _a5[0], g = _a5[1], b = _a5[2], a = _a5[3];
          return new Color2(r / 255, g / 255, b / 255, a / 255);
        }
        throw new Error("Malformed hexadecimal color string: '" + str + "'");
      };
      Color2.stringToRgba = function(str) {
        var _a5 = __read7([NaN, NaN], 2), po = _a5[0], pc = _a5[1];
        for (var i = 0; i < str.length; i++) {
          var c = str[i];
          if (!po && c === "(") {
            po = i;
          } else if (c === ")") {
            pc = i;
            break;
          }
        }
        var contents = po && pc && str.substring(po + 1, pc);
        if (!contents) {
          return;
        }
        var parts = contents.split(",");
        var rgba = [];
        for (var i = 0; i < parts.length; i++) {
          var part = parts[i];
          var value = parseFloat(part);
          if (isNaN(value)) {
            return;
          }
          if (part.indexOf("%") >= 0) {
            value = Math.max(0, Math.min(100, value));
            value /= 100;
          } else {
            if (i === 3) {
              value = Math.max(0, Math.min(1, value));
            } else {
              value = Math.max(0, Math.min(255, value));
              value /= 255;
            }
          }
          rgba.push(value);
        }
        return rgba;
      };
      Color2.fromRgbaString = function(str) {
        var rgba = Color2.stringToRgba(str);
        if (rgba) {
          if (rgba.length === 3) {
            return new Color2(rgba[0], rgba[1], rgba[2]);
          } else if (rgba.length === 4) {
            return new Color2(rgba[0], rgba[1], rgba[2], rgba[3]);
          }
        }
        throw new Error("Malformed rgb/rgba color string: '" + str + "'");
      };
      Color2.fromArray = function(arr) {
        if (arr.length === 4) {
          return new Color2(arr[0], arr[1], arr[2], arr[3]);
        }
        if (arr.length === 3) {
          return new Color2(arr[0], arr[1], arr[2]);
        }
        throw new Error("The given array should contain 3 or 4 color components (numbers).");
      };
      Color2.fromHSB = function(h, s, b, alpha) {
        if (alpha === void 0) {
          alpha = 1;
        }
        var rgb = Color2.HSBtoRGB(h, s, b);
        return new Color2(rgb[0], rgb[1], rgb[2], alpha);
      };
      Color2.padHex = function(str) {
        return str.length === 1 ? "0" + str : str;
      };
      Color2.prototype.toHexString = function() {
        var hex = "#" + Color2.padHex(Math.round(this.r * 255).toString(16)) + Color2.padHex(Math.round(this.g * 255).toString(16)) + Color2.padHex(Math.round(this.b * 255).toString(16));
        if (this.a < 1) {
          hex += Color2.padHex(Math.round(this.a * 255).toString(16));
        }
        return hex;
      };
      Color2.prototype.toRgbaString = function(fractionDigits) {
        if (fractionDigits === void 0) {
          fractionDigits = 3;
        }
        var components = [Math.round(this.r * 255), Math.round(this.g * 255), Math.round(this.b * 255)];
        var k = Math.pow(10, fractionDigits);
        if (this.a !== 1) {
          components.push(Math.round(this.a * k) / k);
          return "rgba(" + components.join(", ") + ")";
        }
        return "rgb(" + components.join(", ") + ")";
      };
      Color2.prototype.toString = function() {
        if (this.a === 1) {
          return this.toHexString();
        }
        return this.toRgbaString();
      };
      Color2.prototype.toHSB = function() {
        return Color2.RGBtoHSB(this.r, this.g, this.b);
      };
      Color2.RGBtoHSB = function(r, g, b) {
        var min = Math.min(r, g, b);
        var max = Math.max(r, g, b);
        var S = max !== 0 ? (max - min) / max : 0;
        var H = NaN;
        if (min !== max) {
          var delta = max - min;
          var rc = (max - r) / delta;
          var gc_1 = (max - g) / delta;
          var bc = (max - b) / delta;
          if (r === max) {
            H = bc - gc_1;
          } else if (g === max) {
            H = 2 + rc - bc;
          } else {
            H = 4 + gc_1 - rc;
          }
          H /= 6;
          if (H < 0) {
            H = H + 1;
          }
        }
        return [H * 360, S, max];
      };
      Color2.HSBtoRGB = function(H, S, B) {
        if (isNaN(H)) {
          H = 0;
        }
        H = (H % 360 + 360) % 360 / 360;
        var r = 0;
        var g = 0;
        var b = 0;
        if (S === 0) {
          r = g = b = B;
        } else {
          var h = (H - Math.floor(H)) * 6;
          var f = h - Math.floor(h);
          var p = B * (1 - S);
          var q = B * (1 - S * f);
          var t = B * (1 - S * (1 - f));
          switch (h >> 0) {
            case 0:
              r = B;
              g = t;
              b = p;
              break;
            case 1:
              r = q;
              g = B;
              b = p;
              break;
            case 2:
              r = p;
              g = B;
              b = t;
              break;
            case 3:
              r = p;
              g = q;
              b = B;
              break;
            case 4:
              r = t;
              g = p;
              b = B;
              break;
            case 5:
              r = B;
              g = p;
              b = q;
              break;
          }
        }
        return [r, g, b];
      };
      Color2.prototype.derive = function(hueShift, saturationFactor, brightnessFactor, opacityFactor) {
        var hsb = Color2.RGBtoHSB(this.r, this.g, this.b);
        var b = hsb[2];
        if (b == 0 && brightnessFactor > 1) {
          b = 0.05;
        }
        var h = ((hsb[0] + hueShift) % 360 + 360) % 360;
        var s = Math.max(Math.min(hsb[1] * saturationFactor, 1), 0);
        b = Math.max(Math.min(b * brightnessFactor, 1), 0);
        var a = Math.max(Math.min(this.a * opacityFactor, 1), 0);
        var rgba = Color2.HSBtoRGB(h, s, b);
        rgba.push(a);
        return Color2.fromArray(rgba);
      };
      Color2.prototype.brighter = function() {
        return this.derive(0, 1, 1 / 0.7, 1);
      };
      Color2.prototype.darker = function() {
        return this.derive(0, 1, 0.7, 1);
      };
      Color2.nameToHex = Object.freeze({
        aliceblue: "#F0F8FF",
        antiquewhite: "#FAEBD7",
        aqua: "#00FFFF",
        aquamarine: "#7FFFD4",
        azure: "#F0FFFF",
        beige: "#F5F5DC",
        bisque: "#FFE4C4",
        black: "#000000",
        blanchedalmond: "#FFEBCD",
        blue: "#0000FF",
        blueviolet: "#8A2BE2",
        brown: "#A52A2A",
        burlywood: "#DEB887",
        cadetblue: "#5F9EA0",
        chartreuse: "#7FFF00",
        chocolate: "#D2691E",
        coral: "#FF7F50",
        cornflowerblue: "#6495ED",
        cornsilk: "#FFF8DC",
        crimson: "#DC143C",
        cyan: "#00FFFF",
        darkblue: "#00008B",
        darkcyan: "#008B8B",
        darkgoldenrod: "#B8860B",
        darkgray: "#A9A9A9",
        darkgreen: "#006400",
        darkgrey: "#A9A9A9",
        darkkhaki: "#BDB76B",
        darkmagenta: "#8B008B",
        darkolivegreen: "#556B2F",
        darkorange: "#FF8C00",
        darkorchid: "#9932CC",
        darkred: "#8B0000",
        darksalmon: "#E9967A",
        darkseagreen: "#8FBC8F",
        darkslateblue: "#483D8B",
        darkslategray: "#2F4F4F",
        darkslategrey: "#2F4F4F",
        darkturquoise: "#00CED1",
        darkviolet: "#9400D3",
        deeppink: "#FF1493",
        deepskyblue: "#00BFFF",
        dimgray: "#696969",
        dimgrey: "#696969",
        dodgerblue: "#1E90FF",
        firebrick: "#B22222",
        floralwhite: "#FFFAF0",
        forestgreen: "#228B22",
        fuchsia: "#FF00FF",
        gainsboro: "#DCDCDC",
        ghostwhite: "#F8F8FF",
        gold: "#FFD700",
        goldenrod: "#DAA520",
        gray: "#808080",
        green: "#008000",
        greenyellow: "#ADFF2F",
        grey: "#808080",
        honeydew: "#F0FFF0",
        hotpink: "#FF69B4",
        indianred: "#CD5C5C",
        indigo: "#4B0082",
        ivory: "#FFFFF0",
        khaki: "#F0E68C",
        lavender: "#E6E6FA",
        lavenderblush: "#FFF0F5",
        lawngreen: "#7CFC00",
        lemonchiffon: "#FFFACD",
        lightblue: "#ADD8E6",
        lightcoral: "#F08080",
        lightcyan: "#E0FFFF",
        lightgoldenrodyellow: "#FAFAD2",
        lightgray: "#D3D3D3",
        lightgreen: "#90EE90",
        lightgrey: "#D3D3D3",
        lightpink: "#FFB6C1",
        lightsalmon: "#FFA07A",
        lightseagreen: "#20B2AA",
        lightskyblue: "#87CEFA",
        lightslategray: "#778899",
        lightslategrey: "#778899",
        lightsteelblue: "#B0C4DE",
        lightyellow: "#FFFFE0",
        lime: "#00FF00",
        limegreen: "#32CD32",
        linen: "#FAF0E6",
        magenta: "#FF00FF",
        maroon: "#800000",
        mediumaquamarine: "#66CDAA",
        mediumblue: "#0000CD",
        mediumorchid: "#BA55D3",
        mediumpurple: "#9370DB",
        mediumseagreen: "#3CB371",
        mediumslateblue: "#7B68EE",
        mediumspringgreen: "#00FA9A",
        mediumturquoise: "#48D1CC",
        mediumvioletred: "#C71585",
        midnightblue: "#191970",
        mintcream: "#F5FFFA",
        mistyrose: "#FFE4E1",
        moccasin: "#FFE4B5",
        navajowhite: "#FFDEAD",
        navy: "#000080",
        oldlace: "#FDF5E6",
        olive: "#808000",
        olivedrab: "#6B8E23",
        orange: "#FFA500",
        orangered: "#FF4500",
        orchid: "#DA70D6",
        palegoldenrod: "#EEE8AA",
        palegreen: "#98FB98",
        paleturquoise: "#AFEEEE",
        palevioletred: "#DB7093",
        papayawhip: "#FFEFD5",
        peachpuff: "#FFDAB9",
        peru: "#CD853F",
        pink: "#FFC0CB",
        plum: "#DDA0DD",
        powderblue: "#B0E0E6",
        purple: "#800080",
        rebeccapurple: "#663399",
        red: "#FF0000",
        rosybrown: "#BC8F8F",
        royalblue: "#4169E1",
        saddlebrown: "#8B4513",
        salmon: "#FA8072",
        sandybrown: "#F4A460",
        seagreen: "#2E8B57",
        seashell: "#FFF5EE",
        sienna: "#A0522D",
        silver: "#C0C0C0",
        skyblue: "#87CEEB",
        slateblue: "#6A5ACD",
        slategray: "#708090",
        slategrey: "#708090",
        snow: "#FFFAFA",
        springgreen: "#00FF7F",
        steelblue: "#4682B4",
        tan: "#D2B48C",
        teal: "#008080",
        thistle: "#D8BFD8",
        tomato: "#FF6347",
        transparent: "#00000000",
        turquoise: "#40E0D0",
        violet: "#EE82EE",
        wheat: "#F5DEB3",
        white: "#FFFFFF",
        whitesmoke: "#F5F5F5",
        yellow: "#FFFF00",
        yellowgreen: "#9ACD32"
      });
      return Color2;
    }();
  }
});

// node_modules/ag-charts-community/dist/esm/es5/util/validation.js
function Validate(predicate) {
  return addTransformToInstanceProperty(function(target2, prop, v) {
    var _a5, _b2, _c2;
    if (predicate(v, { target: target2 })) {
      return v;
    }
    var cleanKey = prop.toString().replace(/^_*/, "");
    var targetClass = (_b2 = (_a5 = target2.constructor) === null || _a5 === void 0 ? void 0 : _a5.className) !== null && _b2 !== void 0 ? _b2 : (_c2 = target2.constructor) === null || _c2 === void 0 ? void 0 : _c2.name;
    if ((targetClass === null || targetClass === void 0 ? void 0 : targetClass.length) < 3) {
      targetClass = null;
    }
    var targetClassName = targetClass ? "of [" + targetClass + "] " : "";
    if (predicate.message) {
      Logger.warn("Property [" + cleanKey + "] " + targetClassName + "cannot be set to [" + JSON.stringify(v) + "]; " + predicate.message + ", ignoring.");
    } else {
      Logger.warn("Property [" + cleanKey + "] " + targetClassName + "cannot be set to [" + JSON.stringify(v) + "], ignoring.");
    }
    return BREAK_TRANSFORM_CHAIN;
  });
}
function predicateWithMessage(predicate, message) {
  predicate.message = message;
  return predicate;
}
function NUMBER(min, max) {
  var message = "expecting a finite Number" + ((min !== void 0 ? ", more than or equal to " + min : "") + (max !== void 0 ? ", less than or equal to " + max : ""));
  return predicateWithMessage(function(v) {
    return typeof v === "number" && Number.isFinite(v) && (min !== void 0 ? v >= min : true) && (max !== void 0 ? v <= max : true);
  }, message);
}
function OPT_NUMBER(min, max) {
  var message = "expecting an optional finite Number" + ((min !== void 0 ? ", more than or equal to " + min : "") + (max !== void 0 ? ", less than or equal to " + max : ""));
  return predicateWithMessage(function(v, ctx) {
    return OPTIONAL(v, ctx, NUMBER(min, max));
  }, message);
}
function NUMBER_OR_NAN(min, max) {
  var message = "expecting a finite Number" + ((min !== void 0 ? ", more than or equal to " + min : "") + (max !== void 0 ? ", less than or equal to " + max : ""));
  return predicateWithMessage(function(v) {
    return typeof v === "number" && (isNaN(v) || Number.isFinite(v) && (min !== void 0 ? v >= min : true) && (max !== void 0 ? v <= max : true));
  }, message);
}
function STRING_UNION() {
  var values = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    values[_i] = arguments[_i];
  }
  var message = "expecting one of: " + values.join(", ");
  return predicateWithMessage(function(v) {
    return typeof v === "string" && values.indexOf(v) >= 0;
  }, message);
}
var OPTIONAL, ARRAY, OPT_ARRAY, AND, OR, isComparable, LESS_THAN, GREATER_THAN, FUNCTION, OPT_FUNCTION, BOOLEAN, OPT_BOOLEAN, STRING, OPT_STRING, DATE, OPT_DATE, DATE_ARRAY, DATETIME_MS, OPT_DATETIME_MS, OPT_DATE_OR_DATETIME_MS, colorMessage, COLOR_STRING, OPT_COLOR_STRING, COLOR_STRING_ARRAY, OPT_COLOR_STRING_ARRAY, NUMBER_ARRAY, OPT_NUMBER_ARRAY, STRING_ARRAY, OPT_STRING_ARRAY, BOOLEAN_ARRAY, OPT_BOOLEAN_ARRAY, FONT_WEIGHTS, FONT_STYLE, OPT_FONT_STYLE, FONT_WEIGHT, OPT_FONT_WEIGHT, LINE_DASH, OPT_LINE_DASH, LINE_CAPS, LINE_CAP, OPT_LINE_CAP, LINE_JOINS, LINE_JOIN, OPT_LINE_JOIN, POSITIONS, POSITION, INTERACTION_RANGES, INTERACTION_RANGE;
var init_validation = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/util/validation.js"() {
    init_color();
    init_decorator();
    init_logger();
    OPTIONAL = function(v, ctx, predicate) {
      return v === void 0 || predicate(v, ctx);
    };
    ARRAY = function(length, predicate) {
      return predicateWithMessage(function(v, ctx) {
        return Array.isArray(v) && (length ? v.length === length : true) && (predicate ? v.every(function(e) {
          return predicate(e, ctx);
        }) : true);
      }, "expecting an Array");
    };
    OPT_ARRAY = function(length) {
      return predicateWithMessage(function(v, ctx) {
        return OPTIONAL(v, ctx, ARRAY(length));
      }, "expecting an optional Array");
    };
    AND = function() {
      var predicates = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        predicates[_i] = arguments[_i];
      }
      return predicateWithMessage(function(v, ctx) {
        return predicates.every(function(p) {
          return p(v, ctx);
        });
      }, predicates.map(function(p) {
        return p.message;
      }).filter(function(m) {
        return m != null;
      }).join(" AND "));
    };
    OR = function() {
      var predicates = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        predicates[_i] = arguments[_i];
      }
      return predicateWithMessage(function(v, ctx) {
        return predicates.some(function(p) {
          return p(v, ctx);
        });
      }, predicates.map(function(p) {
        return p.message;
      }).filter(function(m) {
        return m != null;
      }).join(" OR "));
    };
    isComparable = function(v) {
      return v != null && !isNaN(v);
    };
    LESS_THAN = function(otherField) {
      return predicateWithMessage(function(v, ctx) {
        return !isComparable(v) || !isComparable(ctx.target[otherField]) || v < ctx.target[otherField];
      }, "expected to be less than " + otherField);
    };
    GREATER_THAN = function(otherField) {
      return predicateWithMessage(function(v, ctx) {
        return !isComparable(v) || !isComparable(ctx.target[otherField]) || v > ctx.target[otherField];
      }, "expected to be greater than " + otherField);
    };
    FUNCTION = predicateWithMessage(function(v) {
      return typeof v === "function";
    }, "expecting a Function");
    OPT_FUNCTION = predicateWithMessage(function(v, ctx) {
      return OPTIONAL(v, ctx, FUNCTION);
    }, "expecting an optional Function");
    BOOLEAN = predicateWithMessage(function(v) {
      return v === true || v === false;
    }, "expecting a Boolean");
    OPT_BOOLEAN = predicateWithMessage(function(v, ctx) {
      return OPTIONAL(v, ctx, BOOLEAN);
    }, "expecting an optional Boolean");
    STRING = predicateWithMessage(function(v) {
      return typeof v === "string";
    }, "expecting a String");
    OPT_STRING = predicateWithMessage(function(v, ctx) {
      return OPTIONAL(v, ctx, STRING);
    }, "expecting an optional String");
    DATE = predicateWithMessage(function(v) {
      return v instanceof Date && !isNaN(+v);
    }, "expecting a Date object");
    OPT_DATE = predicateWithMessage(function(v, ctx) {
      return OPTIONAL(v, ctx, DATE);
    }, "expecting an optional Date");
    DATE_ARRAY = predicateWithMessage(ARRAY(void 0, DATE), "expecting an Array of Date objects");
    DATETIME_MS = NUMBER(0);
    OPT_DATETIME_MS = predicateWithMessage(function(v, ctx) {
      return OPTIONAL(v, ctx, DATETIME_MS);
    }, "expecting an optional number");
    OPT_DATE_OR_DATETIME_MS = OR(OPT_DATE, OPT_DATETIME_MS);
    colorMessage = "A color string can be in one of the following formats to be valid: #rgb, #rrggbb, rgb(r, g, b), rgba(r, g, b, a) or a CSS color name such as 'white', 'orange', 'cyan', etc";
    COLOR_STRING = predicateWithMessage(function(v) {
      if (typeof v !== "string") {
        return false;
      }
      return Color.validColorString(v);
    }, "expecting a color String. " + colorMessage);
    OPT_COLOR_STRING = predicateWithMessage(function(v, ctx) {
      return OPTIONAL(v, ctx, COLOR_STRING);
    }, "expecting an optional color String. " + colorMessage);
    COLOR_STRING_ARRAY = predicateWithMessage(ARRAY(void 0, COLOR_STRING), "expecting an Array of color strings. " + colorMessage);
    OPT_COLOR_STRING_ARRAY = predicateWithMessage(function(v, ctx) {
      return OPTIONAL(v, ctx, COLOR_STRING_ARRAY);
    }, "expecting an optional Array of color strings. " + colorMessage);
    NUMBER_ARRAY = predicateWithMessage(ARRAY(void 0, NUMBER()), "expecting an Array of numbers");
    OPT_NUMBER_ARRAY = predicateWithMessage(function(v, ctx) {
      return OPTIONAL(v, ctx, NUMBER_ARRAY);
    }, "expecting an optional Array of numbers");
    STRING_ARRAY = predicateWithMessage(ARRAY(void 0, STRING), "expecting an Array of strings");
    OPT_STRING_ARRAY = predicateWithMessage(function(v, ctx) {
      return OPTIONAL(v, ctx, STRING_ARRAY);
    }, "expecting an optional Array of strings");
    BOOLEAN_ARRAY = predicateWithMessage(ARRAY(void 0, BOOLEAN), "expecting an Array of boolean values");
    OPT_BOOLEAN_ARRAY = predicateWithMessage(function(v, ctx) {
      return OPTIONAL(v, ctx, BOOLEAN_ARRAY);
    }, "expecting an optional Array of boolean values");
    FONT_WEIGHTS = [
      "normal",
      "bold",
      "bolder",
      "lighter",
      "100",
      "200",
      "300",
      "400",
      "500",
      "600",
      "700",
      "800",
      "900"
    ];
    FONT_STYLE = predicateWithMessage(function(v) {
      return v === "normal" || v === "italic" || v === "oblique";
    }, "expecting a font style keyword such as 'normal', 'italic' or 'oblique'");
    OPT_FONT_STYLE = predicateWithMessage(function(v, ctx) {
      return OPTIONAL(v, ctx, FONT_STYLE);
    }, "expecting an optional font style keyword such as 'normal', 'italic' or 'oblique'");
    FONT_WEIGHT = predicateWithMessage(function(v) {
      return FONT_WEIGHTS.includes(v);
    }, "expecting a font weight keyword such as 'normal', 'bold' or 'bolder' or a numeric value such as 100, 300 or 600");
    OPT_FONT_WEIGHT = predicateWithMessage(function(v, ctx) {
      return OPTIONAL(v, ctx, FONT_WEIGHT);
    }, "expecting an optional font weight keyword such as 'normal', 'bold' or 'bolder' or a numeric value such as 100, 300 or 600");
    LINE_DASH = predicateWithMessage(ARRAY(void 0, NUMBER(0)), "expecting an Array of numbers specifying the length in pixels of alternating dashes and gaps, for example, [6, 3] means dashes with a length of 6 pixels with gaps between of 3 pixels.");
    OPT_LINE_DASH = predicateWithMessage(function(v, ctx) {
      return OPTIONAL(v, ctx, LINE_DASH);
    }, "expecting an optional Array of numbers specifying the length in pixels of alternating dashes and gaps, for example, [6, 3] means dashes with a length of 6 pixels with gaps between of 3 pixels.");
    LINE_CAPS = ["butt", "round", "square"];
    LINE_CAP = predicateWithMessage(function(v) {
      return LINE_CAPS.includes(v);
    }, "expecting a line cap keyword such as 'butt', 'round' or 'square'");
    OPT_LINE_CAP = predicateWithMessage(function(v, ctx) {
      return OPTIONAL(v, ctx, LINE_CAP);
    }, "expecting an optional line cap keyword such as 'butt', 'round' or 'square'");
    LINE_JOINS = ["round", "bevel", "miter"];
    LINE_JOIN = predicateWithMessage(function(v) {
      return LINE_JOINS.includes(v);
    }, "expecting a line join keyword such as 'round', 'bevel' or 'miter'");
    OPT_LINE_JOIN = predicateWithMessage(function(v, ctx) {
      return OPTIONAL(v, ctx, LINE_JOIN);
    }, "expecting an optional line join keyword such as 'round', 'bevel' or 'miter'");
    POSITIONS = ["top", "right", "bottom", "left"];
    POSITION = predicateWithMessage(function(v) {
      return POSITIONS.includes(v);
    }, "expecting a position keyword such as 'top', 'right', 'bottom' or 'left");
    INTERACTION_RANGES = ["exact", "nearest"];
    INTERACTION_RANGE = predicateWithMessage(function(v) {
      return typeof v === "number" && Number.isFinite(v) || INTERACTION_RANGES.includes(v);
    }, "expecting an interaction range of 'exact', 'nearest' or a number");
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/layers.js
var Layers;
var init_layers = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/layers.js"() {
    (function(Layers2) {
      Layers2[Layers2["SERIES_BACKGROUND_ZINDEX"] = -10] = "SERIES_BACKGROUND_ZINDEX";
      Layers2[Layers2["AXIS_GRID_ZINDEX"] = 0] = "AXIS_GRID_ZINDEX";
      Layers2[Layers2["AXIS_ZINDEX"] = 20] = "AXIS_ZINDEX";
      Layers2[Layers2["SERIES_CROSSLINE_RANGE_ZINDEX"] = 30] = "SERIES_CROSSLINE_RANGE_ZINDEX";
      Layers2[Layers2["SERIES_LAYER_ZINDEX"] = 500] = "SERIES_LAYER_ZINDEX";
      Layers2[Layers2["SERIES_CROSSHAIR_ZINDEX"] = 1e3] = "SERIES_CROSSHAIR_ZINDEX";
      Layers2[Layers2["SERIES_LABEL_ZINDEX"] = 1500] = "SERIES_LABEL_ZINDEX";
      Layers2[Layers2["SERIES_CROSSLINE_LINE_ZINDEX"] = 2500] = "SERIES_CROSSLINE_LINE_ZINDEX";
      Layers2[Layers2["LEGEND_ZINDEX"] = 3e3] = "LEGEND_ZINDEX";
    })(Layers || (Layers = {}));
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/chartAxisDirection.js
var ChartAxisDirection;
var init_chartAxisDirection = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/chartAxisDirection.js"() {
    (function(ChartAxisDirection2) {
      ChartAxisDirection2["X"] = "x";
      ChartAxisDirection2["Y"] = "y";
    })(ChartAxisDirection || (ChartAxisDirection = {}));
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/tooltip/tooltip.js
function toTooltipHtml(input, defaults) {
  if (typeof input === "string") {
    return input;
  }
  defaults = defaults || {};
  var _a5 = input.content, content = _a5 === void 0 ? defaults.content || "" : _a5, _b2 = input.title, title = _b2 === void 0 ? defaults.title || void 0 : _b2, _c2 = input.color, color = _c2 === void 0 ? defaults.color || "white" : _c2, _d2 = input.backgroundColor, backgroundColor = _d2 === void 0 ? defaults.backgroundColor || "#888" : _d2;
  var titleHtml = title ? '<div class="' + DEFAULT_TOOLTIP_CLASS + '-title"\n        style="color: ' + color + "; background-color: " + backgroundColor + '">' + title + "</div>" : "";
  return titleHtml + '<div class="' + DEFAULT_TOOLTIP_CLASS + '-content">' + content + "</div>";
}
var __decorate3, __values5, DEFAULT_TOOLTIP_CLASS, defaultTooltipCss, POSITION_TYPES, POSITION_TYPE, TooltipPosition, Tooltip;
var init_tooltip = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/tooltip/tooltip.js"() {
    init_bbox();
    init_deprecation();
    init_validation();
    __decorate3 = function(decorators, target2, key2, desc) {
      var c = arguments.length, r = c < 3 ? target2 : desc === null ? desc = Object.getOwnPropertyDescriptor(target2, key2) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target2, key2, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target2, key2, r) : d(target2, key2)) || r;
      return c > 3 && r && Object.defineProperty(target2, key2, r), r;
    };
    __values5 = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    DEFAULT_TOOLTIP_CLASS = "ag-chart-tooltip";
    defaultTooltipCss = "\n." + DEFAULT_TOOLTIP_CLASS + " {\n    transition: transform 0.1s ease;\n    display: table;\n    position: fixed;\n    left: 0px;\n    top: 0px;\n    white-space: nowrap;\n    z-index: 99999;\n    font: 12px Verdana, sans-serif;\n    color: black;\n    background: rgb(244, 244, 244);\n    border-radius: 5px;\n    box-shadow: 0 0 1px rgba(3, 3, 3, 0.7), 0.5vh 0.5vh 1vh rgba(3, 3, 3, 0.25);\n}\n\n." + DEFAULT_TOOLTIP_CLASS + "-no-interaction {\n    pointer-events: none;\n    user-select: none;\n}\n\n." + DEFAULT_TOOLTIP_CLASS + "-no-animation {\n    transition: none !important;\n}\n\n." + DEFAULT_TOOLTIP_CLASS + "-hidden {\n    visibility: hidden;\n}\n\n." + DEFAULT_TOOLTIP_CLASS + "-title {\n    font-weight: bold;\n    padding: 7px;\n    border-top-left-radius: 5px;\n    border-top-right-radius: 5px;\n    color: white;\n    background-color: #888888;\n    border-top-left-radius: 5px;\n    border-top-right-radius: 5px;\n}\n\n." + DEFAULT_TOOLTIP_CLASS + "-content {\n    padding: 7px;\n    line-height: 1.7em;\n    border-bottom-left-radius: 5px;\n    border-bottom-right-radius: 5px;\n    overflow: hidden;\n}\n\n." + DEFAULT_TOOLTIP_CLASS + "-content:empty {\n    padding: 0;\n    height: 7px;\n}\n\n." + DEFAULT_TOOLTIP_CLASS + '-arrow::before {\n    content: "";\n\n    position: absolute;\n    top: 100%;\n    left: 50%;\n    transform: translateX(-50%);\n\n    border: 6px solid #989898;\n\n    border-left-color: transparent;\n    border-right-color: transparent;\n    border-top-color: #989898;\n    border-bottom-color: transparent;\n\n    width: 0;\n    height: 0;\n\n    margin: 0 auto;\n}\n\n.' + DEFAULT_TOOLTIP_CLASS + '-arrow::after {\n    content: "";\n\n    position: absolute;\n    top: 100%;\n    left: 50%;\n    transform: translateX(-50%);\n\n    border: 5px solid black;\n\n    border-left-color: transparent;\n    border-right-color: transparent;\n    border-top-color: rgb(244, 244, 244);\n    border-bottom-color: transparent;\n\n    width: 0;\n    height: 0;\n\n    margin: 0 auto;\n}\n\n.ag-chart-wrapper {\n    box-sizing: border-box;\n    overflow: hidden;\n}\n';
    POSITION_TYPES = ["pointer", "node"];
    POSITION_TYPE = predicateWithMessage(function(v) {
      return POSITION_TYPES.includes(v);
    }, "expecting a position type keyword such as 'pointer' or 'node'");
    TooltipPosition = /** @class */
    function() {
      function TooltipPosition2() {
        this.type = "pointer";
        this.xOffset = 0;
        this.yOffset = 0;
      }
      __decorate3([
        Validate(POSITION_TYPE)
      ], TooltipPosition2.prototype, "type", void 0);
      __decorate3([
        Validate(NUMBER())
      ], TooltipPosition2.prototype, "xOffset", void 0);
      __decorate3([
        Validate(NUMBER())
      ], TooltipPosition2.prototype, "yOffset", void 0);
      return TooltipPosition2;
    }();
    Tooltip = /** @class */
    function() {
      function Tooltip2(canvasElement, document2, container) {
        var _this = this;
        this.enableInteraction = false;
        this.enabled = true;
        this.class = void 0;
        this.lastClass = void 0;
        this.delay = 0;
        this.range = "nearest";
        this.position = new TooltipPosition();
        this.showTimeout = 0;
        this.showArrow = true;
        this.tooltipRoot = container;
        var element2 = document2.createElement("div");
        this.element = this.tooltipRoot.appendChild(element2);
        this.element.classList.add(DEFAULT_TOOLTIP_CLASS);
        this.canvasElement = canvasElement;
        if (window.IntersectionObserver) {
          var observer = new IntersectionObserver(function(entries) {
            var e_1, _a5;
            try {
              for (var entries_1 = __values5(entries), entries_1_1 = entries_1.next(); !entries_1_1.done; entries_1_1 = entries_1.next()) {
                var entry = entries_1_1.value;
                if (entry.target === _this.canvasElement && entry.intersectionRatio === 0) {
                  _this.toggle(false);
                }
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (entries_1_1 && !entries_1_1.done && (_a5 = entries_1.return))
                  _a5.call(entries_1);
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
          }, { root: this.tooltipRoot });
          observer.observe(this.canvasElement);
          this.observer = observer;
        }
        if (Tooltip2.tooltipDocuments.indexOf(document2) < 0) {
          var styleElement = document2.createElement("style");
          styleElement.innerHTML = defaultTooltipCss;
          document2.head.insertBefore(styleElement, document2.head.querySelector("style"));
          Tooltip2.tooltipDocuments.push(document2);
        }
      }
      Tooltip2.prototype.destroy = function() {
        var parentNode = this.element.parentNode;
        if (parentNode) {
          parentNode.removeChild(this.element);
        }
        if (this.observer) {
          this.observer.unobserve(this.canvasElement);
        }
      };
      Tooltip2.prototype.isVisible = function() {
        var element2 = this.element;
        return !element2.classList.contains(DEFAULT_TOOLTIP_CLASS + "-hidden");
      };
      Tooltip2.prototype.updateClass = function(visible, showArrow) {
        var _a5 = this, element2 = _a5.element, newClass = _a5.class, lastClass = _a5.lastClass, enableInteraction = _a5.enableInteraction;
        var wasVisible = this.isVisible();
        var toggleClass = function(name, include) {
          var className = DEFAULT_TOOLTIP_CLASS + "-" + name;
          if (include) {
            element2.classList.add(className);
          } else {
            element2.classList.remove(className);
          }
        };
        toggleClass("no-animation", !wasVisible && !!visible);
        toggleClass("no-interaction", !enableInteraction);
        toggleClass("hidden", !visible);
        toggleClass("arrow", !!showArrow);
        if (newClass !== lastClass) {
          if (lastClass) {
            element2.classList.remove(lastClass);
          }
          if (newClass) {
            element2.classList.add(newClass);
          }
          this.lastClass = newClass;
        }
      };
      Tooltip2.prototype.show = function(meta, html, instantly) {
        var _this = this;
        var _a5, _b2, _c2, _d2, _e;
        if (instantly === void 0) {
          instantly = false;
        }
        var _f = this, element2 = _f.element, canvasElement = _f.canvasElement;
        if (html !== void 0) {
          element2.innerHTML = html;
        } else if (!element2.innerHTML) {
          return;
        }
        var limit = function(low, actual, high) {
          return Math.max(Math.min(actual, high), low);
        };
        var xOffset = (_b2 = (_a5 = meta.position) === null || _a5 === void 0 ? void 0 : _a5.xOffset) !== null && _b2 !== void 0 ? _b2 : 0;
        var yOffset = (_d2 = (_c2 = meta.position) === null || _c2 === void 0 ? void 0 : _c2.yOffset) !== null && _d2 !== void 0 ? _d2 : 0;
        var canvasRect = canvasElement.getBoundingClientRect();
        var naiveLeft = canvasRect.left + meta.offsetX - element2.clientWidth / 2 + xOffset;
        var naiveTop = canvasRect.top + meta.offsetY - element2.clientHeight - 8 + yOffset;
        var windowBounds = this.getWindowBoundingBox();
        var maxLeft = windowBounds.x + windowBounds.width - element2.clientWidth - 1;
        var maxTop = windowBounds.y + windowBounds.height - element2.clientHeight;
        var left = limit(windowBounds.x, naiveLeft, maxLeft);
        var top = limit(windowBounds.y, naiveTop, maxTop);
        var offsetApplied = xOffset !== 0 || yOffset !== 0;
        var constrained = left !== naiveLeft || top !== naiveTop;
        this.showArrow = !constrained && !offsetApplied;
        element2.style.transform = "translate(" + Math.round(left) + "px, " + Math.round(top) + "px)";
        this.enableInteraction = (_e = meta.enableInteraction) !== null && _e !== void 0 ? _e : false;
        if (this.delay > 0 && !instantly) {
          this.toggle(false);
          this.showTimeout = window.setTimeout(function() {
            _this.toggle(true);
          }, this.delay);
          return;
        }
        this.toggle(true);
      };
      Tooltip2.prototype.getWindowBoundingBox = function() {
        return new BBox(0, 0, window.innerWidth, window.innerHeight);
      };
      Tooltip2.prototype.toggle = function(visible) {
        if (!visible) {
          window.clearTimeout(this.showTimeout);
        }
        this.updateClass(visible, this.showArrow);
      };
      Tooltip2.prototype.pointerLeftOntoTooltip = function(event) {
        var _a5;
        if (!this.enableInteraction)
          return false;
        var classList = (_a5 = event.sourceEvent.relatedTarget) === null || _a5 === void 0 ? void 0 : _a5.classList;
        var classes = ["", "-title", "-content"];
        var classListContains = Boolean(classes.filter(function(c) {
          return classList === null || classList === void 0 ? void 0 : classList.contains("" + DEFAULT_TOOLTIP_CLASS + c);
        }));
        return classList !== void 0 && classListContains;
      };
      Tooltip2.tooltipDocuments = [];
      __decorate3([
        Validate(BOOLEAN)
      ], Tooltip2.prototype, "enabled", void 0);
      __decorate3([
        Validate(OPT_STRING)
      ], Tooltip2.prototype, "class", void 0);
      __decorate3([
        Validate(NUMBER(0))
      ], Tooltip2.prototype, "delay", void 0);
      __decorate3([
        DeprecatedAndRenamedTo("range", function(value) {
          return value ? "nearest" : "exact";
        })
      ], Tooltip2.prototype, "tracking", void 0);
      __decorate3([
        Validate(INTERACTION_RANGE)
      ], Tooltip2.prototype, "range", void 0);
      return Tooltip2;
    }();
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/series/series.js
function keyProperty(propName, continuous, opts2) {
  if (opts2 === void 0) {
    opts2 = {};
  }
  var result = __assign4(__assign4({}, opts2), { property: propName, type: "key", valueType: continuous ? "range" : "category", validation: function(v) {
    return checkDatum(v, continuous) != null;
  } });
  return result;
}
function valueProperty(propName, continuous, opts2) {
  if (opts2 === void 0) {
    opts2 = {};
  }
  var result = __assign4(__assign4({}, opts2), { property: propName, type: "value", valueType: continuous ? "range" : "category", validation: function(v) {
    return checkDatum(v, continuous) != null;
  } });
  return result;
}
function sumProperties(props) {
  var result = {
    properties: props,
    type: "sum"
  };
  return result;
}
var __extends4, __assign4, __decorate4, __values6, __read8, __spread5, SeriesNodePickMode, warnDeprecated, warnSeriesDeprecated, SeriesNodeBaseClickEvent, SeriesNodeClickEvent, SeriesNodeDoubleClickEvent, SeriesItemHighlightStyle, SeriesHighlightStyle, TextHighlightStyle, HighlightStyle, SeriesTooltip, SeriesTooltipInteraction, Series;
var init_series = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/series/series.js"() {
    init_group();
    init_observable();
    init_id();
    init_value();
    init_deprecation();
    init_validation();
    init_layers();
    init_chartAxisDirection();
    init_tooltip();
    __extends4 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __assign4 = function() {
      __assign4 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign4.apply(this, arguments);
    };
    __decorate4 = function(decorators, target2, key2, desc) {
      var c = arguments.length, r = c < 3 ? target2 : desc === null ? desc = Object.getOwnPropertyDescriptor(target2, key2) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target2, key2, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target2, key2, r) : d(target2, key2)) || r;
      return c > 3 && r && Object.defineProperty(target2, key2, r), r;
    };
    __values6 = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read8 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread5 = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read8(arguments[i]));
      return ar;
    };
    (function(SeriesNodePickMode2) {
      SeriesNodePickMode2[SeriesNodePickMode2["EXACT_SHAPE_MATCH"] = 0] = "EXACT_SHAPE_MATCH";
      SeriesNodePickMode2[SeriesNodePickMode2["NEAREST_BY_MAIN_AXIS_FIRST"] = 1] = "NEAREST_BY_MAIN_AXIS_FIRST";
      SeriesNodePickMode2[SeriesNodePickMode2["NEAREST_BY_MAIN_CATEGORY_AXIS_FIRST"] = 2] = "NEAREST_BY_MAIN_CATEGORY_AXIS_FIRST";
      SeriesNodePickMode2[SeriesNodePickMode2["NEAREST_NODE"] = 3] = "NEAREST_NODE";
    })(SeriesNodePickMode || (SeriesNodePickMode = {}));
    warnDeprecated = createDeprecationWarning();
    warnSeriesDeprecated = function() {
      return warnDeprecated("series", "Use seriesId to get the series ID");
    };
    SeriesNodeBaseClickEvent = /** @class */
    function() {
      function SeriesNodeBaseClickEvent2(nativeEvent, datum, series) {
        this.type = "nodeClick";
        this.event = nativeEvent;
        this.datum = datum.datum;
        this.seriesId = series.id;
        this._series = series;
      }
      Object.defineProperty(SeriesNodeBaseClickEvent2.prototype, "series", {
        /** @deprecated */
        get: function() {
          warnSeriesDeprecated();
          return this._series;
        },
        enumerable: false,
        configurable: true
      });
      return SeriesNodeBaseClickEvent2;
    }();
    SeriesNodeClickEvent = /** @class */
    function(_super) {
      __extends4(SeriesNodeClickEvent2, _super);
      function SeriesNodeClickEvent2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      return SeriesNodeClickEvent2;
    }(SeriesNodeBaseClickEvent);
    SeriesNodeDoubleClickEvent = /** @class */
    function(_super) {
      __extends4(SeriesNodeDoubleClickEvent2, _super);
      function SeriesNodeDoubleClickEvent2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "nodeDoubleClick";
        return _this;
      }
      return SeriesNodeDoubleClickEvent2;
    }(SeriesNodeBaseClickEvent);
    SeriesItemHighlightStyle = /** @class */
    function() {
      function SeriesItemHighlightStyle2() {
        this.fill = "yellow";
        this.fillOpacity = void 0;
        this.stroke = void 0;
        this.strokeWidth = void 0;
      }
      __decorate4([
        Validate(OPT_COLOR_STRING)
      ], SeriesItemHighlightStyle2.prototype, "fill", void 0);
      __decorate4([
        Validate(OPT_NUMBER(0, 1))
      ], SeriesItemHighlightStyle2.prototype, "fillOpacity", void 0);
      __decorate4([
        Validate(OPT_COLOR_STRING)
      ], SeriesItemHighlightStyle2.prototype, "stroke", void 0);
      __decorate4([
        Validate(OPT_NUMBER(0))
      ], SeriesItemHighlightStyle2.prototype, "strokeWidth", void 0);
      return SeriesItemHighlightStyle2;
    }();
    SeriesHighlightStyle = /** @class */
    function() {
      function SeriesHighlightStyle2() {
        this.strokeWidth = void 0;
        this.dimOpacity = void 0;
        this.enabled = void 0;
      }
      __decorate4([
        Validate(OPT_NUMBER(0))
      ], SeriesHighlightStyle2.prototype, "strokeWidth", void 0);
      __decorate4([
        Validate(OPT_NUMBER(0, 1))
      ], SeriesHighlightStyle2.prototype, "dimOpacity", void 0);
      __decorate4([
        Validate(OPT_BOOLEAN)
      ], SeriesHighlightStyle2.prototype, "enabled", void 0);
      return SeriesHighlightStyle2;
    }();
    TextHighlightStyle = /** @class */
    function() {
      function TextHighlightStyle2() {
        this.color = "black";
      }
      __decorate4([
        Validate(OPT_COLOR_STRING)
      ], TextHighlightStyle2.prototype, "color", void 0);
      return TextHighlightStyle2;
    }();
    HighlightStyle = /** @class */
    function() {
      function HighlightStyle2() {
        this.item = new SeriesItemHighlightStyle();
        this.series = new SeriesHighlightStyle();
        this.text = new TextHighlightStyle();
      }
      return HighlightStyle2;
    }();
    SeriesTooltip = /** @class */
    function() {
      function SeriesTooltip2() {
        this.enabled = true;
        this.interaction = new SeriesTooltipInteraction();
        this.position = new TooltipPosition();
      }
      __decorate4([
        Validate(BOOLEAN)
      ], SeriesTooltip2.prototype, "enabled", void 0);
      return SeriesTooltip2;
    }();
    SeriesTooltipInteraction = /** @class */
    function() {
      function SeriesTooltipInteraction2() {
        this.enabled = false;
      }
      __decorate4([
        Validate(BOOLEAN)
      ], SeriesTooltipInteraction2.prototype, "enabled", void 0);
      return SeriesTooltipInteraction2;
    }();
    Series = /** @class */
    function(_super) {
      __extends4(Series2, _super);
      function Series2(_a5) {
        var _b2 = _a5 === void 0 ? {} : _a5, _c2 = _b2.useSeriesGroupLayer, useSeriesGroupLayer = _c2 === void 0 ? true : _c2, _d2 = _b2.useLabelLayer, useLabelLayer = _d2 === void 0 ? false : _d2, _e = _b2.pickModes, pickModes = _e === void 0 ? [SeriesNodePickMode.NEAREST_BY_MAIN_AXIS_FIRST] : _e, _f = _b2.directionKeys, directionKeys = _f === void 0 ? {} : _f;
        var _this = _super.call(this) || this;
        _this.id = createId(_this);
        _this.rootGroup = new Group({ name: "seriesRoot" });
        _this.directions = [ChartAxisDirection.X, ChartAxisDirection.Y];
        _this.nodeDataRefresh = true;
        _this._data = void 0;
        _this._visible = true;
        _this.showInLegend = true;
        _this.cursor = "default";
        _this.nodeClickRange = "exact";
        _this._declarationOrder = -1;
        _this.highlightStyle = new HighlightStyle();
        var rootGroup = _this.rootGroup;
        _this.directionKeys = directionKeys;
        _this.contentGroup = rootGroup.appendChild(new Group({
          name: _this.id + "-content",
          layer: useSeriesGroupLayer,
          zIndex: Layers.SERIES_LAYER_ZINDEX,
          zIndexSubOrder: [function() {
            return _this._declarationOrder;
          }, 0]
        }));
        _this.highlightGroup = rootGroup.appendChild(new Group({
          name: _this.id + "-highlight",
          layer: true,
          zIndex: Layers.SERIES_LAYER_ZINDEX,
          zIndexSubOrder: [function() {
            return _this._declarationOrder;
          }, 15e3]
        }));
        _this.highlightNode = _this.highlightGroup.appendChild(new Group({ name: "highlightNode" }));
        _this.highlightLabel = _this.highlightGroup.appendChild(new Group({ name: "highlightLabel" }));
        _this.highlightNode.zIndex = 0;
        _this.highlightLabel.zIndex = 10;
        _this.pickModes = pickModes;
        if (useLabelLayer) {
          _this.labelGroup = rootGroup.appendChild(new Group({
            name: _this.id + "-series-labels",
            layer: true,
            zIndex: Layers.SERIES_LABEL_ZINDEX
          }));
        }
        return _this;
      }
      Object.defineProperty(Series2.prototype, "type", {
        get: function() {
          return this.constructor.type || "";
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Series2.prototype, "data", {
        get: function() {
          return this._data;
        },
        set: function(input) {
          this._data = input;
          this.nodeDataRefresh = true;
        },
        enumerable: false,
        configurable: true
      });
      Series2.prototype.hasData = function() {
        var data = this.data;
        return data && (!Array.isArray(data) || data.length > 0);
      };
      Object.defineProperty(Series2.prototype, "visible", {
        get: function() {
          return this._visible;
        },
        set: function(value) {
          this._visible = value;
          this.visibleChanged();
        },
        enumerable: false,
        configurable: true
      });
      Series2.prototype.getBandScalePadding = function() {
        return { inner: 1, outer: 0 };
      };
      Series2.prototype.destroy = function() {
      };
      Object.defineProperty(Series2.prototype, "grouped", {
        set: function(g) {
          if (g === true) {
            throw new Error("AG Charts - grouped: true is unsupported for series of type: " + this.type);
          }
        },
        enumerable: false,
        configurable: true
      });
      Series2.prototype.getKeys = function(direction) {
        var _this = this;
        var directionKeys = this.directionKeys;
        var resolvedDirection = this.resolveKeyDirection(direction);
        var keys = directionKeys && directionKeys[resolvedDirection];
        var values = [];
        var flatten = function() {
          var e_1, _a5;
          var array = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            array[_i] = arguments[_i];
          }
          try {
            for (var array_1 = __values6(array), array_1_1 = array_1.next(); !array_1_1.done; array_1_1 = array_1.next()) {
              var value = array_1_1.value;
              addValue(value);
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (array_1_1 && !array_1_1.done && (_a5 = array_1.return))
                _a5.call(array_1);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
        };
        var addValue = function(value) {
          if (Array.isArray(value)) {
            flatten.apply(void 0, __spread5(value));
          } else {
            values.push(value);
          }
        };
        if (!keys)
          return values;
        keys.forEach(function(key2) {
          var value = _this[key2];
          if (!value)
            return;
          addValue(value);
        });
        return values;
      };
      Series2.prototype.resolveKeyDirection = function(direction) {
        return direction;
      };
      Series2.prototype.markNodeDataDirty = function() {
        this.nodeDataRefresh = true;
      };
      Series2.prototype.visibleChanged = function() {
      };
      Series2.prototype.getOpacity = function(datum) {
        var _a5 = this.highlightStyle.series, _b2 = _a5.dimOpacity, dimOpacity = _b2 === void 0 ? 1 : _b2, _c2 = _a5.enabled, enabled = _c2 === void 0 ? true : _c2;
        var defaultOpacity = 1;
        if (enabled === false || dimOpacity === defaultOpacity) {
          return defaultOpacity;
        }
        switch (this.isItemIdHighlighted(datum)) {
          case "no-highlight":
          case "highlighted":
            return defaultOpacity;
          case "peer-highlighted":
          case "other-highlighted":
            return dimOpacity;
        }
      };
      Series2.prototype.getStrokeWidth = function(defaultStrokeWidth, datum) {
        var _a5 = this.highlightStyle.series, strokeWidth = _a5.strokeWidth, _b2 = _a5.enabled, enabled = _b2 === void 0 ? true : _b2;
        if (enabled === false || strokeWidth === void 0) {
          return defaultStrokeWidth;
        }
        switch (this.isItemIdHighlighted(datum)) {
          case "highlighted":
            return strokeWidth;
          case "no-highlight":
          case "other-highlighted":
          case "peer-highlighted":
            return defaultStrokeWidth;
        }
      };
      Series2.prototype.isItemIdHighlighted = function(datum) {
        var _a5;
        var highlightedDatum = (_a5 = this.highlightManager) === null || _a5 === void 0 ? void 0 : _a5.getActiveHighlight();
        var _b2 = highlightedDatum !== null && highlightedDatum !== void 0 ? highlightedDatum : {}, series = _b2.series, itemId = _b2.itemId;
        var highlighting = series != null;
        if (!highlighting) {
          return "no-highlight";
        }
        if (series !== this) {
          return "other-highlighted";
        }
        if (itemId === void 0) {
          return "highlighted";
        }
        if (datum && highlightedDatum !== datum && itemId !== datum.itemId) {
          return "peer-highlighted";
        }
        return "highlighted";
      };
      Series2.prototype.pickNode = function(point, limitPickModes) {
        var e_2, _a5;
        var _b2 = this, pickModes = _b2.pickModes, visible = _b2.visible, rootGroup = _b2.rootGroup;
        if (!visible || !rootGroup.visible) {
          return;
        }
        try {
          for (var pickModes_1 = __values6(pickModes), pickModes_1_1 = pickModes_1.next(); !pickModes_1_1.done; pickModes_1_1 = pickModes_1.next()) {
            var pickMode = pickModes_1_1.value;
            if (limitPickModes && !limitPickModes.includes(pickMode)) {
              continue;
            }
            var match = void 0;
            switch (pickMode) {
              case SeriesNodePickMode.EXACT_SHAPE_MATCH:
                match = this.pickNodeExactShape(point);
                break;
              case SeriesNodePickMode.NEAREST_BY_MAIN_AXIS_FIRST:
              case SeriesNodePickMode.NEAREST_BY_MAIN_CATEGORY_AXIS_FIRST:
                match = this.pickNodeMainAxisFirst(point, pickMode === SeriesNodePickMode.NEAREST_BY_MAIN_CATEGORY_AXIS_FIRST);
                break;
              case SeriesNodePickMode.NEAREST_NODE:
                match = this.pickNodeClosestDatum(point);
                break;
            }
            if (match) {
              return { pickMode, match: match.datum, distance: match.distance };
            }
          }
        } catch (e_2_1) {
          e_2 = { error: e_2_1 };
        } finally {
          try {
            if (pickModes_1_1 && !pickModes_1_1.done && (_a5 = pickModes_1.return))
              _a5.call(pickModes_1);
          } finally {
            if (e_2)
              throw e_2.error;
          }
        }
      };
      Series2.prototype.pickNodeExactShape = function(point) {
        var match = this.contentGroup.pickNode(point.x, point.y);
        if (match) {
          return {
            datum: match.datum,
            distance: 0
          };
        }
      };
      Series2.prototype.pickNodeClosestDatum = function(_point) {
        throw new Error("AG Charts - Series.pickNodeClosestDatum() not implemented");
      };
      Series2.prototype.pickNodeMainAxisFirst = function(_point, _requireCategoryAxis) {
        throw new Error("AG Charts - Series.pickNodeMainAxisFirst() not implemented");
      };
      Series2.prototype.fireNodeClickEvent = function(event, _datum) {
        var eventObject = this.getNodeClickEvent(event, _datum);
        this.fireEvent(eventObject);
      };
      Series2.prototype.fireNodeDoubleClickEvent = function(event, _datum) {
        var eventObject = this.getNodeDoubleClickEvent(event, _datum);
        this.fireEvent(eventObject);
      };
      Series2.prototype.getNodeClickEvent = function(event, datum) {
        return new SeriesNodeClickEvent(event, datum, this);
      };
      Series2.prototype.getNodeDoubleClickEvent = function(event, datum) {
        return new SeriesNodeDoubleClickEvent(event, datum, this);
      };
      Series2.prototype.toggleSeriesItem = function(_itemId, enabled) {
        this.visible = enabled;
        this.nodeDataRefresh = true;
      };
      Series2.prototype.toggleOtherSeriesItems = function(_seriesToggled, _datumToggled, _enabled, _suggestedEnabled) {
        return;
      };
      Series2.prototype.isEnabled = function() {
        return this.visible;
      };
      Series2.prototype.fixNumericExtent = function(extent2, axis) {
        var _a5;
        if (extent2 === void 0) {
          return [];
        }
        var _b2 = __read8(extent2, 2), min = _b2[0], max = _b2[1];
        min = +min;
        max = +max;
        if (min === 0 && max === 0) {
          return [0, 1];
        }
        if (min === Infinity && max === -Infinity) {
          return [];
        }
        if (min === Infinity) {
          min = 0;
        }
        if (max === -Infinity) {
          max = 0;
        }
        if (min === max) {
          var padding = (_a5 = axis === null || axis === void 0 ? void 0 : axis.calculatePadding(min, max)) !== null && _a5 !== void 0 ? _a5 : 1;
          min -= padding;
          max += padding;
        }
        if (!(isNumber(min) && isNumber(max))) {
          return [];
        }
        return [min, max];
      };
      Series2.highlightedZIndex = 1e12;
      __decorate4([
        Validate(STRING)
      ], Series2.prototype, "id", void 0);
      __decorate4([
        Validate(BOOLEAN)
      ], Series2.prototype, "_visible", void 0);
      __decorate4([
        Validate(BOOLEAN)
      ], Series2.prototype, "showInLegend", void 0);
      __decorate4([
        Validate(STRING)
      ], Series2.prototype, "cursor", void 0);
      __decorate4([
        Validate(INTERACTION_RANGE)
      ], Series2.prototype, "nodeClickRange", void 0);
      return Series2;
    }(Observable);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/util/padding.js
var __decorate5, Padding;
var init_padding = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/util/padding.js"() {
    init_validation();
    __decorate5 = function(decorators, target2, key2, desc) {
      var c = arguments.length, r = c < 3 ? target2 : desc === null ? desc = Object.getOwnPropertyDescriptor(target2, key2) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target2, key2, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target2, key2, r) : d(target2, key2)) || r;
      return c > 3 && r && Object.defineProperty(target2, key2, r), r;
    };
    Padding = /** @class */
    function() {
      function Padding2(top, right, bottom, left) {
        if (top === void 0) {
          top = 0;
        }
        if (right === void 0) {
          right = top;
        }
        if (bottom === void 0) {
          bottom = top;
        }
        if (left === void 0) {
          left = right;
        }
        this.top = top;
        this.right = right;
        this.bottom = bottom;
        this.left = left;
      }
      Padding2.prototype.clear = function() {
        this.top = this.right = this.bottom = this.left = 0;
      };
      __decorate5([
        Validate(NUMBER(0))
      ], Padding2.prototype, "top", void 0);
      __decorate5([
        Validate(NUMBER(0))
      ], Padding2.prototype, "right", void 0);
      __decorate5([
        Validate(NUMBER(0))
      ], Padding2.prototype, "bottom", void 0);
      __decorate5([
        Validate(NUMBER(0))
      ], Padding2.prototype, "left", void 0);
      return Padding2;
    }();
  }
});

// node_modules/ag-charts-community/dist/esm/es5/scene/selection.js
var Selection;
var init_selection = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/scene/selection.js"() {
    init_node();
    Selection = /** @class */
    function() {
      function Selection2(parent, classOrFactory) {
        this._nodes = [];
        this._data = [];
        this._parent = parent;
        this._factory = Object.prototype.isPrototypeOf.call(Node, classOrFactory) ? function() {
          return new classOrFactory();
        } : classOrFactory;
      }
      Selection2.select = function(parent, classOrFactory) {
        return new Selection2(parent, classOrFactory);
      };
      Selection2.prototype.each = function(iterate) {
        this._nodes.forEach(function(node, i) {
          return iterate(node, node.datum, i);
        });
        return this;
      };
      Selection2.prototype.update = function(data, init) {
        var _this = this;
        var old = this._data;
        var parent = this._parent;
        var factory = this._factory;
        if (data.length > old.length) {
          data.slice(old.length).forEach(function(datum) {
            var node = factory(datum);
            node.datum = datum;
            init && init(node);
            parent.appendChild(node);
            _this._nodes.push(node);
          });
        } else if (data.length < old.length) {
          this._nodes.splice(data.length).forEach(function(node) {
            parent.removeChild(node);
          });
        }
        this._data = data.slice(0);
        for (var i = 0; i < data.length; i++) {
          this._nodes[i].datum = this._data[i];
        }
        return this;
      };
      Selection2.prototype.clear = function() {
        this.update([]);
        return this;
      };
      Selection2.prototype.select = function(predicate) {
        var results = [];
        var traverse = function(node) {
          if (predicate(node)) {
            results.push(node);
          }
          node.children.forEach(traverse);
        };
        traverse(this._parent);
        return results;
      };
      Selection2.prototype.selectByClass = function(Class) {
        return this.select(function(node) {
          return node instanceof Class;
        });
      };
      Selection2.prototype.selectByTag = function(tag) {
        return this.select(function(node) {
          return node.tag === tag;
        });
      };
      Selection2.prototype.nodes = function() {
        return this._nodes;
      };
      return Selection2;
    }();
  }
});

// node_modules/ag-charts-community/dist/esm/es5/scene/gradient/gradient.js
var Gradient;
var init_gradient = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/scene/gradient/gradient.js"() {
    Gradient = /** @class */
    function() {
      function Gradient2() {
        this.stops = [];
      }
      return Gradient2;
    }();
  }
});

// node_modules/ag-charts-community/dist/esm/es5/util/angle.js
function normalizeAngle360(radians) {
  radians %= twoPi;
  radians += twoPi;
  radians %= twoPi;
  return radians;
}
function normalizeAngle360Inclusive(radians) {
  radians %= twoPi;
  radians += twoPi;
  if (radians !== twoPi) {
    radians %= twoPi;
  }
  return radians;
}
function normalizeAngle180(radians) {
  radians %= twoPi;
  if (radians < -Math.PI) {
    radians += twoPi;
  } else if (radians >= Math.PI) {
    radians -= twoPi;
  }
  return radians;
}
function toRadians(degrees) {
  return degrees / 180 * Math.PI;
}
function toDegrees(radians) {
  return radians / Math.PI * 180;
}
var twoPi;
var init_angle = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/util/angle.js"() {
    twoPi = Math.PI * 2;
  }
});

// node_modules/ag-charts-community/dist/esm/es5/scene/gradient/linearGradient.js
var __extends5, LinearGradient;
var init_linearGradient = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/scene/gradient/linearGradient.js"() {
    init_gradient();
    init_angle();
    __extends5 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    LinearGradient = /** @class */
    function(_super) {
      __extends5(LinearGradient2, _super);
      function LinearGradient2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.angle = 0;
        return _this;
      }
      LinearGradient2.prototype.createGradient = function(ctx, bbox) {
        var angleOffset = 90;
        var _a5 = this, stops = _a5.stops, angle = _a5.angle;
        var radians = normalizeAngle360(toRadians(angle + angleOffset));
        var cos = Math.cos(radians);
        var sin = Math.sin(radians);
        var w = bbox.width;
        var h = bbox.height;
        var cx = bbox.x + w * 0.5;
        var cy = bbox.y + h * 0.5;
        if (w > 0 && h > 0) {
          var diagonal = Math.sqrt(h * h + w * w) / 2;
          var diagonalAngle = Math.atan2(h, w);
          var quarteredAngle = void 0;
          if (radians < Math.PI / 2) {
            quarteredAngle = radians;
          } else if (radians < Math.PI) {
            quarteredAngle = Math.PI - radians;
          } else if (radians < 3 * Math.PI / 2) {
            quarteredAngle = radians - Math.PI;
          } else {
            quarteredAngle = 2 * Math.PI - radians;
          }
          var l = diagonal * Math.abs(Math.cos(quarteredAngle - diagonalAngle));
          var gradient_1 = ctx.createLinearGradient(cx + cos * l, cy + sin * l, cx - cos * l, cy - sin * l);
          stops.forEach(function(stop) {
            gradient_1.addColorStop(stop.offset, stop.color);
          });
          return gradient_1;
        }
        return "black";
      };
      return LinearGradient2;
    }(Gradient);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/scene/shape/shape.js
var __extends6, __decorate6, LINEAR_GRADIENT_REGEXP, Shape;
var init_shape = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/scene/shape/shape.js"() {
    init_node();
    init_linearGradient();
    __extends6 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate6 = function(decorators, target2, key2, desc) {
      var c = arguments.length, r = c < 3 ? target2 : desc === null ? desc = Object.getOwnPropertyDescriptor(target2, key2) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target2, key2, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target2, key2, r) : d(target2, key2)) || r;
      return c > 3 && r && Object.defineProperty(target2, key2, r), r;
    };
    LINEAR_GRADIENT_REGEXP = /^linear-gradient\((.*?)deg,\s*(.*?)\s*\)$/i;
    Shape = /** @class */
    function(_super) {
      __extends6(Shape2, _super);
      function Shape2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.lastInstanceId = 0;
        _this.fillOpacity = 1;
        _this.strokeOpacity = 1;
        _this.fill = Shape2.defaultStyles.fill;
        _this.stroke = Shape2.defaultStyles.stroke;
        _this.strokeWidth = Shape2.defaultStyles.strokeWidth;
        _this.lineDash = Shape2.defaultStyles.lineDash;
        _this.lineDashOffset = Shape2.defaultStyles.lineDashOffset;
        _this.lineCap = Shape2.defaultStyles.lineCap;
        _this.lineJoin = Shape2.defaultStyles.lineJoin;
        _this.opacity = Shape2.defaultStyles.opacity;
        _this.fillShadow = Shape2.defaultStyles.fillShadow;
        return _this;
      }
      Shape2.createInstance = function(template) {
        var shape = Object.create(template);
        shape._setParent(void 0);
        shape.id = template.id + "-Instance-" + String(++template.lastInstanceId);
        return shape;
      };
      Shape2.prototype.restoreOwnStyles = function() {
        var styles = this.constructor.defaultStyles;
        var keys = Object.getOwnPropertyNames(styles);
        for (var i = 0, n = keys.length; i < n; i++) {
          var key2 = keys[i];
          this[key2] = styles[key2];
        }
      };
      Shape2.prototype.restoreAllStyles = function() {
        var styles = this.constructor.defaultStyles;
        for (var property in styles) {
          this[property] = styles[property];
        }
      };
      Shape2.prototype.restoreOverriddenStyles = function() {
        var styles = this.constructor.defaultStyles;
        var protoStyles = Object.getPrototypeOf(styles);
        for (var property in styles) {
          if (Object.prototype.hasOwnProperty.call(styles, property) && Object.prototype.hasOwnProperty.call(protoStyles, property)) {
            this[property] = styles[property];
          }
        }
      };
      Shape2.prototype.updateGradient = function() {
        var fill = this.fill;
        var linearGradientMatch;
        if ((fill === null || fill === void 0 ? void 0 : fill.startsWith("linear-gradient")) && (linearGradientMatch = fill.match(LINEAR_GRADIENT_REGEXP))) {
          var angle = parseFloat(linearGradientMatch[1]);
          var colors_1 = [];
          var colorsPart = linearGradientMatch[2];
          var colorRegex = /(#[0-9a-f]+)|(rgba?\(.+?\))|([a-z]+)/gi;
          var c = void 0;
          while (c = colorRegex.exec(colorsPart)) {
            colors_1.push(c[0]);
          }
          this.gradient = new LinearGradient();
          this.gradient.angle = angle;
          this.gradient.stops = colors_1.map(function(color, index) {
            var offset4 = index / (colors_1.length - 1);
            return { offset: offset4, color };
          });
        } else {
          this.gradient = void 0;
        }
      };
      Shape2.prototype.align = function(start, length) {
        var _a5, _b2, _c2;
        var pixelRatio = (_c2 = (_b2 = (_a5 = this.layerManager) === null || _a5 === void 0 ? void 0 : _a5.canvas) === null || _b2 === void 0 ? void 0 : _b2.pixelRatio) !== null && _c2 !== void 0 ? _c2 : 1;
        var alignedStart = Math.round(start * pixelRatio) / pixelRatio;
        if (length == void 0) {
          return alignedStart;
        }
        if (length === 0) {
          return 0;
        }
        if (length < 1) {
          return Math.ceil(length * pixelRatio) / pixelRatio;
        }
        return Math.round((length + start) * pixelRatio) / pixelRatio - alignedStart;
      };
      Shape2.prototype.fillStroke = function(ctx) {
        this.renderFill(ctx);
        this.renderStroke(ctx);
      };
      Shape2.prototype.renderFill = function(ctx) {
        if (this.fill) {
          var globalAlpha = ctx.globalAlpha;
          this.applyFill(ctx);
          this.applyFillAlpha(ctx);
          this.applyShadow(ctx);
          ctx.fill();
          ctx.globalAlpha = globalAlpha;
        }
        ctx.shadowColor = "rgba(0, 0, 0, 0)";
      };
      Shape2.prototype.applyFill = function(ctx) {
        if (this.gradient) {
          ctx.fillStyle = this.gradient.createGradient(ctx, this.computeBBox());
        } else {
          ctx.fillStyle = this.fill;
        }
      };
      Shape2.prototype.applyFillAlpha = function(ctx) {
        var globalAlpha = ctx.globalAlpha;
        ctx.globalAlpha = globalAlpha * this.opacity * this.fillOpacity;
      };
      Shape2.prototype.applyShadow = function(ctx) {
        var _a5, _b2;
        var pixelRatio = (_b2 = (_a5 = this.layerManager) === null || _a5 === void 0 ? void 0 : _a5.canvas.pixelRatio) !== null && _b2 !== void 0 ? _b2 : 1;
        var fillShadow = this.fillShadow;
        if (fillShadow && fillShadow.enabled) {
          ctx.shadowColor = fillShadow.color;
          ctx.shadowOffsetX = fillShadow.xOffset * pixelRatio;
          ctx.shadowOffsetY = fillShadow.yOffset * pixelRatio;
          ctx.shadowBlur = fillShadow.blur * pixelRatio;
        }
      };
      Shape2.prototype.renderStroke = function(ctx) {
        if (this.stroke && this.strokeWidth) {
          var globalAlpha = ctx.globalAlpha;
          ctx.strokeStyle = this.stroke;
          ctx.globalAlpha = globalAlpha * this.opacity * this.strokeOpacity;
          ctx.lineWidth = this.strokeWidth;
          if (this.lineDash) {
            ctx.setLineDash(this.lineDash);
          }
          if (this.lineDashOffset) {
            ctx.lineDashOffset = this.lineDashOffset;
          }
          if (this.lineCap) {
            ctx.lineCap = this.lineCap;
          }
          if (this.lineJoin) {
            ctx.lineJoin = this.lineJoin;
          }
          ctx.stroke();
          ctx.globalAlpha = globalAlpha;
        }
      };
      Shape2.prototype.containsPoint = function(x, y) {
        return this.isPointInPath(x, y);
      };
      Shape2.defaultStyles = Object.assign({}, {
        fill: "black",
        stroke: void 0,
        strokeWidth: 0,
        lineDash: void 0,
        lineDashOffset: 0,
        lineCap: void 0,
        lineJoin: void 0,
        opacity: 1,
        fillShadow: void 0
      });
      __decorate6([
        SceneChangeDetection({ redraw: RedrawType.MINOR })
      ], Shape2.prototype, "fillOpacity", void 0);
      __decorate6([
        SceneChangeDetection({ redraw: RedrawType.MINOR })
      ], Shape2.prototype, "strokeOpacity", void 0);
      __decorate6([
        SceneChangeDetection({ redraw: RedrawType.MINOR, changeCb: function(s) {
          return s.updateGradient();
        } })
      ], Shape2.prototype, "fill", void 0);
      __decorate6([
        SceneChangeDetection({ redraw: RedrawType.MINOR })
      ], Shape2.prototype, "stroke", void 0);
      __decorate6([
        SceneChangeDetection({ redraw: RedrawType.MINOR })
      ], Shape2.prototype, "strokeWidth", void 0);
      __decorate6([
        SceneChangeDetection({ redraw: RedrawType.MINOR })
      ], Shape2.prototype, "lineDash", void 0);
      __decorate6([
        SceneChangeDetection({ redraw: RedrawType.MINOR })
      ], Shape2.prototype, "lineDashOffset", void 0);
      __decorate6([
        SceneChangeDetection({ redraw: RedrawType.MINOR })
      ], Shape2.prototype, "lineCap", void 0);
      __decorate6([
        SceneChangeDetection({ redraw: RedrawType.MINOR })
      ], Shape2.prototype, "lineJoin", void 0);
      __decorate6([
        SceneChangeDetection({
          redraw: RedrawType.MINOR,
          convertor: function(v) {
            return Math.min(1, Math.max(0, v));
          }
        })
      ], Shape2.prototype, "opacity", void 0);
      __decorate6([
        SceneChangeDetection({ redraw: RedrawType.MINOR, checkDirtyOnAssignment: true })
      ], Shape2.prototype, "fillShadow", void 0);
      return Shape2;
    }(Node);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/scene/shape/text.js
function SceneFontChangeDetection(opts2) {
  var _a5 = opts2 || {}, _b2 = _a5.redraw, redraw2 = _b2 === void 0 ? RedrawType.MAJOR : _b2, changeCb2 = _a5.changeCb;
  return SceneChangeDetection({ redraw: redraw2, type: "font", changeCb: changeCb2 });
}
function getFont(fontSize, fontFamily, fontStyle, fontWeight) {
  return [fontStyle || "", fontWeight || "", fontSize + "px", fontFamily].join(" ").trim();
}
var __extends7, __decorate7, Text;
var init_text = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/scene/shape/text.js"() {
    init_shape();
    init_bbox();
    init_hdpiCanvas();
    init_node();
    __extends7 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate7 = function(decorators, target2, key2, desc) {
      var c = arguments.length, r = c < 3 ? target2 : desc === null ? desc = Object.getOwnPropertyDescriptor(target2, key2) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target2, key2, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target2, key2, r) : d(target2, key2)) || r;
      return c > 3 && r && Object.defineProperty(target2, key2, r), r;
    };
    Text = /** @class */
    function(_super) {
      __extends7(Text2, _super);
      function Text2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.x = 0;
        _this.y = 0;
        _this.lines = [];
        _this.text = "";
        _this._dirtyFont = true;
        _this.fontSize = 10;
        _this.fontFamily = "sans-serif";
        _this.textAlign = Text2.defaultStyles.textAlign;
        _this.textBaseline = Text2.defaultStyles.textBaseline;
        _this.lineHeight = void 0;
        return _this;
      }
      Text2.prototype._splitText = function() {
        this.lines = typeof this.text === "string" ? this.text.split(/\r?\n/g) : [];
      };
      Object.defineProperty(Text2.prototype, "font", {
        get: function() {
          if (this._dirtyFont) {
            this._dirtyFont = false;
            this._font = getFont(this.fontSize, this.fontFamily, this.fontStyle, this.fontWeight);
          }
          return this._font;
        },
        enumerable: false,
        configurable: true
      });
      Text2.prototype.computeBBox = function() {
        return HdpiCanvas.has.textMetrics ? this.getPreciseBBox() : this.getApproximateBBox();
      };
      Text2.prototype.getPreciseBBox = function() {
        var _a5, _b2;
        var left = 0;
        var top = 0;
        var width = 0;
        var height = 0;
        var baselineDistance = 0;
        for (var i = 0; i < this.lines.length; i++) {
          var metrics = HdpiCanvas.measureText(this.lines[i], this.font, this.textBaseline, this.textAlign);
          left = Math.max(left, metrics.actualBoundingBoxLeft);
          width = Math.max(width, metrics.width);
          if (i == 0) {
            top += metrics.actualBoundingBoxAscent;
            height += metrics.actualBoundingBoxAscent;
          } else {
            baselineDistance += (_a5 = metrics.fontBoundingBoxAscent) !== null && _a5 !== void 0 ? _a5 : metrics.emHeightAscent;
          }
          if (i == this.lines.length - 1) {
            height += metrics.actualBoundingBoxDescent;
          } else {
            baselineDistance += (_b2 = metrics.fontBoundingBoxDescent) !== null && _b2 !== void 0 ? _b2 : metrics.emHeightDescent;
          }
        }
        if (this.lineHeight !== void 0) {
          baselineDistance = (this.lines.length - 1) * this.lineHeight;
        }
        height += baselineDistance;
        top += baselineDistance * this.getVerticalOffset();
        return new BBox(this.x - left, this.y - top, width, height);
      };
      Text2.prototype.getVerticalOffset = function() {
        switch (this.textBaseline) {
          case "top":
          case "hanging":
            return 0;
          case "bottom":
          case "alphabetic":
          case "ideographic":
            return 1;
          case "middle":
            return 0.5;
        }
      };
      Text2.prototype.getApproximateBBox = function() {
        var _a5;
        var width = 0;
        var firstLineHeight = 0;
        var baselineDistance = 0;
        if (this.lines.length > 0) {
          var lineSize = HdpiCanvas.getTextSize(this.lines[0], this.font);
          width = lineSize.width;
          firstLineHeight = lineSize.height;
        }
        for (var i = 1; i < this.lines.length; i++) {
          var lineSize = HdpiCanvas.getTextSize(this.lines[i], this.font);
          width = Math.max(width, lineSize.width);
          baselineDistance += (_a5 = this.lineHeight) !== null && _a5 !== void 0 ? _a5 : lineSize.height;
        }
        var _b2 = this, x = _b2.x, y = _b2.y;
        switch (this.textAlign) {
          case "end":
          case "right":
            x -= width;
            break;
          case "center":
            x -= width / 2;
        }
        switch (this.textBaseline) {
          case "alphabetic":
            y -= firstLineHeight * 0.7 + baselineDistance * 0.5;
            break;
          case "middle":
            y -= firstLineHeight * 0.45 + baselineDistance * 0.5;
            break;
          case "ideographic":
            y -= firstLineHeight + baselineDistance;
            break;
          case "hanging":
            y -= firstLineHeight * 0.2 + baselineDistance * 0.5;
            break;
          case "bottom":
            y -= firstLineHeight + baselineDistance;
            break;
        }
        return new BBox(x, y, width, firstLineHeight + baselineDistance);
      };
      Text2.prototype.getLineHeight = function(line) {
        var _a5, _b2;
        if (this.lineHeight)
          return this.lineHeight;
        if (HdpiCanvas.has.textMetrics) {
          var metrics = HdpiCanvas.measureText(line, this.font, this.textBaseline, this.textAlign);
          return ((_a5 = metrics.fontBoundingBoxAscent) !== null && _a5 !== void 0 ? _a5 : metrics.emHeightAscent) + ((_b2 = metrics.fontBoundingBoxDescent) !== null && _b2 !== void 0 ? _b2 : metrics.emHeightDescent);
        }
        return HdpiCanvas.getTextSize(line, this.font).height;
      };
      Text2.prototype.isPointInPath = function(x, y) {
        var point = this.transformPoint(x, y);
        var bbox = this.computeBBox();
        return bbox ? bbox.containsPoint(point.x, point.y) : false;
      };
      Text2.prototype.render = function(renderCtx) {
        var ctx = renderCtx.ctx, forceRender = renderCtx.forceRender, stats = renderCtx.stats;
        if (this.dirty === RedrawType.NONE && !forceRender) {
          if (stats)
            stats.nodesSkipped += this.nodeCount.count;
          return;
        }
        if (!this.lines.length || !this.layerManager) {
          if (stats)
            stats.nodesSkipped += this.nodeCount.count;
          return;
        }
        this.computeTransformMatrix();
        this.matrix.toContext(ctx);
        var _a5 = this, fill = _a5.fill, stroke = _a5.stroke, strokeWidth = _a5.strokeWidth;
        ctx.font = this.font;
        ctx.textAlign = this.textAlign;
        ctx.textBaseline = this.textBaseline;
        var pixelRatio = this.layerManager.canvas.pixelRatio || 1;
        var globalAlpha = ctx.globalAlpha;
        if (fill) {
          ctx.fillStyle = fill;
          ctx.globalAlpha = globalAlpha * this.opacity * this.fillOpacity;
          var fillShadow = this.fillShadow;
          if (fillShadow && fillShadow.enabled) {
            ctx.shadowColor = fillShadow.color;
            ctx.shadowOffsetX = fillShadow.xOffset * pixelRatio;
            ctx.shadowOffsetY = fillShadow.yOffset * pixelRatio;
            ctx.shadowBlur = fillShadow.blur * pixelRatio;
          }
          this.renderLines(function(line, x, y) {
            return ctx.fillText(line, x, y);
          });
        }
        if (stroke && strokeWidth) {
          ctx.strokeStyle = stroke;
          ctx.lineWidth = strokeWidth;
          ctx.globalAlpha = globalAlpha * this.opacity * this.strokeOpacity;
          var _b2 = this, lineDash = _b2.lineDash, lineDashOffset = _b2.lineDashOffset, lineCap = _b2.lineCap, lineJoin = _b2.lineJoin;
          if (lineDash) {
            ctx.setLineDash(lineDash);
          }
          if (lineDashOffset) {
            ctx.lineDashOffset = lineDashOffset;
          }
          if (lineCap) {
            ctx.lineCap = lineCap;
          }
          if (lineJoin) {
            ctx.lineJoin = lineJoin;
          }
          this.renderLines(function(line, x, y) {
            return ctx.strokeText(line, x, y);
          });
        }
        _super.prototype.render.call(this, renderCtx);
      };
      Text2.prototype.renderLines = function(renderCallback) {
        var _this = this;
        var _a5 = this, lines = _a5.lines, x = _a5.x, y = _a5.y;
        var lineHeights = this.lines.map(function(line) {
          return _this.getLineHeight(line);
        });
        var totalHeight = lineHeights.reduce(function(a, b) {
          return a + b;
        }, 0);
        var offsetY = -(totalHeight - lineHeights[0]) * this.getVerticalOffset();
        for (var i = 0; i < lines.length; i++) {
          renderCallback(lines[i], x, y + offsetY);
          offsetY += lineHeights[i];
        }
      };
      Text2.className = "Text";
      Text2.defaultStyles = Object.assign({}, Shape.defaultStyles, {
        textAlign: "start",
        fontStyle: void 0,
        fontWeight: void 0,
        fontSize: 10,
        fontFamily: "sans-serif",
        textBaseline: "alphabetic"
      });
      __decorate7([
        SceneChangeDetection({ redraw: RedrawType.MAJOR })
      ], Text2.prototype, "x", void 0);
      __decorate7([
        SceneChangeDetection({ redraw: RedrawType.MAJOR })
      ], Text2.prototype, "y", void 0);
      __decorate7([
        SceneChangeDetection({ redraw: RedrawType.MAJOR, changeCb: function(o) {
          return o._splitText();
        } })
      ], Text2.prototype, "text", void 0);
      __decorate7([
        SceneFontChangeDetection()
      ], Text2.prototype, "fontStyle", void 0);
      __decorate7([
        SceneFontChangeDetection()
      ], Text2.prototype, "fontWeight", void 0);
      __decorate7([
        SceneFontChangeDetection()
      ], Text2.prototype, "fontSize", void 0);
      __decorate7([
        SceneFontChangeDetection()
      ], Text2.prototype, "fontFamily", void 0);
      __decorate7([
        SceneChangeDetection({ redraw: RedrawType.MAJOR })
      ], Text2.prototype, "textAlign", void 0);
      __decorate7([
        SceneChangeDetection({ redraw: RedrawType.MAJOR })
      ], Text2.prototype, "textBaseline", void 0);
      __decorate7([
        SceneChangeDetection({ redraw: RedrawType.MAJOR })
      ], Text2.prototype, "lineHeight", void 0);
      return Text2;
    }(Shape);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/scene/polyRoots.js
function linearRoot(a, b) {
  var t = -b / a;
  return a !== 0 && t >= 0 && t <= 1 ? [t] : [];
}
function quadraticRoots(a, b, c) {
  if (a === 0) {
    return linearRoot(b, c);
  }
  var D = b * b - 4 * a * c;
  var roots = [];
  if (D === 0) {
    var t = -b / (2 * a);
    if (t >= 0 && t <= 1) {
      roots.push(t);
    }
  } else if (D > 0) {
    var rD = Math.sqrt(D);
    var t1 = (-b - rD) / (2 * a);
    var t2 = (-b + rD) / (2 * a);
    if (t1 >= 0 && t1 <= 1) {
      roots.push(t1);
    }
    if (t2 >= 0 && t2 <= 1) {
      roots.push(t2);
    }
  }
  return roots;
}
function cubicRoots(a, b, c, d) {
  if (a === 0) {
    return quadraticRoots(b, c, d);
  }
  var A = b / a;
  var B = c / a;
  var C = d / a;
  var Q = (3 * B - A * A) / 9;
  var R = (9 * A * B - 27 * C - 2 * A * A * A) / 54;
  var D = Q * Q * Q + R * R;
  var third = 1 / 3;
  var roots = [];
  if (D >= 0) {
    var rD = Math.sqrt(D);
    var S = Math.sign(R + rD) * Math.pow(Math.abs(R + rD), third);
    var T = Math.sign(R - rD) * Math.pow(Math.abs(R - rD), third);
    var Im = Math.abs(Math.sqrt(3) * (S - T) / 2);
    var t = -third * A + (S + T);
    if (t >= 0 && t <= 1) {
      roots.push(t);
    }
    if (Im === 0) {
      var t_1 = -third * A - (S + T) / 2;
      if (t_1 >= 0 && t_1 <= 1) {
        roots.push(t_1);
      }
    }
  } else {
    var theta = Math.acos(R / Math.sqrt(-Q * Q * Q));
    var thirdA = third * A;
    var twoSqrtQ = 2 * Math.sqrt(-Q);
    var t1 = twoSqrtQ * Math.cos(third * theta) - thirdA;
    var t2 = twoSqrtQ * Math.cos(third * (theta + 2 * Math.PI)) - thirdA;
    var t3 = twoSqrtQ * Math.cos(third * (theta + 4 * Math.PI)) - thirdA;
    if (t1 >= 0 && t1 <= 1) {
      roots.push(t1);
    }
    if (t2 >= 0 && t2 <= 1) {
      roots.push(t2);
    }
    if (t3 >= 0 && t3 <= 1) {
      roots.push(t3);
    }
  }
  return roots;
}
var init_polyRoots = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/scene/polyRoots.js"() {
  }
});

// node_modules/ag-charts-community/dist/esm/es5/scene/intersection.js
function segmentIntersection(ax1, ay1, ax2, ay2, bx1, by1, bx2, by2) {
  var d = (ax2 - ax1) * (by2 - by1) - (ay2 - ay1) * (bx2 - bx1);
  if (d === 0) {
    return null;
  }
  var ua = ((bx2 - bx1) * (ay1 - by1) - (ax1 - bx1) * (by2 - by1)) / d;
  var ub = ((ax2 - ax1) * (ay1 - by1) - (ay2 - ay1) * (ax1 - bx1)) / d;
  if (ua >= 0 && ua <= 1 && ub >= 0 && ub <= 1) {
    return {
      x: ax1 + ua * (ax2 - ax1),
      y: ay1 + ua * (ay2 - ay1)
    };
  }
  return null;
}
function cubicSegmentIntersections(px1, py1, px2, py2, px3, py3, px4, py4, x1, y1, x2, y2) {
  var e_1, _a5;
  var intersections = [];
  var A = y1 - y2;
  var B = x2 - x1;
  var C = x1 * (y2 - y1) - y1 * (x2 - x1);
  var bx = bezierCoefficients(px1, px2, px3, px4);
  var by = bezierCoefficients(py1, py2, py3, py4);
  var a = A * bx[0] + B * by[0];
  var b = A * bx[1] + B * by[1];
  var c = A * bx[2] + B * by[2];
  var d = A * bx[3] + B * by[3] + C;
  var roots = cubicRoots(a, b, c, d);
  try {
    for (var roots_1 = __values7(roots), roots_1_1 = roots_1.next(); !roots_1_1.done; roots_1_1 = roots_1.next()) {
      var t = roots_1_1.value;
      var tt = t * t;
      var ttt = t * tt;
      var x = bx[0] * ttt + bx[1] * tt + bx[2] * t + bx[3];
      var y = by[0] * ttt + by[1] * tt + by[2] * t + by[3];
      var s = void 0;
      if (x1 !== x2) {
        s = (x - x1) / (x2 - x1);
      } else {
        s = (y - y1) / (y2 - y1);
      }
      if (s >= 0 && s <= 1) {
        intersections.push({ x, y });
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (roots_1_1 && !roots_1_1.done && (_a5 = roots_1.return))
        _a5.call(roots_1);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return intersections;
}
function bezierCoefficients(P1, P2, P3, P4) {
  return [
    // Bézier expressed as matrix operations:
    -P1 + 3 * P2 - 3 * P3 + P4,
    3 * P1 - 6 * P2 + 3 * P3,
    -3 * P1 + 3 * P2,
    P1
  ];
}
function arcIntersections(cx, cy, r, startAngle, endAngle, counterClockwise, x1, y1, x2, y2) {
  var k = (y2 - y1) / (x2 - x1);
  var y0 = y1 - k * x1;
  var a = Math.pow(k, 2) + 1;
  var b = 2 * (k * (y0 - cy) - cx);
  var c = Math.pow(cx, 2) + Math.pow(y0 - cy, 2) - Math.pow(r, 2);
  var d = Math.pow(b, 2) - 4 * a * c;
  if (d < 0) {
    return [];
  }
  var i1x = (-b + Math.sqrt(d)) / 2 / a;
  var i2x = (-b - Math.sqrt(d)) / 2 / a;
  var intersections = [];
  [i1x, i2x].forEach(function(x) {
    var isXInsideLine = x >= Math.min(x1, x2) && x <= Math.max(x1, x2);
    if (!isXInsideLine) {
      return;
    }
    var y = k * x;
    var a1 = normalizeAngle360(counterClockwise ? endAngle : startAngle);
    var a2 = normalizeAngle360(counterClockwise ? startAngle : endAngle);
    var intersectionAngle = normalizeAngle360(Math.atan2(y, x));
    if (a2 <= a1) {
      a2 += 2 * Math.PI;
    }
    if (intersectionAngle < a1) {
      intersectionAngle += 2 * Math.PI;
    }
    if (intersectionAngle >= a1 && intersectionAngle <= a2) {
      intersections.push({ x, y });
    }
  });
  return intersections;
}
var __values7;
var init_intersection = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/scene/intersection.js"() {
    init_angle();
    init_polyRoots();
    __values7 = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
  }
});

// node_modules/ag-charts-community/dist/esm/es5/scene/path2D.js
var __values8, Command, Path2D;
var init_path2D = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/scene/path2D.js"() {
    init_intersection();
    __values8 = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    (function(Command2) {
      Command2[Command2["Move"] = 0] = "Move";
      Command2[Command2["Line"] = 1] = "Line";
      Command2[Command2["Arc"] = 2] = "Arc";
      Command2[Command2["Curve"] = 3] = "Curve";
      Command2[Command2["ClosePath"] = 4] = "ClosePath";
    })(Command || (Command = {}));
    Path2D = /** @class */
    function() {
      function Path2D2() {
        this.previousCommands = [];
        this.previousParams = [];
        this.previousClosedPath = false;
        this.commands = [];
        this.params = [];
        this._closedPath = false;
      }
      Path2D2.prototype.isDirty = function() {
        if (this._closedPath !== this.previousClosedPath) {
          return true;
        }
        if (this.previousCommands.length !== this.commands.length) {
          return true;
        }
        if (this.previousParams.length !== this.params.length) {
          return true;
        }
        for (var i = 0; i < this.commands.length; i++) {
          if (this.commands[i] !== this.previousCommands[i]) {
            return true;
          }
        }
        for (var i = 0; i < this.params.length; i++) {
          if (this.params[i] !== this.previousParams[i]) {
            return true;
          }
        }
        return false;
      };
      Path2D2.prototype.draw = function(ctx) {
        var e_1, _a5;
        var commands = this.commands;
        var params = this.params;
        var j = 0;
        ctx.beginPath();
        try {
          for (var commands_1 = __values8(commands), commands_1_1 = commands_1.next(); !commands_1_1.done; commands_1_1 = commands_1.next()) {
            var command = commands_1_1.value;
            switch (command) {
              case Command.Move:
                ctx.moveTo(params[j++], params[j++]);
                break;
              case Command.Line:
                ctx.lineTo(params[j++], params[j++]);
                break;
              case Command.Curve:
                ctx.bezierCurveTo(params[j++], params[j++], params[j++], params[j++], params[j++], params[j++]);
                break;
              case Command.Arc:
                ctx.arc(params[j++], params[j++], params[j++], params[j++], params[j++], params[j++] === 1);
                break;
              case Command.ClosePath:
                ctx.closePath();
                break;
            }
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (commands_1_1 && !commands_1_1.done && (_a5 = commands_1.return))
              _a5.call(commands_1);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        if (commands.length === 0) {
          ctx.closePath();
        }
      };
      Path2D2.prototype.moveTo = function(x, y) {
        if (this.xy) {
          this.xy[0] = x;
          this.xy[1] = y;
        } else {
          this.xy = [x, y];
        }
        this.commands.push(Command.Move);
        this.params.push(x, y);
      };
      Path2D2.prototype.lineTo = function(x, y) {
        if (this.xy) {
          this.commands.push(Command.Line);
          this.params.push(x, y);
          this.xy[0] = x;
          this.xy[1] = y;
        } else {
          this.moveTo(x, y);
        }
      };
      Path2D2.prototype.rect = function(x, y, width, height) {
        this.moveTo(x, y);
        this.lineTo(x + width, y);
        this.lineTo(x + width, y + height);
        this.lineTo(x, y + height);
        this.closePath();
      };
      Path2D2.prototype.arc = function(x, y, r, sAngle, eAngle, antiClockwise) {
        if (antiClockwise === void 0) {
          antiClockwise = false;
        }
        var endX = x + r * Math.cos(eAngle);
        var endY = y + r * Math.sin(eAngle);
        if (this.xy) {
          this.xy[0] = endX;
          this.xy[1] = endY;
        } else {
          this.xy = [endX, endY];
        }
        this.commands.push(Command.Arc);
        this.params.push(x, y, r, sAngle, eAngle, antiClockwise ? 1 : 0);
      };
      Path2D2.prototype.cubicCurveTo = function(cx1, cy1, cx2, cy2, x, y) {
        if (!this.xy) {
          this.moveTo(cx1, cy1);
        }
        this.commands.push(Command.Curve);
        this.params.push(cx1, cy1, cx2, cy2, x, y);
        this.xy[0] = x;
        this.xy[1] = y;
      };
      Object.defineProperty(Path2D2.prototype, "closedPath", {
        get: function() {
          return this._closedPath;
        },
        enumerable: false,
        configurable: true
      });
      Path2D2.prototype.closePath = function() {
        if (this.xy) {
          this.xy = void 0;
          this.commands.push(Command.ClosePath);
          this._closedPath = true;
        }
      };
      Path2D2.prototype.clear = function(_a5) {
        var trackChanges = (_a5 === void 0 ? { trackChanges: false } : _a5).trackChanges;
        if (trackChanges) {
          this.previousCommands = this.commands;
          this.previousParams = this.params;
          this.previousClosedPath = this._closedPath;
          this.commands = [];
          this.params = [];
        } else {
          this.commands.length = 0;
          this.params.length = 0;
        }
        this.xy = void 0;
        this._closedPath = false;
      };
      Path2D2.prototype.isPointInPath = function(x, y) {
        var commands = this.commands;
        var params = this.params;
        var cn = commands.length;
        var ox = -1e4;
        var oy = -1e4;
        var sx = NaN;
        var sy = NaN;
        var px = 0;
        var py = 0;
        var intersectionCount = 0;
        for (var ci = 0, pi = 0; ci < cn; ci++) {
          switch (commands[ci]) {
            case Command.Move:
              if (!isNaN(sx)) {
                if (segmentIntersection(sx, sy, px, py, ox, oy, x, y)) {
                  intersectionCount++;
                }
              }
              px = params[pi++];
              sx = px;
              py = params[pi++];
              sy = py;
              break;
            case Command.Line:
              if (segmentIntersection(px, py, params[pi++], params[pi++], ox, oy, x, y)) {
                intersectionCount++;
              }
              px = params[pi - 2];
              py = params[pi - 1];
              break;
            case Command.Curve:
              intersectionCount += cubicSegmentIntersections(px, py, params[pi++], params[pi++], params[pi++], params[pi++], params[pi++], params[pi++], ox, oy, x, y).length;
              px = params[pi - 2];
              py = params[pi - 1];
              break;
            case Command.Arc:
              intersectionCount += arcIntersections(params[pi++], params[pi++], params[pi++], params[pi++], params[pi++], Boolean(params[pi++]), ox, oy, x, y).length;
              px = params[pi - 2];
              py = params[pi - 1];
              break;
            case Command.ClosePath:
              if (!isNaN(sx)) {
                if (segmentIntersection(sx, sy, px, py, ox, oy, x, y)) {
                  intersectionCount++;
                }
              }
              break;
          }
        }
        return intersectionCount % 2 === 1;
      };
      return Path2D2;
    }();
  }
});

// node_modules/ag-charts-community/dist/esm/es5/scene/shape/path.js
function ScenePathChangeDetection(opts2) {
  var _a5 = opts2 || {}, _b2 = _a5.redraw, redraw2 = _b2 === void 0 ? RedrawType.MAJOR : _b2, changeCb2 = _a5.changeCb, convertor2 = _a5.convertor;
  return SceneChangeDetection({ redraw: redraw2, type: "path", convertor: convertor2, changeCb: changeCb2 });
}
var __extends8, __decorate8, Path;
var init_path = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/scene/shape/path.js"() {
    init_shape();
    init_path2D();
    init_node();
    __extends8 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate8 = function(decorators, target2, key2, desc) {
      var c = arguments.length, r = c < 3 ? target2 : desc === null ? desc = Object.getOwnPropertyDescriptor(target2, key2) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target2, key2, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target2, key2, r) : d(target2, key2)) || r;
      return c > 3 && r && Object.defineProperty(target2, key2, r), r;
    };
    Path = /** @class */
    function(_super) {
      __extends8(Path2, _super);
      function Path2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.path = new Path2D();
        _this._dirtyPath = true;
        return _this;
      }
      Object.defineProperty(Path2.prototype, "dirtyPath", {
        get: function() {
          return this._dirtyPath;
        },
        set: function(value) {
          if (this._dirtyPath !== value) {
            this._dirtyPath = value;
            if (value) {
              this.markDirty(this, RedrawType.MAJOR);
            }
          }
        },
        enumerable: false,
        configurable: true
      });
      Path2.prototype.checkPathDirty = function() {
        var _a5, _b2;
        if (this._dirtyPath) {
          return;
        }
        this.dirtyPath = this.path.isDirty() || ((_b2 = (_a5 = this.fillShadow) === null || _a5 === void 0 ? void 0 : _a5.isDirty()) !== null && _b2 !== void 0 ? _b2 : false);
      };
      Path2.prototype.isPointInPath = function(x, y) {
        var point = this.transformPoint(x, y);
        return this.path.closedPath && this.path.isPointInPath(point.x, point.y);
      };
      Path2.prototype.isDirtyPath = function() {
        return false;
      };
      Path2.prototype.updatePath = function() {
      };
      Path2.prototype.render = function(renderCtx) {
        var _a5, _b2;
        var ctx = renderCtx.ctx, forceRender = renderCtx.forceRender, stats = renderCtx.stats;
        if (this.dirty === RedrawType.NONE && !forceRender) {
          if (stats)
            stats.nodesSkipped += this.nodeCount.count;
          return;
        }
        this.computeTransformMatrix();
        this.matrix.toContext(ctx);
        if (this.dirtyPath || this.isDirtyPath()) {
          this.updatePath();
          this.dirtyPath = false;
        }
        if (this.clipPath) {
          ctx.save();
          if (this.clipMode === "normal") {
            this.clipPath.draw(ctx);
            ctx.clip();
          }
          this.path.draw(ctx);
          this.fillStroke(ctx);
          if (this.clipMode === "punch-out") {
            this.clipPath.draw(ctx);
            ctx.clip();
            var _c2 = (_a5 = this.computeBBox()) !== null && _a5 !== void 0 ? _a5 : {}, _d2 = _c2.x, x = _d2 === void 0 ? -1e4 : _d2, _e = _c2.y, y = _e === void 0 ? -1e4 : _e, _f = _c2.width, width = _f === void 0 ? 2e4 : _f, _g = _c2.height, height = _g === void 0 ? 2e4 : _g;
            ctx.clearRect(x, y, width, height);
          }
          ctx.restore();
        } else {
          this.path.draw(ctx);
          this.fillStroke(ctx);
        }
        (_b2 = this.fillShadow) === null || _b2 === void 0 ? void 0 : _b2.markClean();
        _super.prototype.render.call(this, renderCtx);
      };
      Path2.className = "Path";
      __decorate8([
        ScenePathChangeDetection()
      ], Path2.prototype, "clipPath", void 0);
      __decorate8([
        ScenePathChangeDetection()
      ], Path2.prototype, "clipMode", void 0);
      return Path2;
    }(Shape);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/marker/marker.js
var __extends9, __decorate9, __values9, Marker;
var init_marker = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/marker/marker.js"() {
    init_path();
    init_bbox();
    __extends9 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate9 = function(decorators, target2, key2, desc) {
      var c = arguments.length, r = c < 3 ? target2 : desc === null ? desc = Object.getOwnPropertyDescriptor(target2, key2) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target2, key2, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target2, key2, r) : d(target2, key2)) || r;
      return c > 3 && r && Object.defineProperty(target2, key2, r), r;
    };
    __values9 = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    Marker = /** @class */
    function(_super) {
      __extends9(Marker2, _super);
      function Marker2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.x = 0;
        _this.y = 0;
        _this.size = 12;
        return _this;
      }
      Marker2.prototype.computeBBox = function() {
        var _a5 = this, x = _a5.x, y = _a5.y, size = _a5.size;
        var half = size / 2;
        return new BBox(x - half, y - half, size, size);
      };
      Marker2.prototype.applyPath = function(s, moves) {
        var e_1, _a5;
        var path = this.path;
        var _b2 = this, x = _b2.x, y = _b2.y;
        path.clear();
        try {
          for (var moves_1 = __values9(moves), moves_1_1 = moves_1.next(); !moves_1_1.done; moves_1_1 = moves_1.next()) {
            var _c2 = moves_1_1.value, mx = _c2.x, my = _c2.y, t = _c2.t;
            x += mx * s;
            y += my * s;
            if (t === "move") {
              path.moveTo(x, y);
            } else {
              path.lineTo(x, y);
            }
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (moves_1_1 && !moves_1_1.done && (_a5 = moves_1.return))
              _a5.call(moves_1);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        path.closePath();
      };
      __decorate9([
        ScenePathChangeDetection()
      ], Marker2.prototype, "x", void 0);
      __decorate9([
        ScenePathChangeDetection()
      ], Marker2.prototype, "y", void 0);
      __decorate9([
        ScenePathChangeDetection({ convertor: Math.abs })
      ], Marker2.prototype, "size", void 0);
      return Marker2;
    }(Path);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/marker/square.js
var __extends10, Square;
var init_square = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/marker/square.js"() {
    init_marker();
    __extends10 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Square = /** @class */
    function(_super) {
      __extends10(Square2, _super);
      function Square2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      Square2.prototype.updatePath = function() {
        var _a5 = this, path = _a5.path, x = _a5.x, y = _a5.y;
        var hs = this.size / 2;
        path.clear();
        path.moveTo(this.align(x - hs), this.align(y - hs));
        path.lineTo(this.align(x + hs), this.align(y - hs));
        path.lineTo(this.align(x + hs), this.align(y + hs));
        path.lineTo(this.align(x - hs), this.align(y + hs));
        path.closePath();
      };
      Square2.className = "Square";
      return Square2;
    }(Marker);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/util/proxy.js
function ProxyOnWrite(proxyProperty) {
  return addTransformToInstanceProperty(function(target2, _, value) {
    target2[proxyProperty] = value;
    return value;
  });
}
function ProxyPropertyOnWrite(childName, childProperty) {
  return addTransformToInstanceProperty(function(target2, key2, value) {
    target2[childName][childProperty !== null && childProperty !== void 0 ? childProperty : key2] = value;
    return value;
  });
}
function ActionOnSet(opts2) {
  var newValueFn = opts2.newValue, oldValueFn = opts2.oldValue, changeValueFn = opts2.changeValue;
  return addTransformToInstanceProperty(function(target2, _, newValue, oldValue) {
    if (newValue !== oldValue) {
      if (oldValue !== void 0) {
        oldValueFn === null || oldValueFn === void 0 ? void 0 : oldValueFn.call(target2, oldValue);
      }
      if (newValue !== void 0) {
        newValueFn === null || newValueFn === void 0 ? void 0 : newValueFn.call(target2, newValue);
      }
      changeValueFn === null || changeValueFn === void 0 ? void 0 : changeValueFn.call(target2, newValue, oldValue);
    }
    return newValue;
  });
}
var init_proxy = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/util/proxy.js"() {
    init_decorator();
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/markerLabel.js
var __extends11, __decorate10, MarkerLabel;
var init_markerLabel = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/markerLabel.js"() {
    init_group();
    init_text();
    init_square();
    init_hdpiCanvas();
    init_proxy();
    __extends11 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate10 = function(decorators, target2, key2, desc) {
      var c = arguments.length, r = c < 3 ? target2 : desc === null ? desc = Object.getOwnPropertyDescriptor(target2, key2) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target2, key2, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target2, key2, r) : d(target2, key2)) || r;
      return c > 3 && r && Object.defineProperty(target2, key2, r), r;
    };
    MarkerLabel = /** @class */
    function(_super) {
      __extends11(MarkerLabel2, _super);
      function MarkerLabel2() {
        var _this = _super.call(this, { name: "markerLabelGroup" }) || this;
        _this.label = new Text();
        _this._marker = new Square();
        _this._markerSize = 15;
        _this._spacing = 8;
        var label = _this.label;
        label.textBaseline = "middle";
        label.fontSize = 12;
        label.fontFamily = "Verdana, sans-serif";
        label.fill = "black";
        label.y = HdpiCanvas.has.textMetrics ? 1 : 0;
        _this.append([_this.marker, label]);
        _this.update();
        return _this;
      }
      Object.defineProperty(MarkerLabel2.prototype, "marker", {
        get: function() {
          return this._marker;
        },
        set: function(value) {
          if (this._marker !== value) {
            this.removeChild(this._marker);
            this._marker = value;
            this.appendChild(value);
            this.update();
          }
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(MarkerLabel2.prototype, "markerSize", {
        get: function() {
          return this._markerSize;
        },
        set: function(value) {
          if (this._markerSize !== value) {
            this._markerSize = value;
            this.update();
          }
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(MarkerLabel2.prototype, "spacing", {
        get: function() {
          return this._spacing;
        },
        set: function(value) {
          if (this._spacing !== value) {
            this._spacing = value;
            this.update();
          }
        },
        enumerable: false,
        configurable: true
      });
      MarkerLabel2.prototype.update = function() {
        var marker = this.marker;
        var markerSize = this.markerSize;
        marker.size = markerSize;
        this.label.x = markerSize / 2 + this.spacing;
      };
      MarkerLabel2.prototype.render = function(renderCtx) {
        this.marker.opacity = this.opacity;
        this.label.opacity = this.opacity;
        _super.prototype.render.call(this, renderCtx);
      };
      MarkerLabel2.className = "MarkerLabel";
      __decorate10([
        ProxyPropertyOnWrite("label")
      ], MarkerLabel2.prototype, "text", void 0);
      __decorate10([
        ProxyPropertyOnWrite("label")
      ], MarkerLabel2.prototype, "fontStyle", void 0);
      __decorate10([
        ProxyPropertyOnWrite("label")
      ], MarkerLabel2.prototype, "fontWeight", void 0);
      __decorate10([
        ProxyPropertyOnWrite("label")
      ], MarkerLabel2.prototype, "fontSize", void 0);
      __decorate10([
        ProxyPropertyOnWrite("label")
      ], MarkerLabel2.prototype, "fontFamily", void 0);
      __decorate10([
        ProxyPropertyOnWrite("label", "fill")
      ], MarkerLabel2.prototype, "color", void 0);
      __decorate10([
        ProxyPropertyOnWrite("marker", "fill")
      ], MarkerLabel2.prototype, "markerFill", void 0);
      __decorate10([
        ProxyPropertyOnWrite("marker", "stroke")
      ], MarkerLabel2.prototype, "markerStroke", void 0);
      __decorate10([
        ProxyPropertyOnWrite("marker", "strokeWidth")
      ], MarkerLabel2.prototype, "markerStrokeWidth", void 0);
      __decorate10([
        ProxyPropertyOnWrite("marker", "fillOpacity")
      ], MarkerLabel2.prototype, "markerFillOpacity", void 0);
      __decorate10([
        ProxyPropertyOnWrite("marker", "strokeOpacity")
      ], MarkerLabel2.prototype, "markerStrokeOpacity", void 0);
      return MarkerLabel2;
    }(Group);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/marker/circle.js
var __extends12, Circle;
var init_circle = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/marker/circle.js"() {
    init_marker();
    __extends12 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Circle = /** @class */
    function(_super) {
      __extends12(Circle2, _super);
      function Circle2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      Circle2.prototype.updatePath = function() {
        var _a5 = this, x = _a5.x, y = _a5.y, path = _a5.path, size = _a5.size;
        var r = size / 2;
        path.clear();
        path.arc(x, y, r, 0, Math.PI * 2);
        path.closePath();
      };
      Circle2.className = "Circle";
      return Circle2;
    }(Marker);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/marker/cross.js
var __extends13, Cross;
var init_cross = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/marker/cross.js"() {
    init_marker();
    __extends13 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Cross = /** @class */
    function(_super) {
      __extends13(Cross2, _super);
      function Cross2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      Cross2.prototype.updatePath = function() {
        var s = this.size / 4.2;
        _super.prototype.applyPath.call(this, s, Cross2.moves);
      };
      Cross2.className = "Cross";
      Cross2.moves = [
        { x: -1, y: 0, t: "move" },
        { x: -1, y: -1 },
        { x: 1, y: -1 },
        { x: 1, y: 1 },
        { x: 1, y: -1 },
        { x: 1, y: 1 },
        { x: -1, y: 1 },
        { x: 1, y: 1 },
        { x: -1, y: 1 },
        { x: -1, y: -1 },
        { x: -1, y: 1 },
        { x: -1, y: -1 }
      ];
      return Cross2;
    }(Marker);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/marker/diamond.js
var __extends14, Diamond;
var init_diamond = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/marker/diamond.js"() {
    init_marker();
    __extends14 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Diamond = /** @class */
    function(_super) {
      __extends14(Diamond2, _super);
      function Diamond2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      Diamond2.prototype.updatePath = function() {
        var s = this.size / 2;
        _super.prototype.applyPath.call(this, s, Diamond2.moves);
      };
      Diamond2.className = "Diamond";
      Diamond2.moves = [
        { x: 0, y: -1, t: "move" },
        { x: 1, y: 1 },
        { x: -1, y: 1 },
        { x: -1, y: -1 },
        { x: 1, y: -1 }
      ];
      return Diamond2;
    }(Marker);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/marker/heart.js
var __extends15, Heart;
var init_heart = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/marker/heart.js"() {
    init_marker();
    __extends15 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Heart = /** @class */
    function(_super) {
      __extends15(Heart2, _super);
      function Heart2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      Heart2.prototype.rad = function(degree) {
        return degree / 180 * Math.PI;
      };
      Heart2.prototype.updatePath = function() {
        var _a5 = this, x = _a5.x, path = _a5.path, size = _a5.size, rad = _a5.rad;
        var r = size / 4;
        var y = this.y + r / 2;
        path.clear();
        path.arc(x - r, y - r, r, rad(130), rad(330));
        path.arc(x + r, y - r, r, rad(220), rad(50));
        path.lineTo(x, y + r);
        path.closePath();
      };
      Heart2.className = "Heart";
      return Heart2;
    }(Marker);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/marker/plus.js
var __extends16, Plus;
var init_plus = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/marker/plus.js"() {
    init_marker();
    __extends16 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Plus = /** @class */
    function(_super) {
      __extends16(Plus2, _super);
      function Plus2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      Plus2.prototype.updatePath = function() {
        var s = this.size / 3;
        _super.prototype.applyPath.call(this, s, Plus2.moves);
      };
      Plus2.className = "Plus";
      Plus2.moves = [
        { x: -0.5, y: -0.5, t: "move" },
        { x: 0, y: -1 },
        { x: 1, y: 0 },
        { x: 0, y: 1 },
        { x: 1, y: 0 },
        { x: 0, y: 1 },
        { x: -1, y: 0 },
        { x: 0, y: 1 },
        { x: -1, y: 0 },
        { x: 0, y: -1 },
        { x: -1, y: 0 },
        { x: 0, y: -1 }
      ];
      return Plus2;
    }(Marker);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/marker/triangle.js
var __extends17, Triangle;
var init_triangle = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/marker/triangle.js"() {
    init_marker();
    __extends17 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Triangle = /** @class */
    function(_super) {
      __extends17(Triangle2, _super);
      function Triangle2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      Triangle2.prototype.updatePath = function() {
        var s = this.size * 1.1;
        _super.prototype.applyPath.call(this, s, Triangle2.moves);
      };
      Triangle2.className = "Triangle";
      Triangle2.moves = [
        { x: 0, y: -0.48, t: "move" },
        { x: 0.5, y: 0.87 },
        { x: -1, y: 0 }
      ];
      return Triangle2;
    }(Marker);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/marker/util.js
function getMarker(shape) {
  if (shape === void 0) {
    shape = Square;
  }
  if (typeof shape === "string") {
    switch (shape) {
      case "circle":
        return Circle;
      case "cross":
        return Cross;
      case "diamond":
        return Diamond;
      case "heart":
        return Heart;
      case "plus":
        return Plus;
      case "triangle":
        return Triangle;
      default:
        return Square;
    }
  }
  if (typeof shape === "function") {
    return shape;
  }
  return Square;
}
var init_util = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/marker/util.js"() {
    init_square();
    init_circle();
    init_cross();
    init_diamond();
    init_heart();
    init_plus();
    init_triangle();
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/chartUpdateType.js
var ChartUpdateType;
var init_chartUpdateType = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/chartUpdateType.js"() {
    (function(ChartUpdateType2) {
      ChartUpdateType2[ChartUpdateType2["FULL"] = 0] = "FULL";
      ChartUpdateType2[ChartUpdateType2["PROCESS_DATA"] = 1] = "PROCESS_DATA";
      ChartUpdateType2[ChartUpdateType2["PERFORM_LAYOUT"] = 2] = "PERFORM_LAYOUT";
      ChartUpdateType2[ChartUpdateType2["SERIES_UPDATE"] = 3] = "SERIES_UPDATE";
      ChartUpdateType2[ChartUpdateType2["TOOLTIP_RECALCULATION"] = 4] = "TOOLTIP_RECALCULATION";
      ChartUpdateType2[ChartUpdateType2["SCENE_RENDER"] = 5] = "SCENE_RENDER";
      ChartUpdateType2[ChartUpdateType2["NONE"] = 6] = "NONE";
    })(ChartUpdateType || (ChartUpdateType = {}));
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/gridLayout.js
function gridLayout(_a5) {
  var orientation = _a5.orientation, bboxes = _a5.bboxes, maxHeight = _a5.maxHeight, maxWidth = _a5.maxWidth, _b2 = _a5.itemPaddingY, itemPaddingY = _b2 === void 0 ? 0 : _b2, _c2 = _a5.itemPaddingX, itemPaddingX = _c2 === void 0 ? 0 : _c2, _d2 = _a5.forceResult, forceResult = _d2 === void 0 ? false : _d2;
  var horizontal = orientation === "horizontal";
  var primary = {
    max: horizontal ? maxWidth : maxHeight,
    fn: horizontal ? function(b) {
      return b.width;
    } : function(b) {
      return b.height;
    },
    padding: horizontal ? itemPaddingX : itemPaddingY
  };
  var secondary = {
    max: !horizontal ? maxWidth : maxHeight,
    fn: !horizontal ? function(b) {
      return b.width;
    } : function(b) {
      return b.height;
    },
    padding: !horizontal ? itemPaddingX : itemPaddingY
  };
  var processedBBoxCount = 0;
  var rawPages = [];
  while (processedBBoxCount < bboxes.length) {
    var unprocessedBBoxes = bboxes.slice(processedBBoxCount);
    var result = processBBoxes(unprocessedBBoxes, processedBBoxCount, primary, secondary, forceResult);
    if (!result) {
      return;
    }
    processedBBoxCount += result.processedBBoxCount;
    rawPages.push(result.pageIndices);
  }
  return buildPages(rawPages, orientation, bboxes, itemPaddingY, itemPaddingX);
}
function processBBoxes(bboxes, indexOffset, primary, secondary, forceResult) {
  var minGuess = 1;
  var startingGuess = estimateStartingGuess(bboxes, primary);
  if (startingGuess < minGuess) {
    if (!forceResult) {
      return void 0;
    }
    startingGuess = minGuess;
  }
  for (var guess = startingGuess; guess >= minGuess; guess--) {
    var pageIndices = calculatePage(bboxes, indexOffset, guess, primary, secondary, forceResult);
    if (pageIndices == null && guess <= minGuess) {
      return void 0;
    }
    if (pageIndices == null) {
      continue;
    }
    if (typeof pageIndices === "number") {
      if (pageIndices <= minGuess) {
        return void 0;
      }
      guess = pageIndices < guess && pageIndices > minGuess ? pageIndices : guess;
      continue;
    }
    var processedBBoxCount = pageIndices.length * pageIndices[0].length;
    return { processedBBoxCount, pageIndices };
  }
}
function calculatePage(bboxes, indexOffset, primaryCount, primary, secondary, forceResult) {
  var _a5;
  var result = [];
  var sumSecondary = 0;
  var currentMaxSecondary = 0;
  var currentPrimaryIndices = [];
  var maxPrimaryValues = [];
  for (var bboxIndex = 0; bboxIndex < bboxes.length; bboxIndex++) {
    var primaryValueIdx = (bboxIndex + primaryCount) % primaryCount;
    if (primaryValueIdx === 0) {
      sumSecondary += currentMaxSecondary;
      currentMaxSecondary = 0;
      if (currentPrimaryIndices.length > 0) {
        result.push(currentPrimaryIndices);
      }
      currentPrimaryIndices = [];
    }
    var primaryValue = primary.fn(bboxes[bboxIndex]) + primary.padding;
    maxPrimaryValues[primaryValueIdx] = Math.max((_a5 = maxPrimaryValues[primaryValueIdx]) !== null && _a5 !== void 0 ? _a5 : 0, primaryValue);
    currentMaxSecondary = Math.max(currentMaxSecondary, secondary.fn(bboxes[bboxIndex]) + secondary.padding);
    var currentSecondaryDimension = sumSecondary + currentMaxSecondary;
    var returnResult = !forceResult || result.length > 0;
    if (currentSecondaryDimension > secondary.max && returnResult) {
      currentPrimaryIndices = [];
      break;
    }
    var sumPrimary = maxPrimaryValues.reduce(function(sum, next) {
      return sum + next;
    }, 0);
    if (sumPrimary > primary.max && !forceResult) {
      if (maxPrimaryValues.length < primaryCount) {
        return maxPrimaryValues.length;
      }
      return void 0;
    }
    currentPrimaryIndices.push(bboxIndex + indexOffset);
  }
  if (currentPrimaryIndices.length > 0) {
    result.push(currentPrimaryIndices);
  }
  return result.length > 0 ? result : void 0;
}
function buildPages(rawPages, orientation, bboxes, itemPaddingY, itemPaddingX) {
  var maxPageWidth = 0;
  var maxPageHeight = 0;
  var pages = rawPages.map(function(indices) {
    if (orientation === "horizontal") {
      indices = transpose(indices);
    }
    var endIndex = 0;
    var columns = indices.map(function(colIndices) {
      var colBBoxes = colIndices.map(function(bboxIndex) {
        endIndex = Math.max(bboxIndex, endIndex);
        return bboxes[bboxIndex];
      });
      var columnHeight = 0;
      var columnWidth = 0;
      colBBoxes.forEach(function(bbox) {
        columnHeight += bbox.height + itemPaddingY;
        columnWidth = Math.max(columnWidth, bbox.width + itemPaddingX);
      });
      return {
        indices: colIndices,
        bboxes: colBBoxes,
        columnHeight,
        columnWidth
      };
    });
    var pageWidth = 0;
    var pageHeight = 0;
    columns.forEach(function(column) {
      pageWidth += column.columnWidth;
      pageHeight = Math.max(pageHeight, column.columnHeight);
    });
    maxPageWidth = Math.max(pageWidth, maxPageWidth);
    maxPageHeight = Math.max(pageHeight, maxPageHeight);
    return {
      columns,
      startIndex: indices[0][0],
      endIndex,
      pageWidth,
      pageHeight
    };
  });
  return { pages, maxPageWidth, maxPageHeight };
}
function transpose(data) {
  var e_1, _a5;
  var result = [];
  try {
    for (var _b2 = __values10(data[0]), _c2 = _b2.next(); !_c2.done; _c2 = _b2.next()) {
      var _ = _c2.value;
      result.push([]);
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_c2 && !_c2.done && (_a5 = _b2.return))
        _a5.call(_b2);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  data.forEach(function(innerData, dataIdx) {
    innerData.forEach(function(item, itemIdx) {
      result[itemIdx][dataIdx] = item;
    });
  });
  return result;
}
function estimateStartingGuess(bboxes, primary) {
  var n = bboxes.length;
  var primarySum = 0;
  for (var bboxIndex = 0; bboxIndex < n; bboxIndex++) {
    primarySum += primary.fn(bboxes[bboxIndex]) + primary.padding;
    if (primarySum > primary.max) {
      var ratio = n / bboxIndex;
      if (ratio < 2) {
        return Math.ceil(n / 2);
      }
      return bboxIndex;
    }
  }
  return n;
}
var __values10;
var init_gridLayout = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/gridLayout.js"() {
    __values10 = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/pagination/pagination.js
var __decorate11, PaginationLabel, PaginationMarkerStyle, PaginationMarker, Pagination;
var init_pagination = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/pagination/pagination.js"() {
    init_group();
    init_triangle();
    init_text();
    init_hdpiCanvas();
    init_util();
    init_id();
    init_chartUpdateType();
    init_validation();
    __decorate11 = function(decorators, target2, key2, desc) {
      var c = arguments.length, r = c < 3 ? target2 : desc === null ? desc = Object.getOwnPropertyDescriptor(target2, key2) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target2, key2, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target2, key2, r) : d(target2, key2)) || r;
      return c > 3 && r && Object.defineProperty(target2, key2, r), r;
    };
    PaginationLabel = /** @class */
    function() {
      function PaginationLabel2() {
        this.color = "black";
        this.fontStyle = void 0;
        this.fontWeight = void 0;
        this.fontSize = 12;
        this.fontFamily = "Verdana, sans-serif";
      }
      __decorate11([
        Validate(COLOR_STRING)
      ], PaginationLabel2.prototype, "color", void 0);
      __decorate11([
        Validate(OPT_FONT_STYLE)
      ], PaginationLabel2.prototype, "fontStyle", void 0);
      __decorate11([
        Validate(OPT_FONT_WEIGHT)
      ], PaginationLabel2.prototype, "fontWeight", void 0);
      __decorate11([
        Validate(NUMBER(0))
      ], PaginationLabel2.prototype, "fontSize", void 0);
      __decorate11([
        Validate(STRING)
      ], PaginationLabel2.prototype, "fontFamily", void 0);
      return PaginationLabel2;
    }();
    PaginationMarkerStyle = /** @class */
    function() {
      function PaginationMarkerStyle2() {
        this.size = 15;
        this.fill = void 0;
        this.fillOpacity = void 0;
        this.stroke = void 0;
        this.strokeWidth = 1;
        this.strokeOpacity = 1;
      }
      __decorate11([
        Validate(NUMBER(0))
      ], PaginationMarkerStyle2.prototype, "size", void 0);
      __decorate11([
        Validate(OPT_COLOR_STRING)
      ], PaginationMarkerStyle2.prototype, "fill", void 0);
      __decorate11([
        Validate(OPT_NUMBER(0, 1))
      ], PaginationMarkerStyle2.prototype, "fillOpacity", void 0);
      __decorate11([
        Validate(OPT_COLOR_STRING)
      ], PaginationMarkerStyle2.prototype, "stroke", void 0);
      __decorate11([
        Validate(NUMBER(0))
      ], PaginationMarkerStyle2.prototype, "strokeWidth", void 0);
      __decorate11([
        Validate(NUMBER(0, 1))
      ], PaginationMarkerStyle2.prototype, "strokeOpacity", void 0);
      return PaginationMarkerStyle2;
    }();
    PaginationMarker = /** @class */
    function() {
      function PaginationMarker2() {
        this.size = 15;
        this._shape = Triangle;
        this.padding = 8;
      }
      Object.defineProperty(PaginationMarker2.prototype, "shape", {
        get: function() {
          return this._shape;
        },
        set: function(value) {
          var _a5;
          this._shape = value;
          (_a5 = this.parent) === null || _a5 === void 0 ? void 0 : _a5.onMarkerShapeChange();
        },
        enumerable: false,
        configurable: true
      });
      __decorate11([
        Validate(NUMBER(0))
      ], PaginationMarker2.prototype, "size", void 0);
      __decorate11([
        Validate(NUMBER(0))
      ], PaginationMarker2.prototype, "padding", void 0);
      return PaginationMarker2;
    }();
    Pagination = /** @class */
    function() {
      function Pagination2(chartUpdateCallback, pageUpdateCallback, interactionManager, cursorManager) {
        var _this = this;
        this.chartUpdateCallback = chartUpdateCallback;
        this.pageUpdateCallback = pageUpdateCallback;
        this.interactionManager = interactionManager;
        this.cursorManager = cursorManager;
        this.id = createId(this);
        this.group = new Group({ name: "pagination" });
        this.labelNode = new Text();
        this.marker = new PaginationMarker();
        this.activeStyle = new PaginationMarkerStyle();
        this.inactiveStyle = new PaginationMarkerStyle();
        this.highlightStyle = new PaginationMarkerStyle();
        this.label = new PaginationLabel();
        this.totalPages = 0;
        this.currentPage = 0;
        this.nextButtonDisabled = false;
        this.previousButtonDisabled = false;
        this._visible = true;
        this._enabled = true;
        this._orientation = "vertical";
        this._nextButton = new Triangle();
        this._previousButton = new Triangle();
        var labelNode = this.labelNode;
        labelNode.textBaseline = "middle";
        labelNode.fontSize = 12;
        labelNode.fontFamily = "Verdana, sans-serif";
        labelNode.fill = "black";
        labelNode.y = HdpiCanvas.has.textMetrics ? 1 : 0;
        this.group.append([this.nextButton, this.previousButton, labelNode]);
        this.interactionManager.addListener("click", function(event) {
          return _this.onPaginationClick(event);
        });
        this.interactionManager.addListener("hover", function(event) {
          return _this.onPaginationMouseMove(event);
        });
        this.marker.parent = this;
        this.update();
        this.updateMarkers();
      }
      Object.defineProperty(Pagination2.prototype, "visible", {
        get: function() {
          return this._visible;
        },
        set: function(value) {
          this._visible = value;
          this.updateGroupVisibility();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Pagination2.prototype, "enabled", {
        get: function() {
          return this._enabled;
        },
        set: function(value) {
          this._enabled = value;
          this.updateGroupVisibility();
        },
        enumerable: false,
        configurable: true
      });
      Pagination2.prototype.updateGroupVisibility = function() {
        this.group.visible = this.enabled && this.visible;
      };
      Object.defineProperty(Pagination2.prototype, "orientation", {
        get: function() {
          return this._orientation;
        },
        set: function(value) {
          this._orientation = value;
          switch (value) {
            case "horizontal": {
              this.previousButton.rotation = -Math.PI / 2;
              this.nextButton.rotation = Math.PI / 2;
              break;
            }
            case "vertical":
            default: {
              this.previousButton.rotation = 0;
              this.nextButton.rotation = Math.PI;
            }
          }
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Pagination2.prototype, "translationX", {
        get: function() {
          return this.group.translationX;
        },
        set: function(value) {
          this.group.translationX = value;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Pagination2.prototype, "translationY", {
        get: function() {
          return this.group.translationY;
        },
        set: function(value) {
          this.group.translationY = value;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Pagination2.prototype, "nextButton", {
        get: function() {
          return this._nextButton;
        },
        set: function(value) {
          if (this._nextButton !== value) {
            this.group.removeChild(this._nextButton);
            this._nextButton = value;
            this.group.appendChild(value);
          }
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Pagination2.prototype, "previousButton", {
        get: function() {
          return this._previousButton;
        },
        set: function(value) {
          if (this._previousButton !== value) {
            this.group.removeChild(this._previousButton);
            this._previousButton = value;
            this.group.appendChild(value);
          }
        },
        enumerable: false,
        configurable: true
      });
      Pagination2.prototype.update = function() {
        this.updateLabel();
        this.updatePositions();
        this.enableOrDisableButtons();
      };
      Pagination2.prototype.updatePositions = function() {
        this.updateLabelPosition();
        this.updateNextButtonPosition();
      };
      Pagination2.prototype.updateLabelPosition = function() {
        var _a5 = this.marker, markerSize = _a5.size, markerPadding = _a5.padding;
        this.nextButton.size = markerSize;
        this.previousButton.size = markerSize;
        this.labelNode.x = markerSize / 2 + markerPadding;
      };
      Pagination2.prototype.updateNextButtonPosition = function() {
        var labelBBox = this.labelNode.computeBBox();
        this.nextButton.translationX = labelBBox.x + labelBBox.width + this.marker.size / 2 + this.marker.padding;
      };
      Pagination2.prototype.updateLabel = function() {
        var _a5 = this, currentPage = _a5.currentPage, pages = _a5.totalPages, labelNode = _a5.labelNode, _b2 = _a5.label, color = _b2.color, fontStyle = _b2.fontStyle, fontWeight = _b2.fontWeight, fontSize = _b2.fontSize, fontFamily = _b2.fontFamily;
        labelNode.text = currentPage + 1 + " / " + pages;
        labelNode.fill = color;
        labelNode.fontStyle = fontStyle;
        labelNode.fontWeight = fontWeight;
        labelNode.fontSize = fontSize;
        labelNode.fontFamily = fontFamily;
      };
      Pagination2.prototype.updateMarkers = function() {
        var _a5 = this, nextButton = _a5.nextButton, previousButton = _a5.previousButton, nextButtonDisabled = _a5.nextButtonDisabled, previousButtonDisabled = _a5.previousButtonDisabled, activeStyle = _a5.activeStyle, inactiveStyle = _a5.inactiveStyle, highlightStyle = _a5.highlightStyle, highlightActive = _a5.highlightActive;
        var buttonStyle = function(button, disabled) {
          if (disabled) {
            return inactiveStyle;
          } else if (button === highlightActive) {
            return highlightStyle;
          }
          return activeStyle;
        };
        this.updateMarker(nextButton, buttonStyle("next", nextButtonDisabled));
        this.updateMarker(previousButton, buttonStyle("previous", previousButtonDisabled));
      };
      Pagination2.prototype.updateMarker = function(marker, style) {
        var _a5;
        var size = this.marker.size;
        marker.size = size;
        marker.fill = style.fill;
        marker.fillOpacity = (_a5 = style.fillOpacity) !== null && _a5 !== void 0 ? _a5 : 1;
        marker.stroke = style.stroke;
        marker.strokeWidth = style.strokeWidth;
        marker.strokeOpacity = style.strokeOpacity;
      };
      Pagination2.prototype.enableOrDisableButtons = function() {
        var _a5 = this, currentPage = _a5.currentPage, totalPages = _a5.totalPages;
        var zeroPagesToDisplay = totalPages === 0;
        var onLastPage = currentPage === totalPages - 1;
        var onFirstPage = currentPage === 0;
        this.nextButtonDisabled = onLastPage || zeroPagesToDisplay;
        this.previousButtonDisabled = onFirstPage || zeroPagesToDisplay;
      };
      Pagination2.prototype.nextButtonContainsPoint = function(offsetX, offsetY) {
        return !this.nextButtonDisabled && this.nextButton.containsPoint(offsetX, offsetY);
      };
      Pagination2.prototype.previousButtonContainsPoint = function(offsetX, offsetY) {
        return !this.previousButtonDisabled && this.previousButton.containsPoint(offsetX, offsetY);
      };
      Pagination2.prototype.onPaginationClick = function(event) {
        var offsetX = event.offsetX, offsetY = event.offsetY;
        if (this.nextButtonContainsPoint(offsetX, offsetY)) {
          this.incrementPage();
          this.onPaginationChanged();
          event.consume();
        } else if (this.previousButtonContainsPoint(offsetX, offsetY)) {
          this.decrementPage();
          this.onPaginationChanged();
          event.consume();
        }
      };
      Pagination2.prototype.onPaginationMouseMove = function(event) {
        var offsetX = event.offsetX, offsetY = event.offsetY;
        if (this.nextButtonContainsPoint(offsetX, offsetY)) {
          this.cursorManager.updateCursor(this.id, "pointer");
          this.highlightActive = "next";
        } else if (this.previousButtonContainsPoint(offsetX, offsetY)) {
          this.cursorManager.updateCursor(this.id, "pointer");
          this.highlightActive = "previous";
        } else {
          this.cursorManager.updateCursor(this.id);
          this.highlightActive = void 0;
        }
        this.updateMarkers();
        this.chartUpdateCallback(ChartUpdateType.SCENE_RENDER);
      };
      Pagination2.prototype.onPaginationChanged = function() {
        this.pageUpdateCallback(this.currentPage);
      };
      Pagination2.prototype.incrementPage = function() {
        this.currentPage = Math.min(this.currentPage + 1, this.totalPages - 1);
      };
      Pagination2.prototype.decrementPage = function() {
        this.currentPage = Math.max(this.currentPage - 1, 0);
      };
      Pagination2.prototype.onMarkerShapeChange = function() {
        var Marker2 = getMarker(this.marker.shape || Triangle);
        this.previousButton = new Marker2();
        this.nextButton = new Marker2();
        this.updatePositions();
        this.updateMarkers();
        this.chartUpdateCallback(ChartUpdateType.SCENE_RENDER);
      };
      Pagination2.prototype.attachPagination = function(node) {
        node.append(this.group);
      };
      Pagination2.prototype.computeBBox = function() {
        return this.group.computeBBox();
      };
      Pagination2.className = "Pagination";
      return Pagination2;
    }();
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/legend.js
var __decorate12, __read9, __spread6, __values11, ORIENTATIONS, OPT_ORIENTATION, LegendLabel, LegendMarker, LegendItem, LegendListeners, Legend;
var init_legend = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/legend.js"() {
    init_node();
    init_group();
    init_selection();
    init_markerLabel();
    init_bbox();
    init_text();
    init_util();
    init_id();
    init_hdpiCanvas();
    init_validation();
    init_layers();
    init_chartUpdateType();
    init_gridLayout();
    init_pagination();
    init_tooltip();
    init_logger();
    __decorate12 = function(decorators, target2, key2, desc) {
      var c = arguments.length, r = c < 3 ? target2 : desc === null ? desc = Object.getOwnPropertyDescriptor(target2, key2) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target2, key2, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target2, key2, r) : d(target2, key2)) || r;
      return c > 3 && r && Object.defineProperty(target2, key2, r), r;
    };
    __read9 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread6 = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read9(arguments[i]));
      return ar;
    };
    __values11 = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    ORIENTATIONS = ["horizontal", "vertical"];
    OPT_ORIENTATION = predicateWithMessage(function(v, ctx) {
      return OPTIONAL(v, ctx, function(v2) {
        return ORIENTATIONS.includes(v2);
      });
    }, "expecting an orientation keyword such as 'horizontal' or 'vertical'");
    LegendLabel = /** @class */
    function() {
      function LegendLabel2() {
        this.maxLength = void 0;
        this.color = "black";
        this.fontStyle = void 0;
        this.fontWeight = void 0;
        this.fontSize = 12;
        this.fontFamily = "Verdana, sans-serif";
        this.formatter = void 0;
      }
      LegendLabel2.prototype.getFont = function() {
        return getFont(this.fontSize, this.fontFamily, this.fontStyle, this.fontWeight);
      };
      __decorate12([
        Validate(OPT_NUMBER(0))
      ], LegendLabel2.prototype, "maxLength", void 0);
      __decorate12([
        Validate(COLOR_STRING)
      ], LegendLabel2.prototype, "color", void 0);
      __decorate12([
        Validate(OPT_FONT_STYLE)
      ], LegendLabel2.prototype, "fontStyle", void 0);
      __decorate12([
        Validate(OPT_FONT_WEIGHT)
      ], LegendLabel2.prototype, "fontWeight", void 0);
      __decorate12([
        Validate(NUMBER(0))
      ], LegendLabel2.prototype, "fontSize", void 0);
      __decorate12([
        Validate(STRING)
      ], LegendLabel2.prototype, "fontFamily", void 0);
      __decorate12([
        Validate(OPT_FUNCTION)
      ], LegendLabel2.prototype, "formatter", void 0);
      return LegendLabel2;
    }();
    LegendMarker = /** @class */
    function() {
      function LegendMarker2() {
        this.size = 15;
        this._shape = void 0;
        this.padding = 8;
        this.strokeWidth = 1;
      }
      Object.defineProperty(LegendMarker2.prototype, "shape", {
        get: function() {
          return this._shape;
        },
        set: function(value) {
          var _a5;
          this._shape = value;
          (_a5 = this.parent) === null || _a5 === void 0 ? void 0 : _a5.onMarkerShapeChange();
        },
        enumerable: false,
        configurable: true
      });
      __decorate12([
        Validate(NUMBER(0))
      ], LegendMarker2.prototype, "size", void 0);
      __decorate12([
        Validate(NUMBER(0))
      ], LegendMarker2.prototype, "padding", void 0);
      __decorate12([
        Validate(NUMBER(0))
      ], LegendMarker2.prototype, "strokeWidth", void 0);
      return LegendMarker2;
    }();
    LegendItem = /** @class */
    function() {
      function LegendItem2() {
        this.marker = new LegendMarker();
        this.label = new LegendLabel();
        this.maxWidth = void 0;
        this.paddingX = 16;
        this.paddingY = 8;
        this.toggleSeriesVisible = true;
      }
      __decorate12([
        Validate(OPT_NUMBER(0))
      ], LegendItem2.prototype, "maxWidth", void 0);
      __decorate12([
        Validate(NUMBER(0))
      ], LegendItem2.prototype, "paddingX", void 0);
      __decorate12([
        Validate(NUMBER(0))
      ], LegendItem2.prototype, "paddingY", void 0);
      __decorate12([
        Validate(BOOLEAN)
      ], LegendItem2.prototype, "toggleSeriesVisible", void 0);
      return LegendItem2;
    }();
    LegendListeners = /** @class */
    function() {
      function LegendListeners2() {
        this.legendItemClick = void 0;
        this.legendItemDoubleClick = void 0;
      }
      __decorate12([
        Validate(OPT_FUNCTION)
      ], LegendListeners2.prototype, "legendItemClick", void 0);
      return LegendListeners2;
    }();
    Legend = /** @class */
    function() {
      function Legend2(chart, interactionManager, cursorManager, highlightManager, tooltipManager, layoutService) {
        var _a5;
        var _this = this;
        this.chart = chart;
        this.interactionManager = interactionManager;
        this.cursorManager = cursorManager;
        this.highlightManager = highlightManager;
        this.tooltipManager = tooltipManager;
        this.layoutService = layoutService;
        this.id = createId(this);
        this.group = new Group({ name: "legend", layer: true, zIndex: Layers.LEGEND_ZINDEX });
        this.itemSelection = Selection.select(this.group, MarkerLabel);
        this.oldSize = [0, 0];
        this.pages = [];
        this.maxPageSize = [0, 0];
        this.paginationTrackingIndex = 0;
        this.item = new LegendItem();
        this.listeners = new LegendListeners();
        this.truncatedItems = /* @__PURE__ */ new Set();
        this._data = [];
        this._enabled = true;
        this.position = "right";
        this.maxWidth = void 0;
        this.maxHeight = void 0;
        this.reverseOrder = void 0;
        this.destroyFns = [];
        this.spacing = 20;
        this.characterWidths = /* @__PURE__ */ new Map();
        this.size = [0, 0];
        this._visible = true;
        this.item.marker.parent = this;
        this.pagination = new Pagination(function(type2) {
          return _this.chart.update(type2);
        }, function(page) {
          return _this.updatePageNumber(page);
        }, this.interactionManager, this.cursorManager);
        this.pagination.attachPagination(this.group);
        this.item.marker.parent = this;
        var interactionListeners = [
          this.interactionManager.addListener("click", function(e) {
            return _this.checkLegendClick(e);
          }),
          this.interactionManager.addListener("dblclick", function(e) {
            return _this.checkLegendDoubleClick(e);
          }),
          this.interactionManager.addListener("hover", function(e) {
            return _this.handleLegendMouseMove(e);
          })
        ];
        var layoutListeners = [
          this.layoutService.addListener("start-layout", function(e) {
            return _this.positionLegend(e.shrinkRect);
          })
        ];
        (_a5 = this.destroyFns).push.apply(_a5, __spread6(interactionListeners.map(function(s) {
          return function() {
            return _this.interactionManager.removeListener(s);
          };
        }), layoutListeners.map(function(s) {
          return function() {
            return _this.layoutService.removeListener(s);
          };
        })));
      }
      Object.defineProperty(Legend2.prototype, "translationX", {
        get: function() {
          return this.group.translationX;
        },
        set: function(value) {
          this.group.translationX = value;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Legend2.prototype, "translationY", {
        get: function() {
          return this.group.translationY;
        },
        set: function(value) {
          this.group.translationY = value;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Legend2.prototype, "data", {
        get: function() {
          return this._data;
        },
        set: function(value) {
          this._data = value;
          this.updateGroupVisibility();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Legend2.prototype, "enabled", {
        get: function() {
          return this._enabled;
        },
        set: function(value) {
          this._enabled = value;
          this.updateGroupVisibility();
        },
        enumerable: false,
        configurable: true
      });
      Legend2.prototype.getOrientation = function() {
        if (this.orientation !== void 0) {
          return this.orientation;
        }
        switch (this.position) {
          case "right":
          case "left":
            return "vertical";
          case "bottom":
          case "top":
            return "horizontal";
        }
      };
      Legend2.prototype.destroy = function() {
        this.destroyFns.forEach(function(f) {
          return f();
        });
      };
      Legend2.prototype.onMarkerShapeChange = function() {
        this.itemSelection.clear();
        this.group.markDirty(this.group, RedrawType.MINOR);
      };
      Legend2.prototype.getCharacterWidths = function(font) {
        var characterWidths = this.characterWidths;
        if (characterWidths.has(font)) {
          return characterWidths.get(font);
        }
        var cw = {
          "...": HdpiCanvas.getTextSize("...", font).width
        };
        characterWidths.set(font, cw);
        return cw;
      };
      Object.defineProperty(Legend2.prototype, "visible", {
        get: function() {
          return this._visible;
        },
        set: function(value) {
          this._visible = value;
          this.updateGroupVisibility();
        },
        enumerable: false,
        configurable: true
      });
      Legend2.prototype.updateGroupVisibility = function() {
        this.group.visible = this.enabled && this.visible && this.data.length > 0;
      };
      Legend2.prototype.attachLegend = function(node) {
        node.append(this.group);
      };
      Legend2.prototype.performLayout = function(width, height) {
        var _this = this;
        var _a5 = this.item, paddingX = _a5.paddingX, paddingY = _a5.paddingY, label = _a5.label, maxWidth = _a5.maxWidth, _b2 = _a5.marker, markerSize = _b2.size, markerPadding = _b2.padding, markerShape = _b2.shape, _c2 = _a5.label, _d2 = _c2.maxLength, maxLength = _d2 === void 0 ? Infinity : _d2, fontStyle = _c2.fontStyle, fontWeight = _c2.fontWeight, fontSize = _c2.fontSize, fontFamily = _c2.fontFamily;
        var data = __spread6(this.data);
        if (this.reverseOrder) {
          data.reverse();
        }
        this.itemSelection.update(data);
        var bboxes = [];
        var font = label.getFont();
        var itemMaxWidthPercentage = 0.8;
        var maxItemWidth = maxWidth !== null && maxWidth !== void 0 ? maxWidth : width * itemMaxWidthPercentage;
        var paddedMarkerWidth = markerSize + markerPadding + paddingX;
        this.itemSelection.each(function(markerLabel, datum) {
          var _a6;
          var Marker2 = getMarker(markerShape || datum.marker.shape);
          if (!(markerLabel.marker && markerLabel.marker instanceof Marker2)) {
            markerLabel.marker = new Marker2();
          }
          markerLabel.markerSize = markerSize;
          markerLabel.spacing = markerPadding;
          markerLabel.fontStyle = fontStyle;
          markerLabel.fontWeight = fontWeight;
          markerLabel.fontSize = fontSize;
          markerLabel.fontFamily = fontFamily;
          var id = datum.itemId || datum.id;
          var text = ((_a6 = datum.label.text) !== null && _a6 !== void 0 ? _a6 : "<unknown>").replace(/\r?\n/g, " ");
          markerLabel.text = _this.truncate(text, maxLength, maxItemWidth, paddedMarkerWidth, font, id);
          bboxes.push(markerLabel.computeBBox());
        });
        width = Math.max(1, width);
        height = Math.max(1, height);
        if (!isFinite(width)) {
          return false;
        }
        var size = this.size;
        var oldSize = this.oldSize;
        size[0] = width;
        size[1] = height;
        if (size[0] !== oldSize[0] || size[1] !== oldSize[1]) {
          oldSize[0] = size[0];
          oldSize[1] = size[1];
        }
        var _e = this.updatePagination(bboxes, width, height), pages = _e.pages, maxPageHeight = _e.maxPageHeight, maxPageWidth = _e.maxPageWidth;
        this.pages = pages;
        this.maxPageSize = [maxPageWidth - paddingX, maxPageHeight - paddingY];
        var pageNumber = this.pagination.currentPage;
        var page = this.pages[pageNumber];
        if (this.pages.length < 1 || !page) {
          this.visible = false;
          return;
        }
        this.visible = true;
        this.updatePositions(pageNumber);
        this.update();
      };
      Legend2.prototype.truncate = function(text, maxCharLength, maxItemWidth, paddedMarkerWidth, font, id) {
        var e_1, _a5;
        var ellipsis = "...";
        var textChars = text.split("");
        var addEllipsis = false;
        if (text.length > maxCharLength) {
          text = "" + text.substring(0, maxCharLength);
          addEllipsis = true;
        }
        var labelWidth = Math.floor(paddedMarkerWidth + HdpiCanvas.getTextSize(text, font).width);
        if (labelWidth > maxItemWidth) {
          var truncatedText = "";
          var characterWidths = this.getCharacterWidths(font);
          var cumulativeWidth = paddedMarkerWidth + characterWidths[ellipsis];
          try {
            for (var textChars_1 = __values11(textChars), textChars_1_1 = textChars_1.next(); !textChars_1_1.done; textChars_1_1 = textChars_1.next()) {
              var char = textChars_1_1.value;
              if (!characterWidths[char]) {
                characterWidths[char] = HdpiCanvas.getTextSize(char, font).width;
              }
              cumulativeWidth += characterWidths[char];
              if (cumulativeWidth > maxItemWidth) {
                break;
              }
              truncatedText += char;
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (textChars_1_1 && !textChars_1_1.done && (_a5 = textChars_1.return))
                _a5.call(textChars_1);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
          text = truncatedText;
          addEllipsis = true;
        }
        if (addEllipsis) {
          text += ellipsis;
          this.truncatedItems.add(id);
        } else {
          this.truncatedItems.delete(id);
        }
        return text;
      };
      Legend2.prototype.updatePagination = function(bboxes, width, height) {
        var orientation = this.getOrientation();
        var trackingIndex = Math.min(this.paginationTrackingIndex, bboxes.length);
        this.pagination.orientation = orientation;
        this.pagination.translationX = 0;
        this.pagination.translationY = 0;
        var _a5 = this.calculatePagination(bboxes, width, height), pages = _a5.pages, maxPageHeight = _a5.maxPageHeight, maxPageWidth = _a5.maxPageWidth, paginationBBox = _a5.paginationBBox, paginationVertical = _a5.paginationVertical;
        var newCurrentPage = pages.findIndex(function(p) {
          return p.endIndex >= trackingIndex;
        });
        this.pagination.currentPage = Math.min(Math.max(newCurrentPage, 0), pages.length - 1);
        var _b2 = this.item, itemPaddingX = _b2.paddingX, itemPaddingY = _b2.paddingY;
        var paginationComponentPadding = 8;
        var legendItemsWidth = maxPageWidth - itemPaddingX;
        var legendItemsHeight = maxPageHeight - itemPaddingY;
        var paginationX = 0;
        var paginationY = -paginationBBox.y - this.item.marker.size / 2;
        if (paginationVertical) {
          paginationY += legendItemsHeight + paginationComponentPadding;
        } else {
          paginationX += -paginationBBox.x + legendItemsWidth + paginationComponentPadding;
          paginationY += (legendItemsHeight - paginationBBox.height) / 2;
        }
        this.pagination.translationX = paginationX;
        this.pagination.translationY = paginationY;
        this.pagination.update();
        this.pagination.updateMarkers();
        return {
          maxPageHeight,
          maxPageWidth,
          pages
        };
      };
      Legend2.prototype.calculatePagination = function(bboxes, width, height) {
        var _a5, _b2, _c2;
        var _d2 = this.item, itemPaddingX = _d2.paddingX, itemPaddingY = _d2.paddingY;
        var orientation = this.getOrientation();
        var paginationVertical = ["left", "right"].includes(this.position);
        var paginationBBox = this.pagination.computeBBox();
        var lastPassPaginationBBox = new BBox(0, 0, 0, 0);
        var pages = [];
        var maxPageWidth = 0;
        var maxPageHeight = 0;
        var count = 0;
        var stableOutput = function(lastPassPaginationBBox2) {
          var width2 = lastPassPaginationBBox2.width, height2 = lastPassPaginationBBox2.height;
          return width2 === paginationBBox.width && height2 === paginationBBox.height;
        };
        var forceResult = this.maxWidth !== void 0 || this.maxHeight !== void 0;
        do {
          if (count++ > 10) {
            Logger.warn("unable to find stable legend layout.");
            break;
          }
          paginationBBox = lastPassPaginationBBox;
          var maxWidth = width - (paginationVertical ? 0 : paginationBBox.width);
          var maxHeight = height - (paginationVertical ? paginationBBox.height : 0);
          var layout = gridLayout({
            orientation,
            bboxes,
            maxHeight,
            maxWidth,
            itemPaddingY,
            itemPaddingX,
            forceResult
          });
          pages = (_a5 = layout === null || layout === void 0 ? void 0 : layout.pages) !== null && _a5 !== void 0 ? _a5 : [];
          maxPageWidth = (_b2 = layout === null || layout === void 0 ? void 0 : layout.maxPageWidth) !== null && _b2 !== void 0 ? _b2 : 0;
          maxPageHeight = (_c2 = layout === null || layout === void 0 ? void 0 : layout.maxPageHeight) !== null && _c2 !== void 0 ? _c2 : 0;
          var totalPages = pages.length;
          this.pagination.visible = totalPages > 1;
          this.pagination.totalPages = totalPages;
          this.pagination.update();
          lastPassPaginationBBox = this.pagination.computeBBox();
          if (!this.pagination.visible) {
            break;
          }
        } while (!stableOutput(lastPassPaginationBBox));
        return { maxPageWidth, maxPageHeight, pages, paginationBBox, paginationVertical };
      };
      Legend2.prototype.updatePositions = function(pageNumber) {
        if (pageNumber === void 0) {
          pageNumber = 0;
        }
        var _a5 = this, paddingY = _a5.item.paddingY, itemSelection = _a5.itemSelection, pages = _a5.pages;
        if (pages.length < 1 || !pages[pageNumber]) {
          return;
        }
        var _b2 = pages[pageNumber], columns = _b2.columns, visibleStart = _b2.startIndex, visibleEnd = _b2.endIndex;
        var x = 0;
        var y = 0;
        var columnCount = columns.length;
        var rowCount = columns[0].indices.length;
        var horizontal = this.getOrientation() === "horizontal";
        var itemHeight = columns[0].bboxes[0].height + paddingY;
        var rowSumColumnWidths = [];
        itemSelection.each(function(markerLabel, _, i) {
          var _a6, _b3;
          if (i < visibleStart || i > visibleEnd) {
            markerLabel.visible = false;
            return;
          }
          var pageIndex = i - visibleStart;
          var columnIndex = 0;
          var rowIndex = 0;
          if (horizontal) {
            columnIndex = pageIndex % columnCount;
            rowIndex = Math.floor(pageIndex / columnCount);
          } else {
            columnIndex = Math.floor(pageIndex / rowCount);
            rowIndex = pageIndex % rowCount;
          }
          markerLabel.visible = true;
          var column = columns[columnIndex];
          if (!column) {
            return;
          }
          y = itemHeight * rowIndex;
          x = (_a6 = rowSumColumnWidths[rowIndex]) !== null && _a6 !== void 0 ? _a6 : 0;
          rowSumColumnWidths[rowIndex] = ((_b3 = rowSumColumnWidths[rowIndex]) !== null && _b3 !== void 0 ? _b3 : 0) + column.columnWidth;
          markerLabel.translationX = Math.floor(x);
          markerLabel.translationY = Math.floor(y);
        });
      };
      Legend2.prototype.updatePageNumber = function(pageNumber) {
        var pages = this.pages;
        var _a5 = pages[pageNumber], startIndex = _a5.startIndex, endIndex = _a5.endIndex;
        if (startIndex === 0) {
          this.paginationTrackingIndex = 0;
        } else if (pageNumber === pages.length - 1) {
          this.paginationTrackingIndex = endIndex;
        } else {
          this.paginationTrackingIndex = Math.floor((startIndex + endIndex) / 2);
        }
        this.pagination.update();
        this.pagination.updateMarkers();
        this.updatePositions(pageNumber);
        this.chart.update(ChartUpdateType.SCENE_RENDER);
      };
      Legend2.prototype.update = function() {
        var _a5 = this.item, strokeWidth = _a5.marker.strokeWidth, color = _a5.label.color;
        this.itemSelection.each(function(markerLabel, datum) {
          var marker = datum.marker;
          markerLabel.markerFill = marker.fill;
          markerLabel.markerStroke = marker.stroke;
          markerLabel.markerStrokeWidth = strokeWidth;
          markerLabel.markerFillOpacity = marker.fillOpacity;
          markerLabel.markerStrokeOpacity = marker.strokeOpacity;
          markerLabel.opacity = datum.enabled ? 1 : 0.5;
          markerLabel.color = color;
        });
      };
      Legend2.prototype.getDatumForPoint = function(x, y) {
        var e_2, _a5;
        var visibleChildBBoxes = [];
        var closestLeftTop = { dist: Infinity, datum: void 0 };
        try {
          for (var _b2 = __values11(this.group.children), _c2 = _b2.next(); !_c2.done; _c2 = _b2.next()) {
            var child = _c2.value;
            if (!child.visible)
              continue;
            if (!(child instanceof MarkerLabel))
              continue;
            var childBBox = child.computeBBox();
            childBBox.grow(this.item.paddingX / 2, "horizontal");
            childBBox.grow(this.item.paddingY / 2, "vertical");
            if (childBBox.containsPoint(x, y)) {
              return child.datum;
            }
            var distX = x - childBBox.x - this.item.paddingX / 2;
            var distY = y - childBBox.y - this.item.paddingY / 2;
            var dist = Math.pow(distX, 2) + Math.pow(distY, 2);
            var toTheLeftTop = distX >= 0 && distY >= 0;
            if (toTheLeftTop && dist < closestLeftTop.dist) {
              closestLeftTop.dist = dist;
              closestLeftTop.datum = child.datum;
            }
            visibleChildBBoxes.push(childBBox);
          }
        } catch (e_2_1) {
          e_2 = { error: e_2_1 };
        } finally {
          try {
            if (_c2 && !_c2.done && (_a5 = _b2.return))
              _a5.call(_b2);
          } finally {
            if (e_2)
              throw e_2.error;
          }
        }
        var pageBBox = BBox.merge(visibleChildBBoxes);
        if (!pageBBox.containsPoint(x, y)) {
          return void 0;
        }
        return closestLeftTop.datum;
      };
      Legend2.prototype.computeBBox = function() {
        return this.group.computeBBox();
      };
      Legend2.prototype.computePagedBBox = function() {
        var actualBBox = this.group.computeBBox();
        if (this.pages.length <= 1) {
          return actualBBox;
        }
        var _a5 = __read9(this.maxPageSize, 2), maxPageWidth = _a5[0], maxPageHeight = _a5[1];
        actualBBox.height = Math.max(maxPageHeight, actualBBox.height);
        actualBBox.width = Math.max(maxPageWidth, actualBBox.width);
        return actualBBox;
      };
      Legend2.prototype.checkLegendClick = function(event) {
        var _a5 = this, legendItemClick = _a5.listeners.legendItemClick, chart = _a5.chart, highlightManager = _a5.highlightManager, toggleSeriesVisible = _a5.item.toggleSeriesVisible;
        var datum = this.getDatumForPoint(event.offsetX, event.offsetY);
        if (!datum) {
          return;
        }
        var id = datum.id, itemId = datum.itemId, enabled = datum.enabled;
        var series = chart.series.find(function(s) {
          return s.id === id;
        });
        if (!series) {
          return;
        }
        event.consume();
        var newEnabled = enabled;
        if (toggleSeriesVisible) {
          newEnabled = !enabled;
          chart.series.forEach(function(s) {
            if (s.id === series.id) {
              s.toggleSeriesItem(itemId, newEnabled);
            } else {
              s.toggleOtherSeriesItems(series, datum, newEnabled);
            }
          });
        }
        if (!newEnabled) {
          highlightManager.updateHighlight(this.id);
        } else {
          highlightManager.updateHighlight(this.id, {
            series,
            itemId,
            datum: void 0
          });
        }
        this.chart.update(ChartUpdateType.PROCESS_DATA, { forceNodeDataRefresh: true });
        legendItemClick === null || legendItemClick === void 0 ? void 0 : legendItemClick({ type: "click", enabled: newEnabled, itemId, seriesId: series.id });
      };
      Legend2.prototype.checkLegendDoubleClick = function(event) {
        var _a5, _b2;
        var _c2 = this, legendItemDoubleClick = _c2.listeners.legendItemDoubleClick, chart = _c2.chart, toggleSeriesVisible = _c2.item.toggleSeriesVisible;
        if (chart.mode === "integrated") {
          return;
        }
        var datum = this.getDatumForPoint(event.offsetX, event.offsetY);
        if (!datum) {
          return;
        }
        var id = datum.id, itemId = datum.itemId, seriesId = datum.seriesId;
        var series = chart.series.find(function(s) {
          return s.id === id;
        });
        if (!series) {
          return;
        }
        event.consume();
        if (toggleSeriesVisible) {
          var legendData = chart.series.reduce(function(ls, s) {
            return __spread6(ls, s.getLegendData());
          }, []);
          var visibleItemsCount = legendData.filter(function(d) {
            return d.enabled;
          }).length;
          var clickedItem = legendData.find(function(d) {
            return d.itemId === itemId && d.seriesId === seriesId;
          });
          var seriesItemCounts = legendData.reduce(function(acc, d) {
            var _a6;
            var _b3;
            (_a6 = acc[_b3 = d.seriesId]) !== null && _a6 !== void 0 ? _a6 : acc[_b3] = 0;
            acc[d.seriesId]++;
            return acc;
          }, {});
          var seriesItemEnabledCounts = legendData.reduce(function(acc, d) {
            var _a6;
            var _b3;
            if (!d.enabled)
              return acc;
            (_a6 = acc[_b3 = d.seriesId]) !== null && _a6 !== void 0 ? _a6 : acc[_b3] = 0;
            acc[d.seriesId]++;
            return acc;
          }, {});
          var eachSeriesHasSingleItem_1 = Object.values(seriesItemCounts).filter(function(c) {
            return c > 1;
          }).length === 0;
          var singleEnabledInEachSeries = Object.values(seriesItemEnabledCounts).filter(function(count) {
            return count > 1;
          }).length === 0;
          var singleSelectedWasNotClicked_1 = visibleItemsCount === 1 && ((_a5 = clickedItem === null || clickedItem === void 0 ? void 0 : clickedItem.enabled) !== null && _a5 !== void 0 ? _a5 : false);
          var singleEnabledInEachSeriesWasNotClicked_1 = singleEnabledInEachSeries && ((_b2 = clickedItem === null || clickedItem === void 0 ? void 0 : clickedItem.enabled) !== null && _b2 !== void 0 ? _b2 : false);
          chart.series.forEach(function(s) {
            var legendData2 = s.getLegendData();
            legendData2.forEach(function(d) {
              var wasClicked = d.itemId === itemId && d.seriesId === seriesId;
              var newEnabled = wasClicked || eachSeriesHasSingleItem_1 && singleSelectedWasNotClicked_1 || !eachSeriesHasSingleItem_1 && singleEnabledInEachSeriesWasNotClicked_1;
              s.toggleSeriesItem(d.itemId, newEnabled);
            });
            if (s.id !== series.id) {
              s.toggleOtherSeriesItems(series, datum, void 0, singleEnabledInEachSeriesWasNotClicked_1);
            }
          });
        }
        this.chart.update(ChartUpdateType.PROCESS_DATA, { forceNodeDataRefresh: true });
        legendItemDoubleClick === null || legendItemDoubleClick === void 0 ? void 0 : legendItemDoubleClick({ type: "dblclick", enabled: true, itemId, seriesId: series.id });
      };
      Legend2.prototype.handleLegendMouseMove = function(event) {
        var _a5 = this, enabled = _a5.enabled, toggleSeriesVisible = _a5.item.toggleSeriesVisible, listeners = _a5.listeners;
        if (!enabled) {
          return;
        }
        var legendBBox = this.computeBBox();
        var pageX = event.pageX, pageY = event.pageY, offsetX = event.offsetX, offsetY = event.offsetY;
        var pointerInsideLegend = this.group.visible && legendBBox.containsPoint(offsetX, offsetY);
        if (!pointerInsideLegend) {
          this.cursorManager.updateCursor(this.id);
          this.highlightManager.updateHighlight(this.id);
          this.tooltipManager.removeTooltip(this.id);
          return;
        }
        event.consume();
        var datum = this.getDatumForPoint(offsetX, offsetY);
        var pointerOverLegendDatum = pointerInsideLegend && datum !== void 0;
        if (!pointerOverLegendDatum) {
          this.cursorManager.updateCursor(this.id);
          this.highlightManager.updateHighlight(this.id);
          return;
        }
        var series = datum ? this.chart.series.find(function(series2) {
          return series2.id === (datum === null || datum === void 0 ? void 0 : datum.id);
        }) : void 0;
        if (datum && this.truncatedItems.has(datum.itemId || datum.id)) {
          this.tooltipManager.updateTooltip(this.id, { pageX, pageY, offsetX, offsetY, event }, toTooltipHtml({ content: datum.label.text }));
        } else {
          this.tooltipManager.removeTooltip(this.id);
        }
        if (toggleSeriesVisible || listeners.legendItemClick != null) {
          this.cursorManager.updateCursor(this.id, "pointer");
        }
        if ((datum === null || datum === void 0 ? void 0 : datum.enabled) && series) {
          this.highlightManager.updateHighlight(this.id, {
            series,
            itemId: datum === null || datum === void 0 ? void 0 : datum.itemId,
            datum: void 0
          });
        } else {
          this.highlightManager.updateHighlight(this.id);
        }
      };
      Legend2.prototype.positionLegend = function(shrinkRect) {
        var _this = this;
        var newShrinkRect = shrinkRect.clone();
        if (!this.enabled || !this.data.length) {
          return { shrinkRect: newShrinkRect };
        }
        var _a5 = __read9(this.calculateLegendDimensions(shrinkRect), 2), legendWidth = _a5[0], legendHeight = _a5[1];
        var translationX = 0;
        var translationY = 0;
        this.translationX = 0;
        this.translationY = 0;
        this.performLayout(legendWidth, legendHeight);
        var legendBBox = this.computePagedBBox();
        var calculateTranslationPerpendicularDimension = function() {
          switch (_this.position) {
            case "top":
              return 0;
            case "bottom":
              return shrinkRect.height - legendBBox.height;
            case "left":
              return 0;
            case "right":
            default:
              return shrinkRect.width - legendBBox.width;
          }
        };
        if (this.visible) {
          switch (this.position) {
            case "top":
            case "bottom":
              translationX = (shrinkRect.width - legendBBox.width) / 2;
              translationY = calculateTranslationPerpendicularDimension();
              newShrinkRect.shrink(legendBBox.height, this.position);
              break;
            case "left":
            case "right":
            default:
              translationX = calculateTranslationPerpendicularDimension();
              translationY = (shrinkRect.height - legendBBox.height) / 2;
              newShrinkRect.shrink(legendBBox.width, this.position);
          }
          this.translationX = Math.floor(-legendBBox.x + shrinkRect.x + translationX);
          this.translationY = Math.floor(-legendBBox.y + shrinkRect.y + translationY);
        }
        if (this.visible && this.enabled && this.data.length) {
          var legendPadding = this.spacing;
          newShrinkRect.shrink(legendPadding, this.position);
          var legendPositionedBBox = legendBBox.clone();
          legendPositionedBBox.x += this.translationX;
          legendPositionedBBox.y += this.translationY;
          this.tooltipManager.updateExclusiveRect(this.id, legendPositionedBBox);
        } else {
          this.tooltipManager.updateExclusiveRect(this.id);
        }
        return { shrinkRect: newShrinkRect };
      };
      Legend2.prototype.calculateLegendDimensions = function(shrinkRect) {
        var width = shrinkRect.width, height = shrinkRect.height;
        var aspectRatio = width / height;
        var maxCoefficient = 0.5;
        var minHeightCoefficient = 0.2;
        var minWidthCoefficient = 0.25;
        var legendWidth = 0;
        var legendHeight = 0;
        switch (this.position) {
          case "top":
          case "bottom":
            var heightCoefficient = aspectRatio < 1 ? Math.min(maxCoefficient, minHeightCoefficient * (1 / aspectRatio)) : minHeightCoefficient;
            legendWidth = this.maxWidth ? Math.min(this.maxWidth, width) : width;
            legendHeight = this.maxHeight ? Math.min(this.maxHeight, height) : Math.round(height * heightCoefficient);
            break;
          case "left":
          case "right":
          default:
            var widthCoefficient = aspectRatio > 1 ? Math.min(maxCoefficient, minWidthCoefficient * aspectRatio) : minWidthCoefficient;
            legendWidth = this.maxWidth ? Math.min(this.maxWidth, width) : Math.round(width * widthCoefficient);
            legendHeight = this.maxHeight ? Math.min(this.maxHeight, height) : height;
        }
        return [legendWidth, legendHeight];
      };
      Legend2.className = "Legend";
      __decorate12([
        Validate(BOOLEAN)
      ], Legend2.prototype, "_enabled", void 0);
      __decorate12([
        Validate(POSITION)
      ], Legend2.prototype, "position", void 0);
      __decorate12([
        Validate(OPT_NUMBER(0))
      ], Legend2.prototype, "maxWidth", void 0);
      __decorate12([
        Validate(OPT_NUMBER(0))
      ], Legend2.prototype, "maxHeight", void 0);
      __decorate12([
        Validate(OPT_BOOLEAN)
      ], Legend2.prototype, "reverseOrder", void 0);
      __decorate12([
        Validate(OPT_ORIENTATION)
      ], Legend2.prototype, "orientation", void 0);
      __decorate12([
        Validate(NUMBER(0))
      ], Legend2.prototype, "spacing", void 0);
      return Legend2;
    }();
  }
});

// node_modules/ag-charts-community/dist/esm/es5/util/sizeMonitor.js
var __values12, SizeMonitor;
var init_sizeMonitor = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/util/sizeMonitor.js"() {
    __values12 = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    SizeMonitor = /** @class */
    function() {
      function SizeMonitor2() {
      }
      SizeMonitor2.init = function() {
        var _this = this;
        var NativeResizeObserver = window.ResizeObserver;
        if (NativeResizeObserver) {
          this.resizeObserver = new NativeResizeObserver(function(entries) {
            var e_1, _a5;
            try {
              for (var entries_1 = __values12(entries), entries_1_1 = entries_1.next(); !entries_1_1.done; entries_1_1 = entries_1.next()) {
                var entry = entries_1_1.value;
                var _b2 = entry.contentRect, width = _b2.width, height = _b2.height;
                _this.checkSize(_this.elements.get(entry.target), entry.target, width, height);
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (entries_1_1 && !entries_1_1.done && (_a5 = entries_1.return))
                  _a5.call(entries_1);
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
          });
        } else {
          var step = function() {
            _this.elements.forEach(function(entry, element2) {
              _this.checkClientSize(element2, entry);
            });
          };
          window.setInterval(step, 100);
        }
        this.ready = true;
      };
      SizeMonitor2.checkSize = function(entry, element2, width, height) {
        if (entry) {
          if (!entry.size || width !== entry.size.width || height !== entry.size.height) {
            entry.size = { width, height };
            entry.cb(entry.size, element2);
          }
        }
      };
      SizeMonitor2.observe = function(element2, cb) {
        if (!this.ready) {
          this.init();
        }
        this.unobserve(element2);
        if (this.resizeObserver) {
          this.resizeObserver.observe(element2);
        }
        this.elements.set(element2, { cb });
        this.checkClientSize(element2, { cb });
      };
      SizeMonitor2.unobserve = function(element2) {
        if (this.resizeObserver) {
          this.resizeObserver.unobserve(element2);
        }
        this.elements.delete(element2);
      };
      SizeMonitor2.checkClientSize = function(element2, entry) {
        var width = element2.clientWidth ? element2.clientWidth : 0;
        var height = element2.clientHeight ? element2.clientHeight : 0;
        this.checkSize(entry, element2, width, height);
      };
      SizeMonitor2.elements = /* @__PURE__ */ new Map();
      SizeMonitor2.ready = false;
      return SizeMonitor2;
    }();
  }
});

// node_modules/ag-charts-community/dist/esm/es5/util/labelPlacement.js
function circleRectOverlap(c, x, y, w, h) {
  var edgeX = c.x < x ? x : c.x > x + w ? x + w : c.x;
  var edgeY = c.y < y ? y : c.y > y + h ? y + h : c.y;
  var dx = c.x - edgeX;
  var dy = c.y - edgeY;
  var d = Math.sqrt(dx * dx + dy * dy);
  return d <= c.size * 0.5;
}
function rectRectOverlap(r1, x2, y2, w2, h2) {
  var xOverlap = r1.x + r1.width > x2 && r1.x < x2 + w2;
  var yOverlap = r1.y + r1.height > y2 && r1.y < y2 + h2;
  return xOverlap && yOverlap;
}
function rectContainsRect(r1, r2x, r2y, r2w, r2h) {
  return r2x + r2w < r1.x + r1.width && r2x > r1.x && r2y > r1.y && r2y + r2h < r1.y + r1.height;
}
function isPointLabelDatum(x) {
  return x != null && typeof x.point === "object" && typeof x.label === "object";
}
function placeLabels(data, bounds, padding) {
  if (padding === void 0) {
    padding = 5;
  }
  var result = [];
  data = data.map(function(d) {
    return d.slice().sort(function(a, b) {
      return b.point.size - a.point.size;
    });
  });
  for (var j = 0; j < data.length; j++) {
    var labels = result[j] = [];
    var datum = data[j];
    if (!(datum && datum.length && datum[0].label)) {
      continue;
    }
    var _loop_1 = function(i2, ln2) {
      var d = datum[i2];
      var l = d.label;
      var r = d.point.size * 0.5;
      var x = d.point.x - l.width * 0.5;
      var y = d.point.y - r - l.height - padding;
      var width = l.width, height = l.height;
      var withinBounds = !bounds || rectContainsRect(bounds, x, y, width, height);
      if (!withinBounds) {
        return "continue";
      }
      var overlapPoints = data.some(function(datum2) {
        return datum2.some(function(d2) {
          return circleRectOverlap(d2.point, x, y, width, height);
        });
      });
      if (overlapPoints) {
        return "continue";
      }
      var overlapLabels = result.some(function(labels2) {
        return labels2.some(function(l2) {
          return rectRectOverlap(l2, x, y, width, height);
        });
      });
      if (overlapLabels) {
        return "continue";
      }
      labels.push({
        index: i2,
        text: l.text,
        x,
        y,
        width,
        height,
        datum: d
      });
    };
    for (var i = 0, ln = datum.length; i < ln; i++) {
      _loop_1(i, ln);
    }
  }
  return result;
}
function axisLabelsOverlap(data, padding) {
  var result = [];
  var _loop_2 = function(i2) {
    var datum = data[i2];
    var _a5 = datum.point, x = _a5.x, y = _a5.y, text = datum.label.text;
    var _b2 = datum.label, width = _b2.width, height = _b2.height;
    width += padding !== null && padding !== void 0 ? padding : 0;
    height += padding !== null && padding !== void 0 ? padding : 0;
    var overlapLabels = result.some(function(l) {
      var overlap = rectRectOverlap(l, x, y, width, height);
      return overlap;
    });
    if (overlapLabels) {
      return { value: true };
    }
    result.push({
      index: i2,
      text,
      x,
      y,
      width,
      height,
      datum
    });
  };
  for (var i = 0; i < data.length; i++) {
    var state_1 = _loop_2(i);
    if (typeof state_1 === "object")
      return state_1.value;
  }
  return false;
}
var init_labelPlacement = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/util/labelPlacement.js"() {
  }
});

// node_modules/ag-charts-community/dist/esm/es5/util/render.js
function debouncedAnimationFrame(cb) {
  return buildScheduler(function(cb2) {
    return requestAnimationFrame(cb2);
  }, cb);
}
function debouncedCallback(cb) {
  return buildScheduler(function(cb2) {
    return setTimeout(cb2, 0);
  }, cb);
}
function buildScheduler(scheduleFn, cb) {
  var scheduleCount = 0;
  var promiseRunning = false;
  var awaitingPromise;
  var awaitingDone;
  var busy = function() {
    return promiseRunning;
  };
  var done = function() {
    promiseRunning = false;
    awaitingDone === null || awaitingDone === void 0 ? void 0 : awaitingDone();
    awaitingDone = void 0;
    awaitingPromise = void 0;
    if (scheduleCount > 0) {
      scheduleFn(scheduleCb);
    }
  };
  var scheduleCb = function() {
    var count = scheduleCount;
    scheduleCount = 0;
    promiseRunning = true;
    var maybePromise = cb({ count });
    if (!maybePromise) {
      done();
      return;
    }
    maybePromise.then(done).catch(done);
  };
  return {
    schedule: function() {
      if (scheduleCount === 0 && !busy()) {
        scheduleFn(scheduleCb);
      }
      scheduleCount++;
    },
    await: function() {
      return __awaiter2(this, void 0, void 0, function() {
        return __generator2(this, function(_a5) {
          switch (_a5.label) {
            case 0:
              if (!busy()) {
                return [
                  2
                  /*return*/
                ];
              }
              if (!awaitingPromise) {
                awaitingPromise = new Promise(function(resolve) {
                  awaitingDone = resolve;
                });
              }
              _a5.label = 1;
            case 1:
              if (!busy())
                return [3, 3];
              return [4, awaitingPromise];
            case 2:
              _a5.sent();
              return [3, 1];
            case 3:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    }
  };
}
var __awaiter2, __generator2;
var init_render = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/util/render.js"() {
    __awaiter2 = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __generator2 = function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/series/seriesMarker.js
var __extends18, __decorate13, MARKER_SHAPES, MARKER_SHAPE, SeriesMarker;
var init_seriesMarker = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/series/seriesMarker.js"() {
    init_marker();
    init_circle();
    init_changeDetectable();
    init_validation();
    __extends18 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate13 = function(decorators, target2, key2, desc) {
      var c = arguments.length, r = c < 3 ? target2 : desc === null ? desc = Object.getOwnPropertyDescriptor(target2, key2) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target2, key2, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target2, key2, r) : d(target2, key2)) || r;
      return c > 3 && r && Object.defineProperty(target2, key2, r), r;
    };
    MARKER_SHAPES = ["circle", "cross", "diamond", "heart", "plus", "square", "triangle"];
    MARKER_SHAPE = predicateWithMessage(function(v) {
      return MARKER_SHAPES.includes(v) || Object.getPrototypeOf(v) === Marker;
    }, "expecting a marker shape keyword such as 'circle', 'diamond' or 'square' or an object extending the Marker class");
    SeriesMarker = /** @class */
    function(_super) {
      __extends18(SeriesMarker2, _super);
      function SeriesMarker2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.enabled = true;
        _this.shape = Circle;
        _this.size = 6;
        _this.maxSize = 30;
        _this.domain = void 0;
        _this.fill = void 0;
        _this.stroke = void 0;
        _this.strokeWidth = 1;
        _this.fillOpacity = void 0;
        _this.strokeOpacity = void 0;
        return _this;
      }
      __decorate13([
        Validate(BOOLEAN),
        SceneChangeDetection({ redraw: RedrawType.MAJOR })
      ], SeriesMarker2.prototype, "enabled", void 0);
      __decorate13([
        Validate(MARKER_SHAPE),
        SceneChangeDetection({ redraw: RedrawType.MAJOR })
      ], SeriesMarker2.prototype, "shape", void 0);
      __decorate13([
        Validate(NUMBER(0)),
        SceneChangeDetection({ redraw: RedrawType.MAJOR })
      ], SeriesMarker2.prototype, "size", void 0);
      __decorate13([
        Validate(NUMBER(0)),
        SceneChangeDetection({ redraw: RedrawType.MAJOR })
      ], SeriesMarker2.prototype, "maxSize", void 0);
      __decorate13([
        Validate(OPT_NUMBER_ARRAY),
        SceneChangeDetection({ redraw: RedrawType.MAJOR })
      ], SeriesMarker2.prototype, "domain", void 0);
      __decorate13([
        Validate(OPT_COLOR_STRING),
        SceneChangeDetection({ redraw: RedrawType.MAJOR })
      ], SeriesMarker2.prototype, "fill", void 0);
      __decorate13([
        Validate(OPT_COLOR_STRING),
        SceneChangeDetection({ redraw: RedrawType.MAJOR })
      ], SeriesMarker2.prototype, "stroke", void 0);
      __decorate13([
        Validate(OPT_NUMBER(0)),
        SceneChangeDetection({ redraw: RedrawType.MAJOR })
      ], SeriesMarker2.prototype, "strokeWidth", void 0);
      __decorate13([
        Validate(OPT_NUMBER(0, 1)),
        SceneChangeDetection({ redraw: RedrawType.MAJOR })
      ], SeriesMarker2.prototype, "fillOpacity", void 0);
      __decorate13([
        Validate(OPT_NUMBER(0, 1)),
        SceneChangeDetection({ redraw: RedrawType.MAJOR })
      ], SeriesMarker2.prototype, "strokeOpacity", void 0);
      return SeriesMarker2;
    }(ChangeDetectable);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/scale/continuousScale.js
var __read10, ContinuousScale;
var init_continuousScale = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/scale/continuousScale.js"() {
    init_logger();
    __read10 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    ContinuousScale = /** @class */
    function() {
      function ContinuousScale2(domain, range2) {
        this.domain = domain;
        this.range = range2;
        this.nice = false;
        this.tickCount = ContinuousScale2.defaultTickCount;
        this.minTickCount = 0;
        this.maxTickCount = Infinity;
        this.niceDomain = null;
        this.strictClampByDefault = false;
        this.cache = null;
        this.cacheProps = ["domain", "range", "nice", "tickCount", "minTickCount", "maxTickCount"];
      }
      ContinuousScale2.prototype.transform = function(x) {
        return x;
      };
      ContinuousScale2.prototype.transformInvert = function(x) {
        return x;
      };
      ContinuousScale2.prototype.fromDomain = function(d) {
        if (typeof d === "number") {
          return d;
        } else if (d instanceof Date) {
          return d.getTime();
        }
        return NaN;
      };
      ContinuousScale2.prototype.getDomain = function() {
        if (this.nice) {
          this.refresh();
          if (this.niceDomain) {
            return this.niceDomain;
          }
        }
        return this.domain;
      };
      ContinuousScale2.prototype.convert = function(x, params) {
        var _this = this;
        var _a5;
        if (!this.domain || this.domain.length < 2) {
          return NaN;
        }
        this.refresh();
        var strict = (_a5 = params === null || params === void 0 ? void 0 : params.strict) !== null && _a5 !== void 0 ? _a5 : this.strictClampByDefault;
        var domain = this.getDomain().map(function(d) {
          return _this.transform(d);
        });
        var _b2 = __read10(domain, 2), d0 = _b2[0], d1 = _b2[1];
        var range2 = this.range;
        var _c2 = __read10(range2, 2), r0 = _c2[0], r1 = _c2[1];
        x = this.transform(x);
        if (x < d0) {
          return strict ? NaN : r0;
        } else if (x > d1) {
          return strict ? NaN : r1;
        }
        if (d0 === d1) {
          return (r0 + r1) / 2;
        } else if (x === d0) {
          return r0;
        } else if (x === d1) {
          return r1;
        }
        return r0 + (this.fromDomain(x) - this.fromDomain(d0)) / (this.fromDomain(d1) - this.fromDomain(d0)) * (r1 - r0);
      };
      ContinuousScale2.prototype.invert = function(x) {
        var _this = this;
        this.refresh();
        var domain = this.getDomain().map(function(d2) {
          return _this.transform(d2);
        });
        var _a5 = __read10(domain, 2), d0 = _a5[0], d1 = _a5[1];
        var range2 = this.range;
        var _b2 = __read10(range2, 2), r0 = _b2[0], r1 = _b2[1];
        var isReversed = r0 > r1;
        var rMin = isReversed ? r1 : r0;
        var rMax = isReversed ? r0 : r1;
        var d;
        if (x < rMin) {
          return isReversed ? d1 : d0;
        } else if (x > rMax) {
          return isReversed ? d0 : d1;
        } else if (r0 === r1) {
          d = this.toDomain((this.fromDomain(d0) + this.fromDomain(d1)) / 2);
        } else {
          d = this.toDomain(this.fromDomain(d0) + (x - r0) / (r1 - r0) * (this.fromDomain(d1) - this.fromDomain(d0)));
        }
        return this.transformInvert(d);
      };
      ContinuousScale2.prototype.didChange = function() {
        var _this = this;
        var cache = this.cache;
        var didChange = !cache || this.cacheProps.some(function(p) {
          return _this[p] !== cache[p];
        });
        if (didChange) {
          this.cache = {};
          this.cacheProps.forEach(function(p) {
            return _this.cache[p] = _this[p];
          });
          return true;
        }
        return false;
      };
      ContinuousScale2.prototype.refresh = function() {
        if (this.didChange()) {
          this.update();
        }
      };
      ContinuousScale2.prototype.isDenseInterval = function(_a5) {
        var start = _a5.start, stop = _a5.stop, interval = _a5.interval, count = _a5.count;
        var range2 = this.range;
        var domain = stop - start;
        var min = Math.min(range2[0], range2[1]);
        var max = Math.max(range2[0], range2[1]);
        var availableRange = max - min;
        var step = typeof interval === "number" ? interval : 1;
        count !== null && count !== void 0 ? count : count = domain / step;
        if (count >= availableRange) {
          Logger.warn("the configured tick interval, " + JSON.stringify(interval) + ", results in more than 1 tick per pixel, ignoring. Supply a larger tick interval or omit this configuration.");
          return true;
        }
        return false;
      };
      ContinuousScale2.defaultTickCount = 5;
      ContinuousScale2.defaultMaxTickCount = 6;
      return ContinuousScale2;
    }();
  }
});

// node_modules/ag-charts-community/dist/esm/es5/scale/bandScale.js
function clamp(x, min, max) {
  return Math.max(min, Math.min(max, x));
}
var __read11, BandScale;
var init_bandScale = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/scale/bandScale.js"() {
    __read11 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    BandScale = /** @class */
    function() {
      function BandScale2() {
        this.type = "band";
        this.cache = null;
        this.cacheProps = ["_domain", "range", "_paddingInner", "_paddingOuter", "round", "interval"];
        this.index = /* @__PURE__ */ new Map();
        this.ordinalRange = [];
        this._domain = [];
        this.range = [0, 1];
        this._bandwidth = 1;
        this._rawBandwidth = 1;
        this._paddingInner = 0;
        this._paddingOuter = 0;
        this.round = false;
      }
      BandScale2.prototype.didChange = function() {
        var _this = this;
        var cache = this.cache;
        var didChange = !cache || this.cacheProps.some(function(p) {
          return _this[p] !== cache[p];
        });
        if (didChange) {
          this.cache = {};
          this.cacheProps.forEach(function(p) {
            return _this.cache[p] = _this[p];
          });
          return true;
        }
        return false;
      };
      BandScale2.prototype.refresh = function() {
        if (this.didChange()) {
          this.update();
        }
      };
      Object.defineProperty(BandScale2.prototype, "domain", {
        get: function() {
          return this._domain;
        },
        set: function(values) {
          var domain = [];
          this.index = /* @__PURE__ */ new Map();
          var index = this.index;
          values.forEach(function(value) {
            if (index.get(value) === void 0) {
              index.set(value, domain.push(value) - 1);
            }
          });
          this._domain = domain;
        },
        enumerable: false,
        configurable: true
      });
      BandScale2.prototype.ticks = function() {
        this.refresh();
        var _a5 = this.interval, interval = _a5 === void 0 ? 1 : _a5;
        var step = Math.abs(Math.round(interval));
        return this._domain.filter(function(_, i) {
          return i % step === 0;
        });
      };
      BandScale2.prototype.convert = function(d) {
        this.refresh();
        var i = this.index.get(d);
        if (i === void 0) {
          return NaN;
        }
        var r = this.ordinalRange[i];
        if (r === void 0) {
          return NaN;
        }
        return r;
      };
      BandScale2.prototype.invert = function(position) {
        this.refresh();
        var index = this.ordinalRange.findIndex(function(p) {
          return p === position;
        });
        return this.domain[index];
      };
      Object.defineProperty(BandScale2.prototype, "bandwidth", {
        get: function() {
          this.refresh();
          return this._bandwidth;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(BandScale2.prototype, "rawBandwidth", {
        get: function() {
          this.refresh();
          return this._rawBandwidth;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(BandScale2.prototype, "padding", {
        get: function() {
          return this._paddingInner;
        },
        set: function(value) {
          value = clamp(value, 0, 1);
          this._paddingInner = value;
          this._paddingOuter = value;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(BandScale2.prototype, "paddingInner", {
        get: function() {
          return this._paddingInner;
        },
        set: function(value) {
          this._paddingInner = clamp(value, 0, 1);
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(BandScale2.prototype, "paddingOuter", {
        get: function() {
          return this._paddingOuter;
        },
        set: function(value) {
          this._paddingOuter = clamp(value, 0, 1);
        },
        enumerable: false,
        configurable: true
      });
      BandScale2.prototype.update = function() {
        var count = this._domain.length;
        if (count === 0) {
          return;
        }
        var round = this.round;
        var paddingInner = this._paddingInner;
        var paddingOuter = this._paddingOuter;
        var _a5 = __read11(this.range, 2), r0 = _a5[0], r1 = _a5[1];
        var width = r1 - r0;
        var rawStep = width / Math.max(1, count + 2 * paddingOuter - paddingInner);
        var step = round ? Math.floor(rawStep) : rawStep;
        var fullBandWidth = step * (count - paddingInner);
        var x0 = r0 + (width - fullBandWidth) / 2;
        var start = round ? Math.round(x0) : x0;
        var bw = step * (1 - paddingInner);
        var bandwidth = round ? Math.round(bw) : bw;
        var rawBandwidth = rawStep * (1 - paddingInner);
        var values = [];
        for (var i = 0; i < count; i++) {
          values.push(start + step * i);
        }
        this._bandwidth = bandwidth;
        this._rawBandwidth = rawBandwidth;
        this.ordinalRange = values;
      };
      return BandScale2;
    }();
  }
});

// node_modules/ag-charts-community/dist/esm/es5/scene/shape/line.js
var __extends19, __decorate14, Line;
var init_line = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/scene/shape/line.js"() {
    init_shape();
    init_bbox();
    init_node();
    __extends19 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate14 = function(decorators, target2, key2, desc) {
      var c = arguments.length, r = c < 3 ? target2 : desc === null ? desc = Object.getOwnPropertyDescriptor(target2, key2) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target2, key2, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target2, key2, r) : d(target2, key2)) || r;
      return c > 3 && r && Object.defineProperty(target2, key2, r), r;
    };
    Line = /** @class */
    function(_super) {
      __extends19(Line2, _super);
      function Line2() {
        var _this = _super.call(this) || this;
        _this.x1 = 0;
        _this.y1 = 0;
        _this.x2 = 0;
        _this.y2 = 0;
        _this.restoreOwnStyles();
        return _this;
      }
      Line2.prototype.computeBBox = function() {
        return new BBox(this.x1, this.y1, this.x2 - this.x1, this.y2 - this.y1);
      };
      Line2.prototype.isPointInPath = function(_x, _y) {
        return false;
      };
      Line2.prototype.render = function(renderCtx) {
        var _a5;
        var ctx = renderCtx.ctx, forceRender = renderCtx.forceRender, stats = renderCtx.stats;
        if (this.dirty === RedrawType.NONE && !forceRender) {
          if (stats)
            stats.nodesSkipped += this.nodeCount.count;
          return;
        }
        this.computeTransformMatrix();
        this.matrix.toContext(ctx);
        var x1 = this.x1;
        var y1 = this.y1;
        var x2 = this.x2;
        var y2 = this.y2;
        if (x1 === x2) {
          var x = Math.round(x1) + Math.floor(this.strokeWidth) % 2 / 2;
          x1 = x;
          x2 = x;
        } else if (y1 === y2) {
          var y = Math.round(y1) + Math.floor(this.strokeWidth) % 2 / 2;
          y1 = y;
          y2 = y;
        }
        ctx.beginPath();
        ctx.moveTo(x1, y1);
        ctx.lineTo(x2, y2);
        this.fillStroke(ctx);
        (_a5 = this.fillShadow) === null || _a5 === void 0 ? void 0 : _a5.markClean();
        _super.prototype.render.call(this, renderCtx);
      };
      Line2.className = "Line";
      Line2.defaultStyles = Object.assign({}, Shape.defaultStyles, {
        fill: void 0,
        strokeWidth: 1
      });
      __decorate14([
        SceneChangeDetection({ redraw: RedrawType.MAJOR })
      ], Line2.prototype, "x1", void 0);
      __decorate14([
        SceneChangeDetection({ redraw: RedrawType.MAJOR })
      ], Line2.prototype, "y1", void 0);
      __decorate14([
        SceneChangeDetection({ redraw: RedrawType.MAJOR })
      ], Line2.prototype, "x2", void 0);
      __decorate14([
        SceneChangeDetection({ redraw: RedrawType.MAJOR })
      ], Line2.prototype, "y2", void 0);
      return Line2;
    }(Shape);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/util/number.js
function isEqual(a, b, epsilon) {
  if (epsilon === void 0) {
    epsilon = 1e-10;
  }
  return Math.abs(a - b) < epsilon;
}
function toFixed(value, fractionOrSignificantDigits) {
  if (fractionOrSignificantDigits === void 0) {
    fractionOrSignificantDigits = 2;
  }
  var power = Math.floor(Math.log(Math.abs(value)) / Math.LN10);
  if (power >= 0 || !isFinite(power)) {
    return value.toFixed(fractionOrSignificantDigits);
  }
  return value.toFixed(Math.abs(power) - 1 + fractionOrSignificantDigits);
}
function mod(n, m) {
  if (n >= 0) {
    return Math.floor(n % m);
  }
  return Math.floor(n % m + m);
}
var init_number = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/util/number.js"() {
  }
});

// node_modules/ag-charts-community/dist/esm/es5/scene/shape/arc.js
var __extends20, __decorate15, ArcType, Arc;
var init_arc = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/scene/shape/arc.js"() {
    init_shape();
    init_path();
    init_bbox();
    init_angle();
    init_number();
    __extends20 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate15 = function(decorators, target2, key2, desc) {
      var c = arguments.length, r = c < 3 ? target2 : desc === null ? desc = Object.getOwnPropertyDescriptor(target2, key2) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target2, key2, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target2, key2, r) : d(target2, key2)) || r;
      return c > 3 && r && Object.defineProperty(target2, key2, r), r;
    };
    (function(ArcType2) {
      ArcType2[ArcType2["Open"] = 0] = "Open";
      ArcType2[ArcType2["Chord"] = 1] = "Chord";
      ArcType2[ArcType2["Round"] = 2] = "Round";
    })(ArcType || (ArcType = {}));
    Arc = /** @class */
    function(_super) {
      __extends20(Arc2, _super);
      function Arc2() {
        var _this = _super.call(this) || this;
        _this.centerX = 0;
        _this.centerY = 0;
        _this.radius = 10;
        _this.startAngle = 0;
        _this.endAngle = Math.PI * 2;
        _this.counterClockwise = false;
        _this.type = ArcType.Open;
        _this.restoreOwnStyles();
        return _this;
      }
      Object.defineProperty(Arc2.prototype, "fullPie", {
        get: function() {
          return isEqual(normalizeAngle360(this.startAngle), normalizeAngle360(this.endAngle));
        },
        enumerable: false,
        configurable: true
      });
      Arc2.prototype.updatePath = function() {
        var path = this.path;
        path.clear();
        path.arc(this.centerX, this.centerY, this.radius, this.startAngle, this.endAngle, this.counterClockwise);
        if (this.type === ArcType.Chord) {
          path.closePath();
        } else if (this.type === ArcType.Round && !this.fullPie) {
          path.lineTo(this.centerX, this.centerY);
          path.closePath();
        }
      };
      Arc2.prototype.computeBBox = function() {
        return new BBox(this.centerX - this.radius, this.centerY - this.radius, this.radius * 2, this.radius * 2);
      };
      Arc2.prototype.isPointInPath = function(x, y) {
        var point = this.transformPoint(x, y);
        var bbox = this.computeBBox();
        return this.type !== ArcType.Open && bbox.containsPoint(point.x, point.y) && this.path.isPointInPath(point.x, point.y);
      };
      Arc2.className = "Arc";
      Arc2.defaultStyles = Object.assign({}, Shape.defaultStyles, {
        lineWidth: 1,
        fillStyle: null
      });
      __decorate15([
        ScenePathChangeDetection()
      ], Arc2.prototype, "centerX", void 0);
      __decorate15([
        ScenePathChangeDetection()
      ], Arc2.prototype, "centerY", void 0);
      __decorate15([
        ScenePathChangeDetection()
      ], Arc2.prototype, "radius", void 0);
      __decorate15([
        ScenePathChangeDetection()
      ], Arc2.prototype, "startAngle", void 0);
      __decorate15([
        ScenePathChangeDetection()
      ], Arc2.prototype, "endAngle", void 0);
      __decorate15([
        ScenePathChangeDetection()
      ], Arc2.prototype, "counterClockwise", void 0);
      __decorate15([
        ScenePathChangeDetection()
      ], Arc2.prototype, "type", void 0);
      return Arc2;
    }(Path);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/caption.js
var __decorate16, Caption;
var init_caption = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/caption.js"() {
    init_text();
    init_node();
    init_validation();
    init_proxy();
    __decorate16 = function(decorators, target2, key2, desc) {
      var c = arguments.length, r = c < 3 ? target2 : desc === null ? desc = Object.getOwnPropertyDescriptor(target2, key2) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target2, key2, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target2, key2, r) : d(target2, key2)) || r;
      return c > 3 && r && Object.defineProperty(target2, key2, r), r;
    };
    Caption = /** @class */
    function() {
      function Caption2() {
        this.node = new Text();
        this.enabled = false;
        this.text = "";
        this.fontSize = 10;
        this.fontFamily = "sans-serif";
        this.spacing = Caption2.PADDING;
        this._lineHeight = void 0;
        var node = this.node;
        node.textAlign = "center";
        node.pointerEvents = PointerEvents.None;
      }
      Object.defineProperty(Caption2.prototype, "lineHeight", {
        get: function() {
          return this._lineHeight;
        },
        set: function(value) {
          this._lineHeight = value;
          this.node.lineHeight = value;
        },
        enumerable: false,
        configurable: true
      });
      Caption2.PADDING = 10;
      __decorate16([
        Validate(BOOLEAN)
      ], Caption2.prototype, "enabled", void 0);
      __decorate16([
        Validate(STRING),
        ProxyPropertyOnWrite("node")
      ], Caption2.prototype, "text", void 0);
      __decorate16([
        Validate(OPT_FONT_STYLE),
        ProxyPropertyOnWrite("node")
      ], Caption2.prototype, "fontStyle", void 0);
      __decorate16([
        Validate(OPT_FONT_WEIGHT),
        ProxyPropertyOnWrite("node")
      ], Caption2.prototype, "fontWeight", void 0);
      __decorate16([
        Validate(NUMBER(0)),
        ProxyPropertyOnWrite("node")
      ], Caption2.prototype, "fontSize", void 0);
      __decorate16([
        Validate(STRING),
        ProxyPropertyOnWrite("node")
      ], Caption2.prototype, "fontFamily", void 0);
      __decorate16([
        Validate(OPT_COLOR_STRING),
        ProxyPropertyOnWrite("node", "fill")
      ], Caption2.prototype, "color", void 0);
      __decorate16([
        Validate(OPT_NUMBER(0))
      ], Caption2.prototype, "spacing", void 0);
      __decorate16([
        Validate(OPT_NUMBER(0))
      ], Caption2.prototype, "_lineHeight", void 0);
      return Caption2;
    }();
  }
});

// node_modules/ag-charts-community/dist/esm/es5/util/equal.js
function areArrayItemsStrictlyEqual(arrA, arrB) {
  return arrA.length === arrB.length && arrA.every(function(a, i) {
    var b = arrB[i];
    if (Array.isArray(a) && Array.isArray(b)) {
      return areArrayItemsStrictlyEqual(a, b);
    }
    return a === b;
  });
}
function areArrayNumbersEqual(arrA, arrB) {
  return arrA.length === arrB.length && arrA.every(function(item, i) {
    return Number(item) === Number(arrB[i]);
  });
}
var init_equal = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/util/equal.js"() {
  }
});

// node_modules/ag-charts-community/dist/esm/es5/util/ticks.js
function ticks_default(start, stop, count, minCount, maxCount) {
  if (count < 2) {
    return range(start, stop, stop - start);
  }
  var step = tickStep(start, stop, count, minCount, maxCount);
  if (isNaN(step)) {
    return new NumericTicks(0);
  }
  start = Math.ceil(start / step) * step;
  stop = Math.floor(stop / step) * step;
  return range(start, stop, step);
}
function tickStep(a, b, count, minCount, maxCount) {
  if (minCount === void 0) {
    minCount = 0;
  }
  if (maxCount === void 0) {
    maxCount = Infinity;
  }
  var rawStep = (b - a) / count;
  var power = Math.floor(Math.log10(rawStep));
  var step = Math.pow(10, power);
  var m = tickMultipliers.map(function(multiplier) {
    var s = multiplier * step;
    var c = Math.ceil((b - a) / s);
    var isWithinBounds = c >= minCount && c <= maxCount;
    var diffCount = Math.abs(c - count);
    return { multiplier, isWithinBounds, diffCount };
  }).sort(function(a2, b2) {
    if (a2.isWithinBounds !== b2.isWithinBounds) {
      return a2.isWithinBounds ? -1 : 1;
    }
    return a2.diffCount - b2.diffCount;
  })[0].multiplier;
  if (!m || isNaN(m)) {
    return NaN;
  }
  return m * step;
}
function singleTickDomain(a, b) {
  var power = Math.floor(Math.log10(b - a));
  var step = Math.pow(10, power);
  return tickMultipliers.map(function(multiplier) {
    var s = multiplier * step;
    var start = Math.floor(a / s) * s;
    var end = Math.ceil(b / s) * s;
    var error = 1 - (b - a) / (end - start);
    var domain = [start, end];
    return { error, domain };
  }).sort(function(a2, b2) {
    return a2.error - b2.error;
  })[0].domain;
}
function range(start, stop, step) {
  var countDigits = function(expNo) {
    var _a5, _b2;
    var parts = expNo.split("e");
    return Math.max(((_b2 = (_a5 = parts[0].split(".")[1]) === null || _a5 === void 0 ? void 0 : _a5.length) !== null && _b2 !== void 0 ? _b2 : 0) - Number(parts[1]), 0);
  };
  var fractionalDigits = countDigits((step % 1).toExponential());
  var f = Math.pow(10, fractionalDigits);
  var n = Math.ceil((stop - start) / step);
  var values = new NumericTicks(fractionalDigits);
  for (var i = 0; i <= n; i++) {
    var value = start + step * i;
    values.push(Math.round(value * f) / f);
  }
  return values;
}
var __extends21, tickMultipliers, NumericTicks;
var init_ticks = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/util/ticks.js"() {
    __extends21 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    tickMultipliers = [1, 2, 5, 10];
    NumericTicks = /** @class */
    function(_super) {
      __extends21(NumericTicks2, _super);
      function NumericTicks2(fractionDigits, elements) {
        var _this = _super.call(this) || this;
        if (elements) {
          for (var i = 0, n = elements.length; i < n; i++) {
            _this[i] = elements[i];
          }
        }
        _this.fractionDigits = fractionDigits;
        return _this;
      }
      return NumericTicks2;
    }(Array);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/util/timeFormat.js
function dayOfYear(date, startOfYear) {
  if (startOfYear === void 0) {
    startOfYear = new Date(date.getFullYear(), 0, 1);
  }
  var startOffset = date.getTimezoneOffset() - startOfYear.getTimezoneOffset();
  var timeDiff = date.getTime() - startOfYear.getTime() + startOffset * 6e4;
  var timeOneDay = 36e5 * 24;
  return Math.floor(timeDiff / timeOneDay);
}
function weekOfYear(date, startDay) {
  var startOfYear = new Date(date.getFullYear(), 0, 1);
  var startOfYearDay = startOfYear.getDay();
  var firstWeekStartOffset = (startDay - startOfYearDay + 7) % 7;
  var startOffset = new Date(date.getFullYear(), 0, firstWeekStartOffset + 1);
  if (startOffset <= date) {
    return Math.floor(dayOfYear(date, startOffset) / 7) + 1;
  }
  return 0;
}
function isoWeekOfYear(date, year2) {
  if (year2 === void 0) {
    year2 = date.getFullYear();
  }
  var firstOfYear = new Date(year2, 0, 1);
  var firstOfYearDay = firstOfYear.getDay();
  var firstThursdayOffset = (THURSDAY - firstOfYearDay + 7) % 7;
  var startOffset = new Date(year2, 0, firstThursdayOffset - (THURSDAY - MONDAY) + 1);
  if (startOffset <= date) {
    return Math.floor(dayOfYear(date, startOffset) / 7) + 1;
  }
  return isoWeekOfYear(date, year2 - 1);
}
function timezone(date) {
  var offset4 = date.getTimezoneOffset();
  var unsignedOffset = Math.abs(offset4);
  var sign = offset4 > 0 ? "-" : "+";
  return "" + sign + pad(Math.floor(unsignedOffset / 60), 2, "0") + pad(Math.floor(unsignedOffset % 60), 2, "0");
}
function pad(value, size, padChar) {
  var output = String(Math.floor(value));
  if (output.length >= size) {
    return output;
  }
  return "" + padChar.repeat(size - output.length) + output;
}
function buildFormatter(formatString) {
  var formatParts = [];
  while (formatString.length > 0) {
    var nextEscapeIdx = formatString.indexOf("%");
    if (nextEscapeIdx !== 0) {
      var literalPart = nextEscapeIdx > 0 ? formatString.substring(0, nextEscapeIdx) : formatString;
      formatParts.push(literalPart);
    }
    if (nextEscapeIdx < 0)
      break;
    var maybePadSpecifier = formatString[nextEscapeIdx + 1];
    var maybePad = PADS[maybePadSpecifier];
    if (maybePad != null) {
      nextEscapeIdx++;
    }
    var maybeFormatterSpecifier = formatString[nextEscapeIdx + 1];
    var maybeFormatter = FORMATTERS[maybeFormatterSpecifier];
    if (typeof maybeFormatter === "function") {
      formatParts.push([maybeFormatter, maybePad]);
    } else if (typeof maybeFormatter === "string") {
      var formatter = buildFormatter(maybeFormatter);
      formatParts.push([formatter, maybePad]);
    } else {
      formatParts.push("" + (maybePad !== null && maybePad !== void 0 ? maybePad : "") + maybeFormatterSpecifier);
    }
    formatString = formatString.substring(nextEscapeIdx + 2);
  }
  return function(dateTime) {
    var dateTimeAsDate = typeof dateTime === "number" ? new Date(dateTime) : dateTime;
    return formatParts.map(function(c) {
      return typeof c === "string" ? c : c[0](dateTimeAsDate, c[1]);
    }).join("");
  };
}
var CONSTANTS, SUNDAY, MONDAY, THURSDAY, FORMATTERS, PADS;
var init_timeFormat = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/util/timeFormat.js"() {
    CONSTANTS = {
      periods: ["AM", "PM"],
      days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
      shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
      months: [
        "January",
        "February",
        "March",
        "April",
        "May",
        "June",
        "July",
        "August",
        "September",
        "October",
        "November",
        "December"
      ],
      shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
    };
    SUNDAY = 0;
    MONDAY = 1;
    THURSDAY = 4;
    FORMATTERS = {
      a: function(d) {
        return CONSTANTS.shortDays[d.getDay()];
      },
      A: function(d) {
        return CONSTANTS.days[d.getDay()];
      },
      b: function(d) {
        return CONSTANTS.shortMonths[d.getMonth()];
      },
      B: function(d) {
        return CONSTANTS.months[d.getMonth()];
      },
      c: "%x, %X",
      d: function(d, p) {
        return pad(d.getDate(), 2, p !== null && p !== void 0 ? p : "0");
      },
      e: "%_d",
      f: function(d, p) {
        return pad(d.getMilliseconds() * 1e3, 6, p !== null && p !== void 0 ? p : "0");
      },
      H: function(d, p) {
        return pad(d.getHours(), 2, p !== null && p !== void 0 ? p : "0");
      },
      I: function(d, p) {
        var hours = d.getHours() % 12;
        return hours === 0 ? "12" : pad(hours, 2, p !== null && p !== void 0 ? p : "0");
      },
      j: function(d, p) {
        return pad(dayOfYear(d) + 1, 3, p !== null && p !== void 0 ? p : "0");
      },
      m: function(d, p) {
        return pad(d.getMonth() + 1, 2, p !== null && p !== void 0 ? p : "0");
      },
      M: function(d, p) {
        return pad(d.getMinutes(), 2, p !== null && p !== void 0 ? p : "0");
      },
      L: function(d, p) {
        return pad(d.getMilliseconds(), 3, p !== null && p !== void 0 ? p : "0");
      },
      p: function(d) {
        return d.getHours() < 12 ? "AM" : "PM";
      },
      Q: function(d) {
        return String(d.getTime());
      },
      s: function(d) {
        return String(Math.floor(d.getTime() / 1e3));
      },
      S: function(d, p) {
        return pad(d.getSeconds(), 2, p !== null && p !== void 0 ? p : "0");
      },
      u: function(d) {
        var day2 = d.getDay();
        if (day2 < 1)
          day2 += 7;
        return String(day2 % 7);
      },
      U: function(d, p) {
        return pad(weekOfYear(d, SUNDAY), 2, p !== null && p !== void 0 ? p : "0");
      },
      V: function(d, p) {
        return pad(isoWeekOfYear(d), 2, p !== null && p !== void 0 ? p : "0");
      },
      w: function(d, p) {
        return pad(d.getDay(), 2, p !== null && p !== void 0 ? p : "0");
      },
      W: function(d, p) {
        return pad(weekOfYear(d, MONDAY), 2, p !== null && p !== void 0 ? p : "0");
      },
      x: "%-m/%-d/%Y",
      X: "%-I:%M:%S %p",
      y: function(d, p) {
        return pad(d.getFullYear() % 100, 2, p !== null && p !== void 0 ? p : "0");
      },
      Y: function(d, p) {
        return pad(d.getFullYear(), 4, p !== null && p !== void 0 ? p : "0");
      },
      Z: function(d) {
        return timezone(d);
      },
      "%": function() {
        return "%";
      }
    };
    PADS = {
      _: " ",
      "0": "0",
      "-": ""
    };
  }
});

// node_modules/ag-charts-community/dist/esm/es5/scale/timeScale.js
function toNumber(x) {
  return x instanceof Date ? x.getTime() : x;
}
var __extends22, __values13, __read12, __spread7, _a2, DefaultTimeFormats, formatStrings, TimeScale;
var init_timeScale = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/scale/timeScale.js"() {
    init_continuousScale();
    init_millisecond();
    init_second();
    init_minute();
    init_hour();
    init_day();
    init_week();
    init_month();
    init_year();
    init_duration();
    init_interval();
    init_ticks();
    init_timeFormat();
    __extends22 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __values13 = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read12 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread7 = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read12(arguments[i]));
      return ar;
    };
    (function(DefaultTimeFormats2) {
      DefaultTimeFormats2[DefaultTimeFormats2["MILLISECOND"] = 0] = "MILLISECOND";
      DefaultTimeFormats2[DefaultTimeFormats2["SECOND"] = 1] = "SECOND";
      DefaultTimeFormats2[DefaultTimeFormats2["MINUTE"] = 2] = "MINUTE";
      DefaultTimeFormats2[DefaultTimeFormats2["HOUR"] = 3] = "HOUR";
      DefaultTimeFormats2[DefaultTimeFormats2["WEEK_DAY"] = 4] = "WEEK_DAY";
      DefaultTimeFormats2[DefaultTimeFormats2["SHORT_MONTH"] = 5] = "SHORT_MONTH";
      DefaultTimeFormats2[DefaultTimeFormats2["MONTH"] = 6] = "MONTH";
      DefaultTimeFormats2[DefaultTimeFormats2["SHORT_YEAR"] = 7] = "SHORT_YEAR";
      DefaultTimeFormats2[DefaultTimeFormats2["YEAR"] = 8] = "YEAR";
    })(DefaultTimeFormats || (DefaultTimeFormats = {}));
    formatStrings = (_a2 = {}, _a2[DefaultTimeFormats.MILLISECOND] = ".%L", _a2[DefaultTimeFormats.SECOND] = ":%S", _a2[DefaultTimeFormats.MINUTE] = "%I:%M", _a2[DefaultTimeFormats.HOUR] = "%I %p", _a2[DefaultTimeFormats.WEEK_DAY] = "%a", _a2[DefaultTimeFormats.SHORT_MONTH] = "%b %d", _a2[DefaultTimeFormats.MONTH] = "%B", _a2[DefaultTimeFormats.SHORT_YEAR] = "%y", _a2[DefaultTimeFormats.YEAR] = "%Y", _a2);
    TimeScale = /** @class */
    function(_super) {
      __extends22(TimeScale2, _super);
      function TimeScale2() {
        var _this = _super.call(this, [new Date(2022, 11, 7), new Date(2022, 11, 8)], [0, 1]) || this;
        _this.type = "time";
        _this.cacheProps = [
          "domain",
          "range",
          "nice",
          "tickCount",
          "interval",
          "minTickCount",
          "maxTickCount"
        ];
        _this.year = year_default;
        _this.month = month_default;
        _this.week = week_default;
        _this.day = day_default;
        _this.hour = hour_default;
        _this.minute = minute_default;
        _this.second = second_default;
        _this.millisecond = millisecond_default;
        _this.tickIntervals = [
          [_this.second, 1, durationSecond],
          [_this.second, 5, 5 * durationSecond],
          [_this.second, 15, 15 * durationSecond],
          [_this.second, 30, 30 * durationSecond],
          [_this.minute, 1, durationMinute],
          [_this.minute, 5, 5 * durationMinute],
          [_this.minute, 15, 15 * durationMinute],
          [_this.minute, 30, 30 * durationMinute],
          [_this.hour, 1, durationHour],
          [_this.hour, 3, 3 * durationHour],
          [_this.hour, 6, 6 * durationHour],
          [_this.hour, 12, 12 * durationHour],
          [_this.day, 1, durationDay],
          [_this.day, 2, 2 * durationDay],
          [_this.week, 1, durationWeek],
          [_this.week, 2, 2 * durationWeek],
          [_this.week, 3, 3 * durationWeek],
          [_this.month, 1, durationMonth],
          [_this.month, 2, 2 * durationMonth],
          [_this.month, 3, 3 * durationMonth],
          [_this.month, 4, 4 * durationMonth],
          [_this.month, 6, 6 * durationMonth],
          [_this.year, 1, durationYear]
        ];
        return _this;
      }
      TimeScale2.prototype.toDomain = function(d) {
        return new Date(d);
      };
      TimeScale2.prototype.calculateDefaultTickFormat = function(ticks) {
        var e_1, _a5;
        if (ticks === void 0) {
          ticks = [];
        }
        var defaultTimeFormat = DefaultTimeFormats.YEAR;
        var updateFormat = function(format3) {
          if (format3 < defaultTimeFormat) {
            defaultTimeFormat = format3;
          }
        };
        try {
          for (var ticks_1 = __values13(ticks), ticks_1_1 = ticks_1.next(); !ticks_1_1.done; ticks_1_1 = ticks_1.next()) {
            var value = ticks_1_1.value;
            var format2 = this.getLowestGranularityFormat(value);
            updateFormat(format2);
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (ticks_1_1 && !ticks_1_1.done && (_a5 = ticks_1.return))
              _a5.call(ticks_1);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        var firstTick = toNumber(ticks[0]);
        var lastTick = toNumber(ticks[ticks.length - 1]);
        var startYear = new Date(firstTick).getFullYear();
        var stopYear = new Date(lastTick).getFullYear();
        var yearChange = stopYear - startYear > 0;
        return this.buildFormatString(defaultTimeFormat, yearChange);
      };
      TimeScale2.prototype.buildFormatString = function(defaultTimeFormat, yearChange) {
        var formatStringArray = [formatStrings[defaultTimeFormat]];
        var timeEndIndex = 0;
        var domain = this.getDomain();
        var start = Math.min.apply(Math, __spread7(domain.map(toNumber)));
        var stop = Math.max.apply(Math, __spread7(domain.map(toNumber)));
        var extent2 = stop - start;
        switch (defaultTimeFormat) {
          case DefaultTimeFormats.SECOND:
            if (extent2 / durationMinute > 1) {
              formatStringArray.push(formatStrings[DefaultTimeFormats.MINUTE]);
            }
          case DefaultTimeFormats.MINUTE:
            if (extent2 / durationHour > 1) {
              formatStringArray.push(formatStrings[DefaultTimeFormats.HOUR]);
            }
          case DefaultTimeFormats.HOUR:
            timeEndIndex = formatStringArray.length;
            if (extent2 / durationDay > 1) {
              formatStringArray.push(formatStrings[DefaultTimeFormats.WEEK_DAY]);
            }
          case DefaultTimeFormats.WEEK_DAY:
            if (extent2 / durationWeek > 1 || yearChange) {
              var weekDayIndex = formatStringArray.indexOf(formatStrings[DefaultTimeFormats.WEEK_DAY]);
              if (weekDayIndex > -1) {
                formatStringArray.splice(weekDayIndex, 1, formatStrings[DefaultTimeFormats.SHORT_MONTH]);
              }
            }
          case DefaultTimeFormats.SHORT_MONTH:
          case DefaultTimeFormats.MONTH:
            if (extent2 / durationYear > 1 || yearChange) {
              formatStringArray.push(formatStrings[DefaultTimeFormats.YEAR]);
            }
          default:
            break;
        }
        if (timeEndIndex < formatStringArray.length) {
          formatStringArray = __spread7(formatStringArray.slice(0, timeEndIndex), [
            formatStringArray.slice(timeEndIndex).join(" ")
          ]);
        }
        if (timeEndIndex > 0) {
          formatStringArray = __spread7(formatStringArray.slice(0, timeEndIndex).reverse(), formatStringArray.slice(timeEndIndex));
          if (timeEndIndex < formatStringArray.length) {
            formatStringArray.splice(timeEndIndex, 0, " ");
          }
        }
        return formatStringArray.join("");
      };
      TimeScale2.prototype.getLowestGranularityFormat = function(value) {
        if (this.second.floor(value) < value) {
          return DefaultTimeFormats.MILLISECOND;
        } else if (this.minute.floor(value) < value) {
          return DefaultTimeFormats.SECOND;
        } else if (this.hour.floor(value) < value) {
          return DefaultTimeFormats.MINUTE;
        } else if (this.day.floor(value) < value) {
          return DefaultTimeFormats.HOUR;
        } else if (this.month.floor(value) < value) {
          if (this.week.floor(value) < value) {
            return DefaultTimeFormats.WEEK_DAY;
          }
          return DefaultTimeFormats.SHORT_MONTH;
        } else if (this.year.floor(value) < value) {
          return DefaultTimeFormats.MONTH;
        }
        return DefaultTimeFormats.YEAR;
      };
      TimeScale2.prototype.defaultTickFormat = function(ticks) {
        var formatString = this.calculateDefaultTickFormat(ticks);
        return function(date) {
          return buildFormatter(formatString)(date);
        };
      };
      TimeScale2.prototype.getTickInterval = function(_a5) {
        var _b2;
        var start = _a5.start, stop = _a5.stop, count = _a5.count, minCount = _a5.minCount, maxCount = _a5.maxCount;
        var tickIntervals = this.tickIntervals;
        var countableTimeInterval;
        var step;
        var tickCount = count !== null && count !== void 0 ? count : ContinuousScale.defaultTickCount;
        var target2 = Math.abs(stop - start) / Math.max(tickCount, 1);
        var i = 0;
        while (i < tickIntervals.length && target2 > tickIntervals[i][2]) {
          i++;
        }
        if (i === 0) {
          step = Math.max(tickStep(start, stop, tickCount, minCount, maxCount), 1);
          countableTimeInterval = this.millisecond;
        } else if (i === tickIntervals.length) {
          var y0 = start / durationYear;
          var y1 = stop / durationYear;
          step = tickStep(y0, y1, tickCount, minCount, maxCount);
          countableTimeInterval = this.year;
        } else {
          var diff0 = target2 - tickIntervals[i - 1][2];
          var diff1 = tickIntervals[i][2] - target2;
          var index = diff0 < diff1 ? i - 1 : i;
          _b2 = __read12(tickIntervals[index], 2), countableTimeInterval = _b2[0], step = _b2[1];
        }
        return countableTimeInterval.every(step);
      };
      TimeScale2.prototype.invert = function(y) {
        return new Date(_super.prototype.invert.call(this, y));
      };
      TimeScale2.prototype.ticks = function() {
        if (!this.domain || this.domain.length < 2) {
          return [];
        }
        this.refresh();
        var _a5 = __read12(this.getDomain().map(toNumber), 2), t0 = _a5[0], t1 = _a5[1];
        if (this.interval !== void 0) {
          return this.getTicksForInterval({ start: t0, stop: t1 });
        }
        if (this.nice) {
          var tickCount = this.tickCount;
          if (tickCount === 2) {
            return this.niceDomain;
          }
          if (tickCount === 1) {
            return this.niceDomain.slice(0, 1);
          }
        }
        return this.getDefaultTicks({ start: t0, stop: t1 });
      };
      TimeScale2.prototype.getDefaultTicks = function(_a5) {
        var start = _a5.start, stop = _a5.stop;
        var t = this.getTickInterval({
          start,
          stop,
          count: this.tickCount,
          minCount: this.minTickCount,
          maxCount: this.maxTickCount
        });
        return t ? t.range(new Date(start), new Date(stop)) : [];
      };
      TimeScale2.prototype.getTicksForInterval = function(_a5) {
        var start = _a5.start, stop = _a5.stop;
        var _b2 = this, interval = _b2.interval, tickIntervals = _b2.tickIntervals;
        if (!interval) {
          return [];
        }
        if (interval instanceof TimeInterval) {
          var ticks_2 = interval.range(new Date(start), new Date(stop));
          if (this.isDenseInterval({ start, stop, interval, count: ticks_2.length })) {
            return this.getDefaultTicks({ start, stop });
          }
          return ticks_2;
        }
        var absInterval = Math.abs(interval);
        if (this.isDenseInterval({ start, stop, interval: absInterval })) {
          return this.getDefaultTicks({ start, stop });
        }
        var reversedInterval = __spread7(tickIntervals);
        reversedInterval.reverse();
        var timeInterval = reversedInterval.find(function(tickInterval) {
          return absInterval % tickInterval[2] === 0;
        });
        if (timeInterval) {
          var i = timeInterval[0].every(absInterval / (timeInterval[2] / timeInterval[1]));
          return i.range(new Date(start), new Date(stop));
        }
        var date = new Date(start);
        var stopDate = new Date(stop);
        var ticks = [];
        while (date <= stopDate) {
          ticks.push(date);
          date = new Date(date);
          date.setMilliseconds(date.getMilliseconds() + absInterval);
        }
        return ticks;
      };
      TimeScale2.prototype.tickFormat = function(_a5) {
        var ticks = _a5.ticks, specifier = _a5.specifier;
        return specifier == void 0 ? this.defaultTickFormat(ticks) : buildFormatter(specifier);
      };
      TimeScale2.prototype.update = function() {
        if (!this.domain || this.domain.length < 2) {
          return;
        }
        if (this.nice) {
          this.updateNiceDomain();
        }
      };
      TimeScale2.prototype.updateNiceDomain = function() {
        var maxAttempts = 4;
        var _a5 = __read12(this.domain, 2), d0 = _a5[0], d1 = _a5[1];
        for (var i = 0; i < maxAttempts; i++) {
          this.updateNiceDomainIteration(d0, d1);
          var _b2 = __read12(this.niceDomain, 2), n0 = _b2[0], n1 = _b2[1];
          if (toNumber(d0) === toNumber(n0) && toNumber(d1) === toNumber(n1)) {
            break;
          }
          d0 = n0;
          d1 = n1;
        }
      };
      TimeScale2.prototype.updateNiceDomainIteration = function(d0, d1) {
        var start = toNumber(d0);
        var stop = toNumber(d1);
        var interval = this.interval;
        var i;
        if (interval instanceof TimeInterval) {
          i = interval;
        } else {
          var tickCount = typeof interval === "number" ? (stop - start) / Math.max(interval, 1) : this.tickCount;
          i = this.getTickInterval({
            start,
            stop,
            count: tickCount,
            minCount: this.minTickCount,
            maxCount: this.maxTickCount
          });
        }
        if (i) {
          var intervalRange = i.range(d0, d1, true);
          var n0 = intervalRange[0];
          var n1 = intervalRange[intervalRange.length - 1];
          this.niceDomain = [n0, n1];
        }
      };
      return TimeScale2;
    }(ContinuousScale);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/util/numberFormat.js
function parseFormatter(formatter) {
  var _a5;
  var prefix;
  var suffix;
  var surrounded = formatter.match(surroundedRegEx);
  if (surrounded) {
    _a5 = __read13(surrounded, 4), prefix = _a5[1], formatter = _a5[2], suffix = _a5[3];
  }
  var match = formatter.match(formatRegEx);
  if (!match) {
    throw new Error("The number formatter is invalid: " + formatter);
  }
  var _b2 = __read13(match, 11), fill = _b2[1], align = _b2[2], sign = _b2[3], symbol = _b2[4], zero = _b2[5], width = _b2[6], comma = _b2[7], precision = _b2[8], trim = _b2[9], type2 = _b2[10];
  return {
    fill,
    align,
    sign,
    symbol,
    zero,
    width: parseInt(width),
    comma,
    precision: parseInt(precision),
    trim: Boolean(trim),
    type: type2,
    prefix,
    suffix
  };
}
function format(formatter) {
  var options = typeof formatter === "string" ? parseFormatter(formatter) : formatter;
  var fill = options.fill, align = options.align, _a5 = options.sign, sign = _a5 === void 0 ? "-" : _a5, symbol = options.symbol, zero = options.zero, width = options.width, comma = options.comma, type2 = options.type, _b2 = options.prefix, prefix = _b2 === void 0 ? "" : _b2, _c2 = options.suffix, suffix = _c2 === void 0 ? "" : _c2;
  var precision = options.precision, trim = options.trim;
  var formatBody;
  if (!type2) {
    formatBody = decimalTypes["g"];
    trim = true;
  } else if (type2 in decimalTypes && type2 in integerTypes) {
    formatBody = isNaN(precision) ? integerTypes[type2] : decimalTypes[type2];
  } else if (type2 in decimalTypes) {
    formatBody = decimalTypes[type2];
  } else if (type2 in integerTypes) {
    formatBody = integerTypes[type2];
  } else {
    throw new Error("The number formatter type is invalid: " + type2);
  }
  if (isNaN(precision)) {
    precision = type2 ? 6 : 12;
  }
  return function(n) {
    var result = formatBody(n, precision);
    if (trim) {
      result = removeTrailingZeros(result);
    }
    if (comma) {
      result = insertSeparator(result, comma);
    }
    result = addSign(n, result, sign);
    if (symbol && symbol !== "#") {
      result = "" + symbol + result;
    }
    if (symbol === "#" && type2 === "x") {
      result = "0x" + result;
    }
    if (type2 === "s") {
      result = "" + result + getSIPrefix(n);
    }
    if (type2 === "%" || type2 === "p") {
      result = result + "%";
    }
    if (!isNaN(width)) {
      result = addPadding(result, width, fill || zero, align);
    }
    result = "" + prefix + result + suffix;
    return result;
  };
}
function removeTrailingZeros(numString) {
  return numString.replace(/\.0+$/, "").replace(/(\.[1-9])0+$/, "$1");
}
function insertSeparator(numString, separator) {
  var dotIndex = numString.indexOf(".");
  if (dotIndex < 0) {
    dotIndex = numString.length;
  }
  var integerChars = numString.substring(0, dotIndex).split("");
  var fractionalPart = numString.substring(dotIndex);
  for (var i = integerChars.length - 3; i > 0; i -= 3) {
    integerChars.splice(i, 0, separator);
  }
  return "" + integerChars.join("") + fractionalPart;
}
function getSIPrefix(n) {
  return siPrefixes[getSIPrefixPower(n)];
}
function getSIPrefixPower(n) {
  var power = Math.log10(Math.abs(n));
  var p = Math.floor(power / 3) * 3;
  return Math.max(minSIPrefix, Math.min(maxSIPrefix, p));
}
function addSign(num, numString, signType) {
  if (signType === void 0) {
    signType = "";
  }
  if (signType === "(") {
    return num >= 0 ? numString : "(" + numString + ")";
  }
  var plusSign = signType === "+" ? "+" : "";
  return "" + (num >= 0 ? plusSign : minusSign) + numString;
}
function addPadding(numString, width, fill, align) {
  if (fill === void 0) {
    fill = " ";
  }
  if (align === void 0) {
    align = ">";
  }
  var result = numString;
  if (align === ">" || !align) {
    result = result.padStart(width, fill);
  } else if (align === "<") {
    result = result.padEnd(width, fill);
  } else if (align === "^") {
    var padWidth = Math.max(0, width - result.length);
    var padLeft = Math.ceil(padWidth / 2);
    var padRight = Math.floor(padWidth / 2);
    result = result.padStart(padLeft + result.length, fill);
    result = result.padEnd(padRight + result.length, fill);
  }
  return result;
}
function tickFormat(ticks, formatter) {
  var options = parseFormatter(formatter || ",f");
  if (isNaN(options.precision)) {
    if (options.type === "f" || options.type === "%") {
      options.precision = Math.max.apply(Math, __spread8(ticks.map(function(x) {
        if (typeof x !== "number" || x === 0) {
          return 0;
        }
        var l = Math.floor(Math.log10(Math.abs(x)));
        var digits = options.type ? 6 : 12;
        var exp = x.toExponential(digits - 1).replace(/\.?0+e/, "e");
        var dotIndex = exp.indexOf(".");
        if (dotIndex < 0) {
          return l >= 0 ? 0 : -l;
        }
        var s = exp.indexOf("e") - dotIndex;
        return Math.max(0, s - l - 1);
      })));
    } else if (!options.type || options.type in decimalTypes) {
      options.precision = Math.max.apply(Math, __spread8(ticks.map(function(x) {
        if (typeof x !== "number") {
          return 0;
        }
        var exp = x.toExponential((options.type ? 6 : 12) - 1).replace(/\.?0+e/, "e");
        return exp.substring(0, exp.indexOf("e")).replace(".", "").length;
      })));
    }
  }
  var f = format(options);
  return function(n) {
    return f(Number(n));
  };
}
var __read13, __spread8, _a3, group, optionalGroup, nonCapturingGroup, formatRegEx, surroundedRegEx, absFloor, integerTypes, decimalTypes, minSIPrefix, maxSIPrefix, siPrefixes, minusSign;
var init_numberFormat = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/util/numberFormat.js"() {
    __read13 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread8 = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read13(arguments[i]));
      return ar;
    };
    group = function(content) {
      return "(" + content + ")";
    };
    optionalGroup = function(content) {
      return group(content) + "?";
    };
    nonCapturingGroup = function(content) {
      return optionalGroup("?:" + content);
    };
    formatRegEx = function() {
      var fill = ".";
      var align = "[<>=^]";
      var sign = "[+\\-( ]";
      var symbol = "[$€£¥₣₹#]";
      var zero = "0";
      var width = "\\d+";
      var comma = ",";
      var precision = "\\d+";
      var tilde = "~";
      var type2 = "[%a-z]";
      return new RegExp([
        "^",
        nonCapturingGroup("" + optionalGroup(fill) + group(align)),
        optionalGroup(sign),
        optionalGroup(symbol),
        optionalGroup(zero),
        optionalGroup(width),
        optionalGroup(comma),
        nonCapturingGroup("\\." + group(precision)),
        optionalGroup(tilde),
        optionalGroup(type2),
        "$"
      ].join(""), "i");
    }();
    surroundedRegEx = function() {
      var prefix = ".*?";
      var content = ".+?";
      var suffix = ".*?";
      return new RegExp(["^", group(prefix), "#\\{" + group(content) + "\\}", group(suffix), "$"].join(""));
    }();
    absFloor = function(n) {
      return Math.floor(Math.abs(n));
    };
    integerTypes = {
      b: function(n) {
        return absFloor(n).toString(2);
      },
      c: function(n) {
        return String.fromCharCode(n);
      },
      d: function(n) {
        return Math.round(Math.abs(n)).toFixed(0);
      },
      o: function(n) {
        return absFloor(n).toString(8);
      },
      x: function(n) {
        return absFloor(n).toString(16);
      },
      X: function(n) {
        return integerTypes.x(n).toUpperCase();
      },
      n: function(n) {
        return integerTypes.d(n);
      },
      "%": function(n) {
        return "" + absFloor(n * 100).toFixed(0);
      }
    };
    decimalTypes = {
      e: function(n, f) {
        return Math.abs(n).toExponential(f);
      },
      E: function(n, f) {
        return decimalTypes.e(n, f).toUpperCase();
      },
      f: function(n, f) {
        return Math.abs(n).toFixed(f);
      },
      F: function(n, f) {
        return decimalTypes.f(n, f).toUpperCase();
      },
      g: function(n, f) {
        if (n === 0) {
          return "0";
        }
        var a = Math.abs(n);
        var p = Math.floor(Math.log10(a));
        if (p >= -4 && p < f) {
          return a.toFixed(f - 1 - p);
        }
        return a.toExponential(f - 1);
      },
      G: function(n, f) {
        return decimalTypes.g(n, f).toUpperCase();
      },
      n: function(n, f) {
        return decimalTypes.g(n, f);
      },
      p: function(n, f) {
        return decimalTypes.r(n * 100, f);
      },
      r: function(n, f) {
        if (n === 0) {
          return "0";
        }
        var a = Math.abs(n);
        var p = Math.floor(Math.log10(a));
        var q = p - (f - 1);
        if (q <= 0) {
          return a.toFixed(-q);
        }
        var x = Math.pow(10, q);
        return (Math.round(a / x) * x).toFixed();
      },
      s: function(n, f) {
        var p = getSIPrefixPower(n);
        return decimalTypes.r(n / Math.pow(10, p), f);
      },
      "%": function(n, f) {
        return decimalTypes.f(n * 100, f);
      }
    };
    minSIPrefix = -24;
    maxSIPrefix = 24;
    siPrefixes = (_a3 = {}, _a3[minSIPrefix] = "y", _a3[-21] = "z", _a3[-18] = "a", _a3[-15] = "f", _a3[-12] = "p", _a3[-9] = "n", _a3[-6] = "µ", _a3[-3] = "m", _a3[0] = "", _a3[3] = "k", _a3[6] = "M", _a3[9] = "G", _a3[12] = "T", _a3[15] = "P", _a3[18] = "E", _a3[21] = "Z", _a3[maxSIPrefix] = "Y", _a3);
    minusSign = "−";
  }
});

// node_modules/ag-charts-community/dist/esm/es5/scale/logScale.js
var __extends23, __decorate17, __read14, __spread9, identity, LogScale;
var init_logScale = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/scale/logScale.js"() {
    init_continuousScale();
    init_ticks();
    init_numberFormat();
    init_validation();
    __extends23 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate17 = function(decorators, target2, key2, desc) {
      var c = arguments.length, r = c < 3 ? target2 : desc === null ? desc = Object.getOwnPropertyDescriptor(target2, key2) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target2, key2, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target2, key2, r) : d(target2, key2)) || r;
      return c > 3 && r && Object.defineProperty(target2, key2, r), r;
    };
    __read14 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread9 = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read14(arguments[i]));
      return ar;
    };
    identity = function(x) {
      return x;
    };
    LogScale = /** @class */
    function(_super) {
      __extends23(LogScale2, _super);
      function LogScale2() {
        var _this = _super.call(this, [1, 10], [0, 1]) || this;
        _this.type = "log";
        _this.base = 10;
        _this.cacheProps = ["domain", "range", "nice", "tickCount", "base"];
        _this.baseLog = identity;
        _this.basePow = identity;
        _this.log = function(x) {
          return _this.domain[0] >= 0 ? _this.baseLog(x) : -_this.baseLog(-x);
        };
        _this.pow = function(x) {
          return _this.domain[0] >= 0 ? _this.basePow(x) : -_this.basePow(-x);
        };
        return _this;
      }
      LogScale2.prototype.toDomain = function(d) {
        return d;
      };
      LogScale2.prototype.transform = function(x) {
        return this.domain[0] >= 0 ? Math.log(x) : -Math.log(-x);
      };
      LogScale2.prototype.transformInvert = function(x) {
        return this.domain[0] >= 0 ? Math.exp(x) : -Math.exp(-x);
      };
      LogScale2.prototype.update = function() {
        if (!this.domain || this.domain.length < 2) {
          return;
        }
        this.updateLogFn();
        this.updatePowFn();
        if (this.nice) {
          this.updateNiceDomain();
        }
      };
      LogScale2.prototype.updateLogFn = function() {
        var base = this.base;
        var log;
        if (base === 10) {
          log = Math.log10;
        } else if (base === Math.E) {
          log = Math.log;
        } else if (base === 2) {
          log = Math.log2;
        } else {
          var logBase_1 = Math.log(base);
          log = function(x) {
            return Math.log(x) / logBase_1;
          };
        }
        this.baseLog = log;
      };
      LogScale2.prototype.updatePowFn = function() {
        var base = this.base;
        var pow;
        if (base === 10) {
          pow = LogScale2.pow10;
        } else if (base === Math.E) {
          pow = Math.exp;
        } else {
          pow = function(x) {
            return Math.pow(base, x);
          };
        }
        this.basePow = pow;
      };
      LogScale2.prototype.updateNiceDomain = function() {
        var _a5 = __read14(this.domain, 2), d0 = _a5[0], d1 = _a5[1];
        var n0 = this.pow(Math.floor(this.log(d0)));
        var n1 = this.pow(Math.ceil(this.log(d1)));
        this.niceDomain = [n0, n1];
      };
      LogScale2.pow10 = function(x) {
        return x >= 0 ? Math.pow(10, x) : 1 / Math.pow(10, -x);
      };
      LogScale2.prototype.ticks = function() {
        var _this = this;
        var _a5;
        var count = (_a5 = this.tickCount) !== null && _a5 !== void 0 ? _a5 : 10;
        if (!this.domain || this.domain.length < 2 || count < 1) {
          return [];
        }
        this.refresh();
        var base = this.base;
        var _b2 = __read14(this.getDomain(), 2), d0 = _b2[0], d1 = _b2[1];
        var p0 = this.log(d0);
        var p1 = this.log(d1);
        if (this.interval) {
          var step = Math.abs(this.interval);
          var absDiff = Math.abs(p1 - p0);
          var ticks_1 = range(p0, p1, Math.min(absDiff, step)).map(function(x) {
            return _this.pow(x);
          }).filter(function(t2) {
            return t2 >= d0 && t2 <= d1;
          });
          if (!this.isDenseInterval({ start: d0, stop: d1, interval: step, count: ticks_1.length })) {
            return ticks_1;
          }
        }
        var isBaseInteger = base % 1 === 0;
        var isDiffLarge = p1 - p0 >= count;
        if (!isBaseInteger || isDiffLarge) {
          return ticks_default(p0, p1, Math.min(p1 - p0, count)).map(function(x) {
            return _this.pow(x);
          });
        }
        var ticks = [];
        var isPositive = d0 > 0;
        p0 = Math.floor(p0) - 1;
        p1 = Math.round(p1) + 1;
        var min = Math.min.apply(Math, __spread9(this.range));
        var max = Math.max.apply(Math, __spread9(this.range));
        var availableSpacing = (max - min) / count;
        var lastTickPosition = Infinity;
        for (var p = p0; p <= p1; p++) {
          var nextMagnitudeTickPosition = this.convert(this.pow(p + 1));
          for (var k = 1; k < base; k++) {
            var q = isPositive ? k : base - k + 1;
            var t = this.pow(p) * q;
            var tickPosition = this.convert(t);
            var prevSpacing = Math.abs(lastTickPosition - tickPosition);
            var nextSpacing = Math.abs(tickPosition - nextMagnitudeTickPosition);
            var fits = prevSpacing >= availableSpacing && nextSpacing >= availableSpacing;
            if (t >= d0 && t <= d1 && (k === 1 || fits)) {
              ticks.push(t);
              lastTickPosition = tickPosition;
            }
          }
        }
        return ticks;
      };
      LogScale2.prototype.tickFormat = function(_a5) {
        var count = _a5.count, ticks = _a5.ticks, specifier = _a5.specifier;
        var base = this.base;
        if (specifier == null) {
          specifier = base === 10 ? ".0e" : ",";
        }
        if (typeof specifier !== "function") {
          specifier = format(specifier);
        }
        if (count === Infinity) {
          return specifier;
        }
        if (count == null) {
          count = 10;
        }
        ticks = ticks !== null && ticks !== void 0 ? ticks : this.ticks();
        return function(d) {
          return specifier(d);
        };
      };
      __decorate17([
        Validate(NUMBER(0))
      ], LogScale2.prototype, "base", void 0);
      return LogScale2;
    }(ContinuousScale);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/util/default.js
function Default(defaultValue, replaces) {
  if (replaces === void 0) {
    replaces = [void 0];
  }
  return addTransformToInstanceProperty(function(_, __, v) {
    if (replaces.includes(v)) {
      return defaultValue;
    }
    return v;
  });
}
var init_default = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/util/default.js"() {
    init_decorator();
  }
});

// node_modules/ag-charts-community/dist/esm/es5/util/array.js
function extent(values) {
  var length = values.length;
  if (length === 0) {
    return void 0;
  }
  var min = Infinity;
  var max = -Infinity;
  for (var i = 0; i < length; i++) {
    var v = values[i];
    if (v instanceof Date) {
      v = v.getTime();
    }
    if (typeof v !== "number") {
      continue;
    }
    if (v < min) {
      min = v;
    }
    if (v > max) {
      max = v;
    }
  }
  var extent2 = [min, max];
  if (extent2.some(function(v2) {
    return !isFinite(v2);
  })) {
    return void 0;
  }
  return extent2;
}
var init_array = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/util/array.js"() {
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/label.js
function calculateLabelRotation(opts2) {
  var _a5 = opts2.parallelFlipRotation, parallelFlipRotation = _a5 === void 0 ? 0 : _a5, _b2 = opts2.regularFlipRotation, regularFlipRotation = _b2 === void 0 ? 0 : _b2;
  var labelRotation = opts2.rotation ? normalizeAngle360(toRadians(opts2.rotation)) : 0;
  var parallelFlipFlag = !labelRotation && parallelFlipRotation >= 0 && parallelFlipRotation <= Math.PI ? -1 : 1;
  var regularFlipFlag = !labelRotation && regularFlipRotation >= 0 && regularFlipRotation <= Math.PI ? -1 : 1;
  var autoRotation = 0;
  if (opts2.parallel) {
    autoRotation = parallelFlipFlag * Math.PI / 2;
  } else if (regularFlipFlag === -1) {
    autoRotation = Math.PI;
  }
  return { labelRotation, autoRotation, parallelFlipFlag, regularFlipFlag };
}
var __decorate18, Label;
var init_label = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/label.js"() {
    init_validation();
    init_text();
    init_angle();
    __decorate18 = function(decorators, target2, key2, desc) {
      var c = arguments.length, r = c < 3 ? target2 : desc === null ? desc = Object.getOwnPropertyDescriptor(target2, key2) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target2, key2, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target2, key2, r) : d(target2, key2)) || r;
      return c > 3 && r && Object.defineProperty(target2, key2, r), r;
    };
    Label = /** @class */
    function() {
      function Label2() {
        this.enabled = true;
        this.fontSize = 12;
        this.fontFamily = "Verdana, sans-serif";
        this.fontStyle = void 0;
        this.fontWeight = void 0;
        this.color = "rgba(70, 70, 70, 1)";
      }
      Label2.prototype.getFont = function() {
        return getFont(this.fontSize, this.fontFamily, this.fontStyle, this.fontWeight);
      };
      __decorate18([
        Validate(BOOLEAN)
      ], Label2.prototype, "enabled", void 0);
      __decorate18([
        Validate(NUMBER(0))
      ], Label2.prototype, "fontSize", void 0);
      __decorate18([
        Validate(STRING)
      ], Label2.prototype, "fontFamily", void 0);
      __decorate18([
        Validate(OPT_FONT_STYLE)
      ], Label2.prototype, "fontStyle", void 0);
      __decorate18([
        Validate(OPT_FONT_WEIGHT)
      ], Label2.prototype, "fontWeight", void 0);
      __decorate18([
        Validate(COLOR_STRING)
      ], Label2.prototype, "color", void 0);
      return Label2;
    }();
  }
});

// node_modules/ag-charts-community/dist/esm/es5/axis.js
var __decorate19, __read15, __spread10, TICK_COUNT, OPT_TICK_COUNT, OPT_TICK_INTERVAL, GRID_STYLE_KEYS, GRID_STYLE, Tags, AxisLine, AxisTick, AxisLabel, Axis;
var init_axis = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/axis.js"() {
    init_group();
    init_selection();
    init_line();
    init_text();
    init_arc();
    init_bbox();
    init_caption();
    init_id();
    init_angle();
    init_interval();
    init_equal();
    init_validation();
    init_layers();
    init_labelPlacement();
    init_continuousScale();
    init_matrix();
    init_timeScale();
    init_logScale();
    init_default();
    init_deprecation();
    init_array();
    init_chartAxisDirection();
    init_label();
    init_logger();
    __decorate19 = function(decorators, target2, key2, desc) {
      var c = arguments.length, r = c < 3 ? target2 : desc === null ? desc = Object.getOwnPropertyDescriptor(target2, key2) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target2, key2, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target2, key2, r) : d(target2, key2)) || r;
      return c > 3 && r && Object.defineProperty(target2, key2, r), r;
    };
    __read15 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread10 = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read15(arguments[i]));
      return ar;
    };
    TICK_COUNT = predicateWithMessage(function(v, ctx) {
      return NUMBER(0)(v, ctx) || v instanceof TimeInterval;
    }, "expecting a tick count Number value or, for a time axis, a Time Interval such as 'agCharts.time.month'");
    OPT_TICK_COUNT = predicateWithMessage(function(v, ctx) {
      return OPTIONAL(v, ctx, TICK_COUNT);
    }, "expecting an optional tick count Number value or, for a time axis, a Time Interval such as 'agCharts.time.month'");
    OPT_TICK_INTERVAL = predicateWithMessage(function(v, ctx) {
      return OPTIONAL(v, ctx, function(v2, ctx2) {
        return v2 !== 0 && NUMBER(0)(v2, ctx2) || v2 instanceof TimeInterval;
      });
    }, "expecting an optional non-zero positive Number value or, for a time axis, a Time Interval such as 'agCharts.time.month'");
    GRID_STYLE_KEYS = ["stroke", "lineDash"];
    GRID_STYLE = predicateWithMessage(ARRAY(void 0, function(o) {
      for (var key2 in o) {
        if (!GRID_STYLE_KEYS.includes(key2)) {
          return false;
        }
      }
      return true;
    }), "expecting an Array of objects with gridline style properties such as 'stroke' and 'lineDash'");
    (function(Tags2) {
      Tags2[Tags2["TickLine"] = 0] = "TickLine";
      Tags2[Tags2["TickLabel"] = 1] = "TickLabel";
      Tags2[Tags2["GridLine"] = 2] = "GridLine";
      Tags2[Tags2["GridArc"] = 3] = "GridArc";
      Tags2[Tags2["AxisLine"] = 4] = "AxisLine";
    })(Tags || (Tags = {}));
    AxisLine = /** @class */
    function() {
      function AxisLine2() {
        this.width = 1;
        this.color = "rgba(195, 195, 195, 1)";
      }
      __decorate19([
        Validate(NUMBER(0))
      ], AxisLine2.prototype, "width", void 0);
      __decorate19([
        Validate(OPT_COLOR_STRING)
      ], AxisLine2.prototype, "color", void 0);
      return AxisLine2;
    }();
    AxisTick = /** @class */
    function() {
      function AxisTick2() {
        this.width = 1;
        this.size = 6;
        this.color = "rgba(195, 195, 195, 1)";
        this.count = void 0;
        this.interval = void 0;
        this.values = void 0;
        this.minSpacing = NaN;
        this.maxSpacing = NaN;
      }
      __decorate19([
        Validate(NUMBER(0))
      ], AxisTick2.prototype, "width", void 0);
      __decorate19([
        Validate(NUMBER(0))
      ], AxisTick2.prototype, "size", void 0);
      __decorate19([
        Validate(OPT_COLOR_STRING)
      ], AxisTick2.prototype, "color", void 0);
      __decorate19([
        Validate(OPT_TICK_COUNT),
        Deprecated("Use tick.interval or tick.minSpacing and tick.maxSpacing instead")
      ], AxisTick2.prototype, "count", void 0);
      __decorate19([
        Validate(OPT_TICK_INTERVAL)
      ], AxisTick2.prototype, "interval", void 0);
      __decorate19([
        Validate(OPT_ARRAY())
      ], AxisTick2.prototype, "values", void 0);
      __decorate19([
        Validate(AND(NUMBER_OR_NAN(1), LESS_THAN("maxSpacing"))),
        Default(NaN)
      ], AxisTick2.prototype, "minSpacing", void 0);
      __decorate19([
        Validate(AND(NUMBER_OR_NAN(1), GREATER_THAN("minSpacing"))),
        Default(NaN)
      ], AxisTick2.prototype, "maxSpacing", void 0);
      return AxisTick2;
    }();
    AxisLabel = /** @class */
    function() {
      function AxisLabel2() {
        this.fontStyle = void 0;
        this.fontWeight = void 0;
        this.fontSize = 12;
        this.fontFamily = "Verdana, sans-serif";
        this.padding = 5;
        this.minSpacing = NaN;
        this.color = "rgba(87, 87, 87, 1)";
        this.rotation = void 0;
        this.autoRotate = void 0;
        this.autoRotateAngle = 335;
        this.avoidCollisions = true;
        this.mirrored = false;
        this.parallel = false;
        this.formatter = void 0;
        this.format = void 0;
      }
      __decorate19([
        Validate(OPT_FONT_STYLE)
      ], AxisLabel2.prototype, "fontStyle", void 0);
      __decorate19([
        Validate(OPT_FONT_WEIGHT)
      ], AxisLabel2.prototype, "fontWeight", void 0);
      __decorate19([
        Validate(NUMBER(1))
      ], AxisLabel2.prototype, "fontSize", void 0);
      __decorate19([
        Validate(STRING)
      ], AxisLabel2.prototype, "fontFamily", void 0);
      __decorate19([
        Validate(NUMBER(0))
      ], AxisLabel2.prototype, "padding", void 0);
      __decorate19([
        Validate(NUMBER_OR_NAN()),
        Default(NaN)
      ], AxisLabel2.prototype, "minSpacing", void 0);
      __decorate19([
        Validate(OPT_COLOR_STRING)
      ], AxisLabel2.prototype, "color", void 0);
      __decorate19([
        Validate(OPT_NUMBER(-360, 360))
      ], AxisLabel2.prototype, "rotation", void 0);
      __decorate19([
        Validate(OPT_BOOLEAN)
      ], AxisLabel2.prototype, "autoRotate", void 0);
      __decorate19([
        Validate(NUMBER(-360, 360))
      ], AxisLabel2.prototype, "autoRotateAngle", void 0);
      __decorate19([
        Validate(BOOLEAN)
      ], AxisLabel2.prototype, "avoidCollisions", void 0);
      __decorate19([
        Validate(BOOLEAN)
      ], AxisLabel2.prototype, "mirrored", void 0);
      __decorate19([
        Validate(BOOLEAN)
      ], AxisLabel2.prototype, "parallel", void 0);
      __decorate19([
        Validate(OPT_STRING)
      ], AxisLabel2.prototype, "format", void 0);
      return AxisLabel2;
    }();
    Axis = /** @class */
    function() {
      function Axis2(scale) {
        this.id = createId(this);
        this.nice = true;
        this.dataDomain = [];
        this.axisGroup = new Group({ name: this.id + "-axis", zIndex: Layers.AXIS_ZINDEX });
        this.lineNode = this.axisGroup.appendChild(new Line());
        this.tickLineGroup = this.axisGroup.appendChild(new Group({ name: this.id + "-Axis-tick-lines", zIndex: Layers.AXIS_ZINDEX }));
        this.tickLabelGroup = this.axisGroup.appendChild(new Group({ name: this.id + "-Axis-tick-labels", zIndex: Layers.AXIS_ZINDEX }));
        this.crossLineGroup = new Group({ name: this.id + "-CrossLines" });
        this.gridGroup = new Group({ name: this.id + "-Axis-grid" });
        this.gridLineGroup = this.gridGroup.appendChild(new Group({
          name: this.id + "-gridLines",
          zIndex: Layers.AXIS_GRID_ZINDEX
        }));
        this.gridArcGroup = this.gridGroup.appendChild(new Group({
          name: this.id + "-gridArcs",
          zIndex: Layers.AXIS_GRID_ZINDEX
        }));
        this.tickLineGroupSelection = Selection.select(this.tickLineGroup, Line);
        this.tickLabelGroupSelection = Selection.select(this.tickLabelGroup, Text);
        this.gridLineGroupSelection = Selection.select(this.gridLineGroup, Line);
        this.gridArcGroupSelection = Selection.select(this.gridArcGroup, Arc);
        this._crossLines = [];
        this.line = new AxisLine();
        this.tick = new AxisTick();
        this.label = new AxisLabel();
        this.translation = { x: 0, y: 0 };
        this.rotation = 0;
        this.layout = {
          label: {
            align: "center",
            baseline: "middle",
            rotation: 0,
            fractionDigits: 0,
            padding: this.label.padding,
            format: this.label.format
          }
        };
        this.requestedRange = [0, 1];
        this._visibleRange = [0, 1];
        this._title = void 0;
        this._gridLength = 0;
        this.gridStyle = [
          {
            stroke: "rgba(219, 219, 219, 1)",
            lineDash: [4, 2]
          }
        ];
        this._radialGrid = false;
        this.fractionDigits = 0;
        this.gridPadding = 0;
        this.seriesAreaPadding = 0;
        this.thickness = 0;
        this._scale = scale;
        this.refreshScale();
      }
      Object.defineProperty(Axis2.prototype, "scale", {
        get: function() {
          return this._scale;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Axis2.prototype, "crossLines", {
        get: function() {
          return this._crossLines;
        },
        set: function(value) {
          var _this = this;
          var _a5, _b2;
          (_a5 = this._crossLines) === null || _a5 === void 0 ? void 0 : _a5.forEach(function(crossLine) {
            return _this.detachCrossLine(crossLine);
          });
          this._crossLines = value;
          (_b2 = this._crossLines) === null || _b2 === void 0 ? void 0 : _b2.forEach(function(crossLine) {
            _this.attachCrossLine(crossLine);
            _this.initCrossLine(crossLine);
          });
        },
        enumerable: false,
        configurable: true
      });
      Axis2.prototype.attachCrossLine = function(crossLine) {
        this.crossLineGroup.appendChild(crossLine.group);
      };
      Axis2.prototype.detachCrossLine = function(crossLine) {
        this.crossLineGroup.removeChild(crossLine.group);
      };
      Axis2.prototype.destroy = function() {
      };
      Axis2.prototype.refreshScale = function() {
        var _this = this;
        var _a5;
        this.requestedRange = this.scale.range.slice();
        (_a5 = this.crossLines) === null || _a5 === void 0 ? void 0 : _a5.forEach(function(crossLine) {
          _this.initCrossLine(crossLine);
        });
      };
      Axis2.prototype.updateRange = function() {
        var _a5;
        var _b2 = this, rr = _b2.requestedRange, vr = _b2.visibleRange, scale = _b2.scale;
        var span = (rr[1] - rr[0]) / (vr[1] - vr[0]);
        var shift = span * vr[0];
        var start = rr[0] - shift;
        scale.range = [start, start + span];
        (_a5 = this.crossLines) === null || _a5 === void 0 ? void 0 : _a5.forEach(function(crossLine) {
          crossLine.clippedRange = [rr[0], rr[1]];
        });
      };
      Axis2.prototype.setCrossLinesVisible = function(visible) {
        this.crossLineGroup.visible = visible;
      };
      Axis2.prototype.attachAxis = function(node, nextNode) {
        node.insertBefore(this.gridGroup, nextNode);
        node.insertBefore(this.axisGroup, nextNode);
        node.insertBefore(this.crossLineGroup, nextNode);
      };
      Axis2.prototype.detachAxis = function(node) {
        node.removeChild(this.gridGroup);
        node.removeChild(this.axisGroup);
        node.removeChild(this.crossLineGroup);
      };
      Axis2.prototype.inRange = function(x, width, tolerance) {
        if (width === void 0) {
          width = 0;
        }
        if (tolerance === void 0) {
          tolerance = 0;
        }
        return this.inRangeEx(x, width, tolerance) === 0;
      };
      Axis2.prototype.inRangeEx = function(x, width, tolerance) {
        if (width === void 0) {
          width = 0;
        }
        if (tolerance === void 0) {
          tolerance = 0;
        }
        var range2 = this.range;
        var min = Math.min(range2[0], range2[1]);
        var max = Math.max(range2[0], range2[1]);
        if (x + width < min - tolerance) {
          return -1;
        }
        if (x > max + tolerance) {
          return 1;
        }
        return 0;
      };
      Object.defineProperty(Axis2.prototype, "range", {
        get: function() {
          return this.requestedRange;
        },
        set: function(value) {
          this.requestedRange = value.slice();
          this.updateRange();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Axis2.prototype, "visibleRange", {
        get: function() {
          return this._visibleRange.slice();
        },
        set: function(value) {
          if (value && value.length === 2) {
            var _a5 = __read15(value, 2), min = _a5[0], max = _a5[1];
            min = Math.max(0, min);
            max = Math.min(1, max);
            min = Math.min(min, max);
            max = Math.max(min, max);
            this._visibleRange = [min, max];
            this.updateRange();
          }
        },
        enumerable: false,
        configurable: true
      });
      Axis2.prototype.onLabelFormatChange = function(ticks, format2) {
        var _a5 = this, scale = _a5.scale, fractionDigits = _a5.fractionDigits;
        var logScale = scale instanceof LogScale;
        var defaultLabelFormatter = !logScale && fractionDigits > 0 ? function(x) {
          return typeof x === "number" ? x.toFixed(fractionDigits) : String(x);
        } : function(x) {
          return String(x);
        };
        if (format2 && scale && scale.tickFormat) {
          try {
            this.labelFormatter = scale.tickFormat({
              ticks,
              specifier: format2
            });
          } catch (e) {
            this.labelFormatter = defaultLabelFormatter;
            Logger.warnOnce("the axis label format string " + format2 + " is invalid. No formatting will be applied");
          }
        } else {
          this.labelFormatter = defaultLabelFormatter;
        }
      };
      Object.defineProperty(Axis2.prototype, "title", {
        get: function() {
          return this._title;
        },
        set: function(value) {
          var oldTitle = this._title;
          if (oldTitle !== value) {
            if (oldTitle) {
              this.axisGroup.removeChild(oldTitle.node);
            }
            if (value) {
              value.node.rotation = -Math.PI / 2;
              this.axisGroup.appendChild(value.node);
            }
            this._title = value;
            this.setTickCount(this.tick.count);
            this.setTickInterval(this.tick.interval);
            this.updateTitle({ ticks: this.scale.ticks() });
          }
        },
        enumerable: false,
        configurable: true
      });
      Axis2.prototype.setDomain = function() {
        var _a5;
        var _b2 = this, scale = _b2.scale, dataDomain = _b2.dataDomain, tickValues = _b2.tick.values;
        if (tickValues && scale instanceof ContinuousScale) {
          var _c2 = __read15((_a5 = extent(tickValues)) !== null && _a5 !== void 0 ? _a5 : [Infinity, -Infinity], 2), tickMin = _c2[0], tickMax = _c2[1];
          var min = Math.min(scale.fromDomain(dataDomain[0]), tickMin);
          var max = Math.max(scale.fromDomain(dataDomain[1]), tickMax);
          scale.domain = [scale.toDomain(min), scale.toDomain(max)];
        } else {
          scale.domain = dataDomain;
        }
      };
      Axis2.prototype.setTickInterval = function(interval) {
        var _a5;
        this.scale.interval = (_a5 = this.tick.interval) !== null && _a5 !== void 0 ? _a5 : interval;
      };
      Axis2.prototype.setTickCount = function(count, minTickCount, maxTickCount) {
        var scale = this.scale;
        if (!(count && scale instanceof ContinuousScale)) {
          return;
        }
        if (typeof count === "number") {
          scale.tickCount = count;
          scale.minTickCount = minTickCount !== null && minTickCount !== void 0 ? minTickCount : 0;
          scale.maxTickCount = maxTickCount !== null && maxTickCount !== void 0 ? maxTickCount : Infinity;
          return;
        }
        if (scale instanceof TimeScale) {
          this.setTickInterval(count);
        }
      };
      Object.defineProperty(Axis2.prototype, "gridLength", {
        get: function() {
          return this._gridLength;
        },
        set: function(value) {
          var _this = this;
          var _a5;
          if (this._gridLength && !value || !this._gridLength && value) {
            this.gridLineGroupSelection = this.gridLineGroupSelection.clear();
            this.gridArcGroupSelection = this.gridArcGroupSelection.clear();
          }
          this._gridLength = value;
          (_a5 = this.crossLines) === null || _a5 === void 0 ? void 0 : _a5.forEach(function(crossLine) {
            _this.initCrossLine(crossLine);
          });
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Axis2.prototype, "radialGrid", {
        get: function() {
          return this._radialGrid;
        },
        set: function(value) {
          if (this._radialGrid !== value) {
            this._radialGrid = value;
            this.gridLineGroupSelection = this.gridLineGroupSelection.clear();
            this.gridArcGroupSelection = this.gridArcGroupSelection.clear();
          }
        },
        enumerable: false,
        configurable: true
      });
      Axis2.prototype.update = function(primaryTickCount) {
        var _a5, _b2;
        this.calculateDomain();
        var _c2 = this, scale = _c2.scale, gridLength = _c2.gridLength, tick = _c2.tick, _d2 = _c2.label, parallelLabels = _d2.parallel, mirrored = _d2.mirrored, avoidCollisions = _d2.avoidCollisions, requestedRange = _c2.requestedRange;
        var requestedRangeMin = Math.min.apply(Math, __spread10(requestedRange));
        var requestedRangeMax = Math.max.apply(Math, __spread10(requestedRange));
        var rotation = toRadians(this.rotation);
        var anySeriesActive = this.isAnySeriesActive();
        var sideFlag = mirrored ? 1 : -1;
        var parallelFlipRotation = normalizeAngle360(rotation);
        var regularFlipRotation = normalizeAngle360(rotation - Math.PI / 2);
        var nice = this.nice;
        this.setDomain();
        this.setTickInterval(this.tick.interval);
        if (scale instanceof ContinuousScale) {
          scale.nice = nice;
          this.setTickCount(this.tick.count);
          scale.update();
        }
        var halfBandwidth = (scale.bandwidth || 0) / 2;
        this.updatePosition();
        this.updateLine();
        var i = 0;
        var labelOverlap = true;
        var ticks = [];
        var _e = this.estimateTickCount({
          minSpacing: this.tick.minSpacing,
          maxSpacing: this.tick.maxSpacing
        }), maxTickCount = _e.maxTickCount, minTickCount = _e.minTickCount, defaultTickCount = _e.defaultTickCount;
        var continuous = scale instanceof ContinuousScale;
        var secondaryAxis = primaryTickCount !== void 0;
        var checkForOverlap = avoidCollisions && this.tick.interval === void 0 && this.tick.values === void 0;
        var tickSpacing = !isNaN(this.tick.minSpacing) || !isNaN(this.tick.maxSpacing);
        var maxIterations = this.tick.count || !continuous || isNaN(maxTickCount) ? 10 : maxTickCount;
        while (labelOverlap) {
          var unchanged = true;
          var _loop_1 = function() {
            if (i > maxIterations) {
              return "break";
            }
            var prevTicks = ticks;
            var tickCount = Math.max(defaultTickCount - i, minTickCount);
            var filterTicks = checkForOverlap && !(continuous && this_1.tick.count === void 0) && (tickSpacing || i !== 0);
            if (this_1.tick.values) {
              ticks = this_1.tick.values;
            } else if (maxTickCount === 0) {
              ticks = [];
            } else if (i === 0 || !filterTicks) {
              this_1.setTickCount((_a5 = this_1.tick.count) !== null && _a5 !== void 0 ? _a5 : tickCount, minTickCount, maxTickCount);
              ticks = scale.ticks();
            }
            if (filterTicks) {
              var keepEvery_1 = tickSpacing ? Math.ceil(ticks.length / tickCount) : 2;
              ticks = ticks.filter(function(_, i2) {
                return i2 % keepEvery_1 === 0;
              });
            }
            var secondaryAxisTicks = void 0;
            if (secondaryAxis) {
              secondaryAxisTicks = this_1.updateSecondaryAxisTicks(primaryTickCount);
              ticks = secondaryAxisTicks;
            }
            this_1.updateSelections({
              halfBandwidth,
              gridLength,
              ticks
            });
            if (!secondaryAxis && ticks.length > 0) {
              primaryTickCount = ticks.length;
            }
            unchanged = checkForOverlap ? areArrayNumbersEqual(ticks, prevTicks) : false;
            i++;
          };
          var this_1 = this;
          while (unchanged) {
            var state_1 = _loop_1();
            if (state_1 === "break")
              break;
          }
          if (unchanged) {
            break;
          }
          this.onLabelFormatChange(ticks, this.label.format);
          var _f = this.updateLabels({
            parallelFlipRotation,
            regularFlipRotation,
            sideFlag,
            tickLabelGroupSelection: this.tickLabelGroupSelection,
            ticks
          }), labelData = _f.labelData, rotated = _f.rotated;
          var labelSpacing = this.getLabelSpacing(rotated);
          labelOverlap = checkForOverlap ? axisLabelsOverlap(labelData, labelSpacing) : false;
        }
        this.updateGridLines({
          gridLength,
          halfBandwidth,
          sideFlag
        });
        var anyTickVisible = false;
        var visibleFn = function(node) {
          var min = Math.floor(requestedRangeMin);
          var max = Math.ceil(requestedRangeMax);
          if (min === max) {
            node.visible = false;
            return;
          }
          if (node.translationY >= min - 1 && node.translationY < min) {
            node.translationY = min;
          }
          if (node.translationY > max && node.translationY <= max + 1) {
            node.translationY = max;
          }
          var visible = node.translationY >= min && node.translationY <= max;
          if (visible) {
            anyTickVisible = true;
          }
          node.visible = visible;
        };
        var _g = this, gridLineGroupSelection = _g.gridLineGroupSelection, gridArcGroupSelection = _g.gridArcGroupSelection, tickLineGroupSelection = _g.tickLineGroupSelection, tickLabelGroupSelection = _g.tickLabelGroupSelection;
        gridLineGroupSelection.each(visibleFn);
        gridArcGroupSelection.each(visibleFn);
        tickLineGroupSelection.each(visibleFn);
        tickLabelGroupSelection.each(visibleFn);
        this.tickLineGroup.visible = anyTickVisible;
        this.tickLabelGroup.visible = anyTickVisible;
        this.gridLineGroup.visible = anyTickVisible;
        this.gridArcGroup.visible = anyTickVisible;
        (_b2 = this.crossLines) === null || _b2 === void 0 ? void 0 : _b2.forEach(function(crossLine) {
          crossLine.sideFlag = -sideFlag;
          crossLine.direction = rotation === -Math.PI / 2 ? ChartAxisDirection.X : ChartAxisDirection.Y;
          crossLine.label.parallel = crossLine.label.parallel !== void 0 ? crossLine.label.parallel : parallelLabels;
          crossLine.parallelFlipRotation = parallelFlipRotation;
          crossLine.regularFlipRotation = regularFlipRotation;
          crossLine.update(anySeriesActive);
        });
        this.updateTitle({ ticks });
        tickLineGroupSelection.each(function(line) {
          line.strokeWidth = tick.width;
          line.stroke = tick.color;
          line.visible = anyTickVisible;
          line.x1 = sideFlag * tick.size;
          line.x2 = 0;
          line.y1 = 0;
          line.y2 = 0;
        });
        return primaryTickCount;
      };
      Axis2.prototype.estimateTickCount = function(_a5) {
        var minSpacing = _a5.minSpacing, maxSpacing = _a5.maxSpacing;
        var requestedRange = this.requestedRange;
        var min = Math.min.apply(Math, __spread10(requestedRange));
        var max = Math.max.apply(Math, __spread10(requestedRange));
        var availableRange = max - min;
        var defaultMinSpacing = Math.max(Axis2.defaultTickMinSpacing, availableRange / ContinuousScale.defaultMaxTickCount);
        if (isNaN(minSpacing) && isNaN(maxSpacing)) {
          minSpacing = defaultMinSpacing;
          maxSpacing = availableRange;
          if (minSpacing > maxSpacing) {
            maxSpacing = minSpacing;
          }
        } else if (isNaN(minSpacing)) {
          minSpacing = defaultMinSpacing;
          if (minSpacing > maxSpacing) {
            minSpacing = maxSpacing;
          }
        } else if (isNaN(maxSpacing)) {
          maxSpacing = availableRange;
          if (minSpacing > maxSpacing) {
            maxSpacing = minSpacing;
          }
        }
        var maxTickCount = Math.max(1, Math.floor(availableRange / minSpacing));
        var minTickCount = Math.min(maxTickCount, Math.ceil(availableRange / maxSpacing));
        var defaultTickCount = ContinuousScale.defaultTickCount;
        if (defaultTickCount > maxTickCount) {
          defaultTickCount = maxTickCount;
        } else if (defaultTickCount < minTickCount) {
          defaultTickCount = minTickCount;
        }
        return { minTickCount, maxTickCount, defaultTickCount };
      };
      Axis2.prototype.getLabelSpacing = function(rotated) {
        var label = this.label;
        if (!isNaN(label.minSpacing)) {
          return label.minSpacing;
        }
        return rotated ? 0 : 10;
      };
      Axis2.prototype.calculateDomain = function() {
      };
      Axis2.prototype.updatePosition = function() {
        var _a5 = this, label = _a5.label, crossLineGroup = _a5.crossLineGroup, axisGroup = _a5.axisGroup, gridGroup = _a5.gridGroup, translation = _a5.translation, gridLineGroupSelection = _a5.gridLineGroupSelection, gridPadding = _a5.gridPadding, gridLength = _a5.gridLength;
        var rotation = toRadians(this.rotation);
        var sideFlag = label.mirrored ? 1 : -1;
        var translationX = Math.floor(translation.x);
        var translationY = Math.floor(translation.y);
        crossLineGroup.translationX = translationX;
        crossLineGroup.translationY = translationY;
        crossLineGroup.rotation = rotation;
        axisGroup.translationX = translationX;
        axisGroup.translationY = translationY;
        axisGroup.rotation = rotation;
        gridGroup.translationX = translationX;
        gridGroup.translationY = translationY;
        gridGroup.rotation = rotation;
        gridLineGroupSelection.each(function(line) {
          line.x1 = gridPadding;
          line.x2 = -sideFlag * gridLength + gridPadding;
          line.y1 = 0;
          line.y2 = 0;
        });
      };
      Axis2.prototype.updateSecondaryAxisTicks = function(_primaryTickCount) {
        throw new Error("AG Charts - unexpected call to updateSecondaryAxisTicks() - check axes configuration.");
      };
      Axis2.prototype.updateSelections = function(_a5) {
        var ticks = _a5.ticks, halfBandwidth = _a5.halfBandwidth, gridLength = _a5.gridLength;
        var scale = this.scale;
        var data = ticks.map(function(t) {
          return { tick: t, translationY: scale.convert(t) + halfBandwidth };
        });
        var gridLineGroupSelection = this.radialGrid ? this.gridLineGroupSelection : this.gridLineGroupSelection.update(gridLength ? data : [], function(group2) {
          var node = new Line();
          node.tag = Tags.GridLine;
          group2.append(node);
        });
        var gridArcGroupSelection = this.radialGrid ? this.gridArcGroupSelection.update(gridLength ? data : [], function(group2) {
          var node = new Arc();
          node.tag = Tags.GridArc;
          group2.append(node);
        }) : this.gridArcGroupSelection;
        var tickLineGroupSelection = this.tickLineGroupSelection.update(data, function(group2) {
          var line = new Line();
          line.tag = Tags.TickLine;
          group2.appendChild(line);
        });
        var tickLabelGroupSelection = this.tickLabelGroupSelection.update(data, function(group2) {
          var text = new Text();
          text.tag = Tags.TickLabel;
          group2.appendChild(text);
        });
        var translationFn = function(node) {
          return node.translationY = Math.round(node.datum.translationY);
        };
        gridLineGroupSelection.each(translationFn);
        gridArcGroupSelection.each(translationFn);
        tickLineGroupSelection.each(translationFn);
        tickLabelGroupSelection.each(translationFn);
        this.tickLineGroupSelection = tickLineGroupSelection;
        this.tickLabelGroupSelection = tickLabelGroupSelection;
        this.gridLineGroupSelection = gridLineGroupSelection;
        this.gridArcGroupSelection = gridArcGroupSelection;
      };
      Axis2.prototype.updateGridLines = function(_a5) {
        var gridLength = _a5.gridLength, halfBandwidth = _a5.halfBandwidth, sideFlag = _a5.sideFlag;
        var _b2 = this, gridStyle = _b2.gridStyle, scale = _b2.scale, tick = _b2.tick, gridPadding = _b2.gridPadding;
        if (gridLength && gridStyle.length) {
          var styleCount_1 = gridStyle.length;
          var grid = void 0;
          if (this.radialGrid) {
            var angularGridLength_1 = normalizeAngle360Inclusive(toRadians(gridLength));
            grid = this.gridArcGroupSelection.each(function(arc, datum) {
              var radius = Math.round(scale.convert(datum) + halfBandwidth);
              arc.centerX = 0;
              arc.centerY = scale.range[0] - radius;
              arc.endAngle = angularGridLength_1;
              arc.radius = radius;
            });
          } else {
            grid = this.gridLineGroupSelection.each(function(line) {
              line.x1 = gridPadding;
              line.x2 = -sideFlag * gridLength + gridPadding;
              line.y1 = 0;
              line.y2 = 0;
            });
          }
          grid.each(function(node, _, index) {
            var style = gridStyle[index % styleCount_1];
            node.stroke = style.stroke;
            node.strokeWidth = tick.width;
            node.lineDash = style.lineDash;
            node.fill = void 0;
          });
        }
      };
      Axis2.prototype.updateLabels = function(_a5) {
        var _this = this;
        var ticks = _a5.ticks, tickLabelGroupSelection = _a5.tickLabelGroupSelection, sideFlag = _a5.sideFlag, parallelFlipRotation = _a5.parallelFlipRotation, regularFlipRotation = _a5.regularFlipRotation;
        var _b2 = this, label = _b2.label, _c2 = _b2.label, parallel = _c2.parallel, rotation = _c2.rotation, tick = _b2.tick;
        var labelAutoRotation = 0;
        var _d2 = calculateLabelRotation({
          rotation,
          parallel,
          regularFlipRotation,
          parallelFlipRotation
        }), autoRotation = _d2.autoRotation, labelRotation = _d2.labelRotation, parallelFlipFlag = _d2.parallelFlipFlag, regularFlipFlag = _d2.regularFlipFlag;
        this.fractionDigits = ticks.fractionDigits >= 0 ? ticks.fractionDigits : 0;
        var labelBboxes = /* @__PURE__ */ new Map();
        var labelX = sideFlag * (tick.size + label.padding + this.seriesAreaPadding);
        var labelMatrix = new Matrix();
        Matrix.updateTransformMatrix(labelMatrix, 1, 1, autoRotation, 0, 0);
        var labelData = [];
        var labelSelection = tickLabelGroupSelection.each(function(node, datum, index) {
          var tick2 = datum.tick, translationY = datum.translationY;
          node.fontStyle = label.fontStyle;
          node.fontWeight = label.fontWeight;
          node.fontSize = label.fontSize;
          node.fontFamily = label.fontFamily;
          node.fill = label.color;
          node.text = _this.formatTickDatum(tick2, index);
          var userHidden = node.text === "" || node.text == void 0;
          var bbox = node.computeBBox();
          var width = bbox.width, height = bbox.height;
          var translatedBBox = new BBox(labelX, translationY, 0, 0);
          labelMatrix.transformBBox(translatedBBox, bbox);
          var _a6 = bbox.x, x = _a6 === void 0 ? 0 : _a6, _b3 = bbox.y, y = _b3 === void 0 ? 0 : _b3;
          bbox.width = width;
          bbox.height = height;
          labelBboxes.set(index, userHidden ? null : bbox);
          if (userHidden) {
            return;
          }
          labelData.push({
            point: {
              x,
              y,
              size: 0
            },
            label: {
              width,
              height,
              text: ""
            }
          });
        });
        var labelSpacing = this.getLabelSpacing();
        var rotate = axisLabelsOverlap(labelData, labelSpacing);
        if (label.rotation === void 0 && label.autoRotate === true && rotate) {
          labelAutoRotation = normalizeAngle360(toRadians(label.autoRotateAngle));
        }
        var labelTextBaseline = "middle";
        if (parallel && !labelRotation) {
          if (sideFlag * parallelFlipFlag === -1) {
            labelTextBaseline = "hanging";
          } else {
            labelTextBaseline = "bottom";
          }
        }
        var labelRotated = labelRotation > 0 && labelRotation <= Math.PI;
        var labelAutoRotated = labelAutoRotation > 0 && labelAutoRotation <= Math.PI;
        var alignFlag = labelRotated || labelAutoRotated ? -1 : 1;
        var labelTextAlign = "start";
        if (parallel) {
          if (labelRotation || labelAutoRotation) {
            if (sideFlag * alignFlag === -1) {
              labelTextAlign = "end";
            }
          } else {
            labelTextAlign = "center";
          }
        } else if (sideFlag * regularFlipFlag === -1) {
          labelTextAlign = "end";
        }
        var combinedRotation = autoRotation + labelRotation + labelAutoRotation;
        if (combinedRotation) {
          Matrix.updateTransformMatrix(labelMatrix, 1, 1, combinedRotation, 0, 0);
        }
        labelData = [];
        labelSelection.each(function(label2, datum, index) {
          if (label2.text === "" || label2.text == void 0) {
            label2.visible = false;
            return;
          }
          label2.textBaseline = labelTextBaseline;
          label2.textAlign = labelTextAlign;
          label2.x = labelX;
          label2.rotationCenterX = labelX;
          label2.rotation = combinedRotation;
          var bbox = labelBboxes.get(index);
          if (!bbox) {
            return;
          }
          label2.visible = true;
          var _a6 = bbox.width, width = _a6 === void 0 ? 0 : _a6, _b3 = bbox.height, height = _b3 === void 0 ? 0 : _b3;
          var translationY = datum.translationY;
          var translatedBBox = new BBox(labelX, translationY, 0, 0);
          labelMatrix.transformBBox(translatedBBox, bbox);
          var _c3 = bbox.x, x = _c3 === void 0 ? 0 : _c3, _d3 = bbox.y, y = _d3 === void 0 ? 0 : _d3;
          labelData.push({
            point: {
              x,
              y,
              size: 0
            },
            label: {
              width,
              height,
              text: label2.text
            }
          });
        });
        this.layout.label = {
          align: labelTextAlign,
          baseline: labelTextBaseline,
          rotation: combinedRotation,
          fractionDigits: this.fractionDigits,
          padding: this.label.padding,
          format: this.label.format
        };
        return { labelData, rotated: !!(labelRotation || labelAutoRotation) };
      };
      Axis2.prototype.updateLine = function() {
        var _a5 = this, lineNode = _a5.lineNode, requestedRange = _a5.requestedRange;
        lineNode.x1 = 0;
        lineNode.x2 = 0;
        lineNode.y1 = requestedRange[0];
        lineNode.y2 = requestedRange[1];
        lineNode.strokeWidth = this.line.width;
        lineNode.stroke = this.line.color;
        lineNode.visible = true;
      };
      Axis2.prototype.updateTitle = function(_a5) {
        var ticks = _a5.ticks;
        var _b2 = this, label = _b2.label, rotation = _b2.rotation, title = _b2.title, lineNode = _b2.lineNode, requestedRange = _b2.requestedRange, tickLineGroup = _b2.tickLineGroup, tickLabelGroup = _b2.tickLabelGroup;
        if (!title) {
          return;
        }
        var titleVisible = false;
        if (title.enabled && lineNode.visible) {
          titleVisible = true;
          var sideFlag = label.mirrored ? 1 : -1;
          var parallelFlipRotation = normalizeAngle360(rotation);
          var padding = Caption.PADDING;
          var titleNode = title.node;
          var titleRotationFlag = sideFlag === -1 && parallelFlipRotation > Math.PI && parallelFlipRotation < Math.PI * 2 ? -1 : 1;
          titleNode.rotation = titleRotationFlag * sideFlag * Math.PI / 2;
          titleNode.x = Math.floor(titleRotationFlag * sideFlag * (requestedRange[0] + requestedRange[1]) / 2);
          var bboxYDimension = 0;
          if ((ticks === null || ticks === void 0 ? void 0 : ticks.length) > 0) {
            var tickBBox = Group.computeBBox([tickLineGroup, tickLabelGroup]);
            var tickWidth = rotation === 0 ? tickBBox.width : tickBBox.height;
            if (Math.abs(tickWidth) < Infinity) {
              bboxYDimension += tickWidth;
            }
          }
          if (sideFlag === -1) {
            titleNode.y = Math.floor(titleRotationFlag * (-padding - bboxYDimension));
          } else {
            titleNode.y = Math.floor(-padding - bboxYDimension);
          }
          titleNode.textBaseline = titleRotationFlag === 1 ? "bottom" : "top";
        }
        title.node.visible = titleVisible;
      };
      Axis2.prototype.formatTickDatum = function(datum, index) {
        var _a5 = this, label = _a5.label, labelFormatter = _a5.labelFormatter, fractionDigits = _a5.fractionDigits;
        if (label.formatter) {
          return label.formatter({
            value: fractionDigits > 0 ? datum : String(datum),
            index,
            fractionDigits,
            formatter: labelFormatter
          });
        } else if (labelFormatter) {
          return labelFormatter(datum);
        }
        return String(datum);
      };
      Axis2.prototype.formatDatum = function(datum) {
        return String(datum);
      };
      Axis2.prototype.computeBBox = function() {
        return this.axisGroup.computeBBox();
      };
      Axis2.prototype.initCrossLine = function(crossLine) {
        crossLine.scale = this.scale;
        crossLine.gridLength = this.gridLength;
      };
      Axis2.prototype.isAnySeriesActive = function() {
        return false;
      };
      Axis2.prototype.clipTickLines = function(x, y, width, height) {
        this.tickLineGroup.setClipRectInGroupCoordinateSpace(new BBox(x, y, width, height));
      };
      Axis2.prototype.clipGrid = function(x, y, width, height) {
        this.gridGroup.setClipRectInGroupCoordinateSpace(new BBox(x, y, width, height));
      };
      Axis2.prototype.calculatePadding = function(min, _max) {
        return Math.abs(min * 0.01);
      };
      Axis2.defaultTickMinSpacing = 50;
      __decorate19([
        Validate(BOOLEAN)
      ], Axis2.prototype, "nice", void 0);
      __decorate19([
        Validate(GRID_STYLE)
      ], Axis2.prototype, "gridStyle", void 0);
      __decorate19([
        Validate(NUMBER(0))
      ], Axis2.prototype, "thickness", void 0);
      return Axis2;
    }();
  }
});

// node_modules/ag-charts-community/dist/esm/es5/scale/linearScale.js
var __extends24, __read16, LinearScale;
var init_linearScale = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/scale/linearScale.js"() {
    init_continuousScale();
    init_ticks();
    init_numberFormat();
    __extends24 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __read16 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    LinearScale = /** @class */
    function(_super) {
      __extends24(LinearScale2, _super);
      function LinearScale2() {
        var _this = _super.call(this, [0, 1], [0, 1]) || this;
        _this.type = "linear";
        return _this;
      }
      LinearScale2.prototype.toDomain = function(d) {
        return d;
      };
      LinearScale2.prototype.ticks = function() {
        var _a5;
        var count = (_a5 = this.tickCount) !== null && _a5 !== void 0 ? _a5 : ContinuousScale.defaultTickCount;
        if (!this.domain || this.domain.length < 2 || count < 1 || this.domain.some(function(d) {
          return !isFinite(d);
        })) {
          return [];
        }
        this.refresh();
        var _b2 = __read16(this.getDomain(), 2), d0 = _b2[0], d1 = _b2[1];
        var interval = this.interval;
        if (interval) {
          var step = Math.abs(interval);
          if (!this.isDenseInterval({ start: d0, stop: d1, interval: step })) {
            return range(d0, d1, step);
          }
        }
        return ticks_default(d0, d1, count, this.minTickCount, this.maxTickCount);
      };
      LinearScale2.prototype.update = function() {
        if (!this.domain || this.domain.length < 2) {
          return;
        }
        if (this.nice) {
          this.updateNiceDomain();
        }
      };
      LinearScale2.prototype.updateNiceDomain = function() {
        var _a5, _b2;
        var count = (_a5 = this.tickCount) !== null && _a5 !== void 0 ? _a5 : ContinuousScale.defaultTickCount;
        var _c2 = __read16(this.domain, 2), start = _c2[0], stop = _c2[1];
        if (count < 1) {
          this.niceDomain = [start, stop];
          return;
        }
        if (count === 1) {
          this.niceDomain = singleTickDomain(start, stop);
          return;
        }
        var maxAttempts = 4;
        var prev0 = start;
        var prev1 = stop;
        for (var i = 0; i < maxAttempts; i++) {
          var step = (_b2 = this.interval) !== null && _b2 !== void 0 ? _b2 : tickStep(start, stop, count, this.minTickCount, this.maxTickCount);
          var _d2 = __read16(this.domain, 2), d0 = _d2[0], d1 = _d2[1];
          if (step >= 1) {
            start = Math.floor(d0 / step) * step;
            stop = Math.ceil(d1 / step) * step;
          } else {
            var s = 1 / step;
            start = Math.floor(d0 * s) / s;
            stop = Math.ceil(d1 * s) / s;
          }
          if (start === prev0 && stop === prev1) {
            break;
          }
          prev0 = start;
          prev1 = stop;
        }
        this.niceDomain = [start, stop];
      };
      LinearScale2.prototype.tickFormat = function(_a5) {
        var ticks = _a5.ticks, specifier = _a5.specifier;
        return tickFormat(ticks || this.ticks(), specifier);
      };
      return LinearScale2;
    }(ContinuousScale);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/chartAxis.js
function flipChartAxisDirection(direction) {
  if (direction === ChartAxisDirection.X) {
    return ChartAxisDirection.Y;
  } else {
    return ChartAxisDirection.X;
  }
}
var __extends25, __assign5, __decorate20, __read17, __spread11, __values14, ChartAxis;
var init_chartAxis = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/chartAxis.js"() {
    init_axis();
    init_chartAxisDirection();
    init_linearScale();
    init_continuousScale();
    init_validation();
    __extends25 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __assign5 = function() {
      __assign5 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign5.apply(this, arguments);
    };
    __decorate20 = function(decorators, target2, key2, desc) {
      var c = arguments.length, r = c < 3 ? target2 : desc === null ? desc = Object.getOwnPropertyDescriptor(target2, key2) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target2, key2, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target2, key2, r) : d(target2, key2)) || r;
      return c > 3 && r && Object.defineProperty(target2, key2, r), r;
    };
    __read17 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread11 = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read17(arguments[i]));
      return ar;
    };
    __values14 = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    ChartAxis = /** @class */
    function(_super) {
      __extends25(ChartAxis2, _super);
      function ChartAxis2(moduleCtx, scale) {
        var _this = _super.call(this, scale) || this;
        _this.moduleCtx = moduleCtx;
        _this.keys = [];
        _this.direction = ChartAxisDirection.Y;
        _this.boundSeries = [];
        _this.includeInvisibleDomains = false;
        _this.modules = {};
        _this._position = "left";
        return _this;
      }
      Object.defineProperty(ChartAxis2.prototype, "type", {
        get: function() {
          return this.constructor.type || "";
        },
        enumerable: false,
        configurable: true
      });
      ChartAxis2.prototype.useCalculatedTickCount = function() {
        return this.scale instanceof LinearScale;
      };
      Object.defineProperty(ChartAxis2.prototype, "position", {
        get: function() {
          return this._position;
        },
        set: function(value) {
          if (this._position !== value) {
            this._position = value;
            switch (value) {
              case "top":
                this.direction = ChartAxisDirection.X;
                this.rotation = -90;
                this.label.mirrored = true;
                this.label.parallel = true;
                break;
              case "right":
                this.direction = ChartAxisDirection.Y;
                this.rotation = 0;
                this.label.mirrored = true;
                this.label.parallel = false;
                break;
              case "bottom":
                this.direction = ChartAxisDirection.X;
                this.rotation = -90;
                this.label.mirrored = false;
                this.label.parallel = true;
                break;
              case "left":
                this.direction = ChartAxisDirection.Y;
                this.rotation = 0;
                this.label.mirrored = false;
                this.label.parallel = false;
                break;
            }
            if (this.axisContext) {
              this.axisContext.position = value;
              this.axisContext.direction = this.direction;
            }
          }
        },
        enumerable: false,
        configurable: true
      });
      ChartAxis2.prototype.calculateDomain = function() {
        var _a5;
        var _b2 = this, direction = _b2.direction, boundSeries = _b2.boundSeries, includeInvisibleDomains = _b2.includeInvisibleDomains;
        if (this.linkedTo) {
          this.dataDomain = this.linkedTo.dataDomain;
        } else {
          var domains_1 = [];
          boundSeries.filter(function(s) {
            return includeInvisibleDomains || s.isEnabled();
          }).forEach(function(series) {
            domains_1.push(series.getDomain(direction));
          });
          var domain = (_a5 = new Array()).concat.apply(_a5, __spread11(domains_1));
          this.dataDomain = this.normaliseDataDomain(domain);
        }
      };
      ChartAxis2.prototype.normaliseDataDomain = function(d) {
        return d;
      };
      ChartAxis2.prototype.isAnySeriesActive = function() {
        var _this = this;
        return this.boundSeries.some(function(s) {
          return _this.includeInvisibleDomains || s.isEnabled();
        });
      };
      ChartAxis2.prototype.getLayoutState = function() {
        return __assign5({ rect: this.computeBBox(), gridPadding: this.gridPadding, seriesAreaPadding: this.seriesAreaPadding, tickSize: this.tick.size }, this.layout);
      };
      ChartAxis2.prototype.addModule = function(module) {
        var _this = this;
        if (this.modules[module.optionsKey] != null) {
          throw new Error("AG Charts - module already initialised: " + module.optionsKey);
        }
        if (this.axisContext == null) {
          var keys = function() {
            return _this.boundSeries.map(function(s) {
              return s.getKeys(_this.direction);
            }).reduce(function(keys2, seriesKeys) {
              keys2.push.apply(keys2, __spread11(seriesKeys));
              return keys2;
            }, []);
          };
          this.axisContext = {
            axisId: this.id,
            position: this.position,
            direction: this.direction,
            continuous: this.scale instanceof ContinuousScale,
            keys,
            scaleValueFormatter: function(specifier) {
              var _a5, _b2, _c2;
              return (_c2 = (_b2 = (_a5 = _this.scale).tickFormat) === null || _b2 === void 0 ? void 0 : _b2.call(_a5, { specifier })) !== null && _c2 !== void 0 ? _c2 : void 0;
            },
            scaleBandwidth: function() {
              var _a5;
              return (_a5 = _this.scale.bandwidth) !== null && _a5 !== void 0 ? _a5 : 0;
            },
            scaleConvert: function(val) {
              return _this.scale.convert(val);
            },
            scaleInvert: function(val) {
              var _a5, _b2, _c2;
              return (_c2 = (_b2 = (_a5 = _this.scale).invert) === null || _b2 === void 0 ? void 0 : _b2.call(_a5, val)) !== null && _c2 !== void 0 ? _c2 : void 0;
            }
          };
        }
        var moduleMeta = module.initialiseModule(__assign5(__assign5({}, this.moduleCtx), { parent: this.axisContext }));
        this.modules[module.optionsKey] = moduleMeta;
        this[module.optionsKey] = moduleMeta.instance;
      };
      ChartAxis2.prototype.removeModule = function(module) {
        var _a5, _b2;
        (_b2 = (_a5 = this.modules[module.optionsKey]) === null || _a5 === void 0 ? void 0 : _a5.instance) === null || _b2 === void 0 ? void 0 : _b2.destroy();
        delete this.modules[module.optionsKey];
        delete this[module.optionsKey];
      };
      ChartAxis2.prototype.isModuleEnabled = function(module) {
        return this.modules[module.optionsKey] != null;
      };
      ChartAxis2.prototype.destroy = function() {
        var e_1, _a5;
        _super.prototype.destroy.call(this);
        try {
          for (var _b2 = __values14(Object.entries(this.modules)), _c2 = _b2.next(); !_c2.done; _c2 = _b2.next()) {
            var _d2 = __read17(_c2.value, 2), key2 = _d2[0], module_1 = _d2[1];
            module_1.instance.destroy();
            delete this.modules[key2];
            delete this[key2];
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c2 && !_c2.done && (_a5 = _b2.return))
              _a5.call(_b2);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
      };
      __decorate20([
        Validate(STRING_ARRAY)
      ], ChartAxis2.prototype, "keys", void 0);
      __decorate20([
        Validate(POSITION)
      ], ChartAxis2.prototype, "_position", void 0);
      return ChartAxis2;
    }(Axis);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/axis/categoryAxis.js
var __extends26, __decorate21, __read18, __spread12, CategoryAxis;
var init_categoryAxis = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/axis/categoryAxis.js"() {
    init_validation();
    init_bandScale();
    init_chartAxis();
    __extends26 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate21 = function(decorators, target2, key2, desc) {
      var c = arguments.length, r = c < 3 ? target2 : desc === null ? desc = Object.getOwnPropertyDescriptor(target2, key2) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target2, key2, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target2, key2, r) : d(target2, key2)) || r;
      return c > 3 && r && Object.defineProperty(target2, key2, r), r;
    };
    __read18 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread12 = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read18(arguments[i]));
      return ar;
    };
    CategoryAxis = /** @class */
    function(_super) {
      __extends26(CategoryAxis2, _super);
      function CategoryAxis2(moduleCtx) {
        var _this = _super.call(this, moduleCtx, new BandScale()) || this;
        _this._paddingOverrideEnabled = false;
        _this.groupPaddingInner = 0.1;
        _this.includeInvisibleDomains = true;
        return _this;
      }
      Object.defineProperty(CategoryAxis2.prototype, "paddingInner", {
        get: function() {
          this._paddingOverrideEnabled = true;
          return this.scale.paddingInner;
        },
        set: function(value) {
          this._paddingOverrideEnabled = true;
          this.scale.paddingInner = value;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(CategoryAxis2.prototype, "paddingOuter", {
        get: function() {
          return this.scale.paddingOuter;
        },
        set: function(value) {
          this.scale.paddingOuter = value;
        },
        enumerable: false,
        configurable: true
      });
      CategoryAxis2.prototype.normaliseDataDomain = function(d) {
        var valuesSet = new Set(d);
        return new (Array.bind.apply(Array, __spread12([void 0], valuesSet.values())))();
      };
      CategoryAxis2.prototype.calculateDomain = function() {
        if (!this._paddingOverrideEnabled) {
          var boundSeries = this.boundSeries;
          var paddings = boundSeries.map(function(s) {
            var _a5;
            return (_a5 = s.getBandScalePadding) === null || _a5 === void 0 ? void 0 : _a5.call(s);
          }).filter(function(p) {
            return p != null;
          });
          if (paddings.length > 0) {
            this.scale.paddingInner = Math.min.apply(Math, __spread12(paddings.map(function(p) {
              return p.inner;
            })));
            this.scale.paddingOuter = Math.max.apply(Math, __spread12(paddings.map(function(p) {
              return p.outer;
            })));
          }
        }
        return _super.prototype.calculateDomain.call(this);
      };
      CategoryAxis2.className = "CategoryAxis";
      CategoryAxis2.type = "category";
      __decorate21([
        Validate(NUMBER(0, 1))
      ], CategoryAxis2.prototype, "groupPaddingInner", void 0);
      return CategoryAxis2;
    }(ChartAxis);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/util/json.js
function jsonDiff(source, target2) {
  var e_1, _a5;
  var sourceType = classify(source);
  var targetType = classify(target2);
  if (targetType === "array") {
    var targetArray = target2;
    if (sourceType !== "array" || source.length !== targetArray.length) {
      return __spread13(targetArray);
    }
    if (targetArray.some(function(targetElement, i) {
      var _a6;
      return jsonDiff((_a6 = source) === null || _a6 === void 0 ? void 0 : _a6[i], targetElement) != null;
    })) {
      return __spread13(targetArray);
    }
    return null;
  }
  if (targetType === "primitive") {
    if (sourceType !== "primitive") {
      return __assign6({}, target2);
    }
    if (source !== target2) {
      return target2;
    }
    return null;
  }
  var lhs = source || {};
  var rhs = target2 || {};
  var allProps = new Set(__spread13(Object.keys(lhs), Object.keys(rhs)));
  var propsChangedCount = 0;
  var result = {};
  var _loop_1 = function(prop2) {
    if (lhs[prop2] === rhs[prop2]) {
      return "continue";
    }
    var take = function(v) {
      result[prop2] = v;
      propsChangedCount++;
    };
    var lhsType = classify(lhs[prop2]);
    var rhsType = classify(rhs[prop2]);
    if (lhsType !== rhsType) {
      take(rhs[prop2]);
      return "continue";
    }
    if (rhsType === "primitive" || rhsType === null) {
      take(rhs[prop2]);
      return "continue";
    }
    if (rhsType === "array" && lhs[prop2].length !== rhs[prop2].length) {
      take(rhs[prop2]);
      return "continue";
    }
    if (rhsType === "class-instance") {
      take(rhs[prop2]);
      return "continue";
    }
    if (rhsType === "function" && lhs[prop2] !== rhs[prop2]) {
      take(rhs[prop2]);
      return "continue";
    }
    var diff = jsonDiff(lhs[prop2], rhs[prop2]);
    if (diff !== null) {
      take(diff);
    }
  };
  try {
    for (var allProps_1 = __values15(allProps), allProps_1_1 = allProps_1.next(); !allProps_1_1.done; allProps_1_1 = allProps_1.next()) {
      var prop = allProps_1_1.value;
      _loop_1(prop);
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (allProps_1_1 && !allProps_1_1.done && (_a5 = allProps_1.return))
        _a5.call(allProps_1);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return propsChangedCount === 0 ? null : result;
}
function jsonMerge(json, opts2) {
  var e_2, _a5;
  var avoidDeepClone = (opts2 === null || opts2 === void 0 ? void 0 : opts2.avoidDeepClone) || [];
  var jsonTypes = json.map(function(v) {
    return classify(v);
  });
  if (jsonTypes.some(function(v) {
    return v === "array";
  })) {
    var finalValue = json[json.length - 1];
    if (finalValue instanceof Array) {
      return finalValue.map(function(v) {
        var type2 = classify(v);
        if (type2 === "array")
          return jsonMerge([[], v], opts2);
        if (type2 === "object")
          return jsonMerge([{}, v], opts2);
        return v;
      });
    }
    return finalValue;
  }
  var result = {};
  var props = new Set(json.map(function(v) {
    return v != null ? Object.keys(v) : [];
  }).reduce(function(r, n) {
    return r.concat(n);
  }, []));
  var _loop_2 = function(nextProp2) {
    var values = json.map(function(j) {
      return j != null && nextProp2 in j ? j[nextProp2] : NOT_SPECIFIED;
    }).filter(function(v) {
      return v !== NOT_SPECIFIED;
    });
    if (values.length === 0) {
      return "continue";
    }
    var lastValue = values[values.length - 1];
    if (lastValue === DELETE) {
      return "continue";
    }
    var types3 = values.map(function(v) {
      return classify(v);
    });
    var type2 = types3[0];
    if (types3.some(function(t) {
      return t !== type2;
    })) {
      result[nextProp2] = lastValue;
      return "continue";
    }
    if ((type2 === "array" || type2 === "object") && !avoidDeepClone.includes(nextProp2)) {
      result[nextProp2] = jsonMerge(values, opts2);
    } else if (type2 === "array") {
      result[nextProp2] = __spread13(lastValue);
    } else {
      result[nextProp2] = lastValue;
    }
  };
  try {
    for (var props_1 = __values15(props), props_1_1 = props_1.next(); !props_1_1.done; props_1_1 = props_1.next()) {
      var nextProp = props_1_1.value;
      _loop_2(nextProp);
    }
  } catch (e_2_1) {
    e_2 = { error: e_2_1 };
  } finally {
    try {
      if (props_1_1 && !props_1_1.done && (_a5 = props_1.return))
        _a5.call(props_1);
    } finally {
      if (e_2)
        throw e_2.error;
    }
  }
  return result;
}
function jsonApply(target2, source, params) {
  var _a5;
  if (params === void 0) {
    params = {};
  }
  var _b2 = params.path, path = _b2 === void 0 ? void 0 : _b2, _c2 = params.matcherPath, matcherPath = _c2 === void 0 ? path ? path.replace(/(\[[0-9+]+\])/i, "[]") : void 0 : _c2, _d2 = params.skip, skip = _d2 === void 0 ? [] : _d2, _e = params.constructors, constructors = _e === void 0 ? {} : _e, _f = params.allowedTypes, allowedTypes = _f === void 0 ? {} : _f, idx = params.idx;
  if (target2 == null) {
    throw new Error("AG Charts - target is uninitialised: " + (path || "<root>"));
  }
  if (source == null) {
    return target2;
  }
  var targetAny = target2;
  if (idx != null && "_declarationOrder" in targetAny) {
    targetAny["_declarationOrder"] = idx;
  }
  var targetType = classify(target2);
  var _loop_3 = function(property2) {
    var propertyMatcherPath = (matcherPath ? matcherPath + "." : "") + property2;
    if (skip.indexOf(propertyMatcherPath) >= 0) {
      return "continue";
    }
    var newValue = source[property2];
    var propertyPath = (path ? path + "." : "") + property2;
    var targetClass = targetAny.constructor;
    var currentValue = targetAny[property2];
    var ctr = (_a5 = constructors[property2]) !== null && _a5 !== void 0 ? _a5 : constructors[propertyMatcherPath];
    try {
      var currentValueType = classify(currentValue);
      var newValueType = classify(newValue);
      if (targetType === "class-instance" && !(property2 in target2 || Object.prototype.hasOwnProperty.call(targetAny, property2))) {
        Logger.warn("unable to set [" + propertyPath + "] in " + (targetClass === null || targetClass === void 0 ? void 0 : targetClass.name) + " - property is unknown");
        return "continue";
      }
      var allowableTypes = allowedTypes[propertyMatcherPath] || [currentValueType];
      if (currentValueType === "class-instance" && newValueType === "object") {
      } else if (currentValueType != null && newValueType != null && !allowableTypes.includes(newValueType)) {
        Logger.warn("unable to set [" + propertyPath + "] in " + (targetClass === null || targetClass === void 0 ? void 0 : targetClass.name) + " - can't apply type of [" + newValueType + "], allowed types are: [" + allowableTypes + "]");
        return "continue";
      }
      if (newValueType === "array") {
        ctr = ctr !== null && ctr !== void 0 ? ctr : constructors[propertyMatcherPath + "[]"];
        if (ctr != null) {
          var newValueArray = newValue;
          targetAny[property2] = newValueArray.map(function(v, idx2) {
            return jsonApply(new ctr(), v, __assign6(__assign6({}, params), { path: propertyPath, matcherPath: propertyMatcherPath + "[]", idx: idx2 }));
          });
        } else {
          targetAny[property2] = newValue;
        }
      } else if (newValueType === "class-instance") {
        targetAny[property2] = newValue;
      } else if (newValueType === "object") {
        if (currentValue != null) {
          jsonApply(currentValue, newValue, __assign6(__assign6({}, params), { path: propertyPath, matcherPath: propertyMatcherPath, idx: void 0 }));
        } else if (ctr != null) {
          targetAny[property2] = jsonApply(new ctr(), newValue, __assign6(__assign6({}, params), { path: propertyPath, matcherPath: propertyMatcherPath, idx: void 0 }));
        } else {
          targetAny[property2] = newValue;
        }
      } else {
        targetAny[property2] = newValue;
      }
    } catch (error) {
      var err = error;
      Logger.warn("unable to set [" + propertyPath + "] in [" + (targetClass === null || targetClass === void 0 ? void 0 : targetClass.name) + "]; nested error is: " + err.message);
      return "continue";
    }
  };
  for (var property in source) {
    _loop_3(property);
  }
  return target2;
}
function jsonWalk(json, visit, opts2) {
  var jsons = [];
  for (var _i = 3; _i < arguments.length; _i++) {
    jsons[_i - 3] = arguments[_i];
  }
  var jsonType = classify(json);
  var skip = opts2.skip || [];
  if (jsonType === "array") {
    json.forEach(function(element2, index) {
      jsonWalk.apply(void 0, __spread13([element2, visit, opts2], (jsons !== null && jsons !== void 0 ? jsons : []).map(function(o) {
        return o === null || o === void 0 ? void 0 : o[index];
      })));
    });
    return;
  } else if (jsonType !== "object") {
    return;
  }
  visit.apply(void 0, __spread13([jsonType, json], jsons));
  var _loop_4 = function(property2) {
    if (skip.indexOf(property2) >= 0) {
      return "continue";
    }
    var value = json[property2];
    var otherValues = jsons === null || jsons === void 0 ? void 0 : jsons.map(function(o) {
      return o === null || o === void 0 ? void 0 : o[property2];
    });
    var valueType = classify(value);
    if (valueType === "object" || valueType === "array") {
      jsonWalk.apply(void 0, __spread13([value, visit, opts2], otherValues));
    }
  };
  for (var property in json) {
    _loop_4(property);
  }
}
function classify(value) {
  if (value == null) {
    return null;
  } else if (value instanceof HTMLElement) {
    return "primitive";
  } else if (value instanceof Array) {
    return "array";
  } else if (value instanceof Date) {
    return "primitive";
  } else if (typeof value === "object" && value.constructor === Object) {
    return "object";
  } else if (typeof value === "function") {
    return "function";
  } else if (typeof value === "object" && value.constructor != null) {
    return "class-instance";
  }
  return "primitive";
}
var __assign6, __read19, __spread13, __values15, DELETE, NOT_SPECIFIED;
var init_json = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/util/json.js"() {
    init_logger();
    __assign6 = function() {
      __assign6 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign6.apply(this, arguments);
    };
    __read19 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread13 = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read19(arguments[i]));
      return ar;
    };
    __values15 = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    DELETE = Symbol("<delete-property>");
    NOT_SPECIFIED = Symbol("<unspecified-property>");
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/series/cartesian/cartesianSeries.js
var __extends27, __decorate22, __awaiter3, __generator3, __read20, __spread14, __values16, _a4, DEFAULT_DIRECTION_KEYS, CartesianSeriesNodeBaseClickEvent, CartesianSeriesNodeClickEvent, CartesianSeriesNodeDoubleClickEvent, CartesianSeries, CartesianSeriesMarker;
var init_cartesianSeries = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/series/cartesian/cartesianSeries.js"() {
    init_series();
    init_seriesMarker();
    init_value();
    init_continuousScale();
    init_path();
    init_selection();
    init_group();
    init_text();
    init_changeDetectable();
    init_categoryAxis();
    init_layers();
    init_validation();
    init_json();
    init_chartAxisDirection();
    init_util();
    init_logger();
    __extends27 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate22 = function(decorators, target2, key2, desc) {
      var c = arguments.length, r = c < 3 ? target2 : desc === null ? desc = Object.getOwnPropertyDescriptor(target2, key2) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target2, key2, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target2, key2, r) : d(target2, key2)) || r;
      return c > 3 && r && Object.defineProperty(target2, key2, r), r;
    };
    __awaiter3 = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __generator3 = function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    __read20 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread14 = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read20(arguments[i]));
      return ar;
    };
    __values16 = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    DEFAULT_DIRECTION_KEYS = (_a4 = {}, _a4[ChartAxisDirection.X] = ["xKey"], _a4[ChartAxisDirection.Y] = ["yKey"], _a4);
    CartesianSeriesNodeBaseClickEvent = /** @class */
    function(_super) {
      __extends27(CartesianSeriesNodeBaseClickEvent2, _super);
      function CartesianSeriesNodeBaseClickEvent2(xKey, yKey, nativeEvent, datum, series) {
        var _this = _super.call(this, nativeEvent, datum, series) || this;
        _this.xKey = xKey;
        _this.yKey = yKey;
        return _this;
      }
      return CartesianSeriesNodeBaseClickEvent2;
    }(SeriesNodeBaseClickEvent);
    CartesianSeriesNodeClickEvent = /** @class */
    function(_super) {
      __extends27(CartesianSeriesNodeClickEvent2, _super);
      function CartesianSeriesNodeClickEvent2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "nodeClick";
        return _this;
      }
      return CartesianSeriesNodeClickEvent2;
    }(CartesianSeriesNodeBaseClickEvent);
    CartesianSeriesNodeDoubleClickEvent = /** @class */
    function(_super) {
      __extends27(CartesianSeriesNodeDoubleClickEvent2, _super);
      function CartesianSeriesNodeDoubleClickEvent2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "nodeDoubleClick";
        return _this;
      }
      return CartesianSeriesNodeDoubleClickEvent2;
    }(CartesianSeriesNodeBaseClickEvent);
    CartesianSeries = /** @class */
    function(_super) {
      __extends27(CartesianSeries2, _super);
      function CartesianSeries2(opts2) {
        if (opts2 === void 0) {
          opts2 = {};
        }
        var _a5;
        var _this = _super.call(this, {
          useSeriesGroupLayer: true,
          pickModes: opts2.pickModes,
          directionKeys: (_a5 = opts2.directionKeys) !== null && _a5 !== void 0 ? _a5 : DEFAULT_DIRECTION_KEYS
        }) || this;
        _this._contextNodeData = [];
        _this.nodeDataDependencies = {};
        _this.highlightSelection = Selection.select(_this.highlightNode, function() {
          return _this.opts.hasMarkers ? _this.markerFactory() : _this.nodeFactory();
        });
        _this.highlightLabelSelection = Selection.select(_this.highlightLabel, Text);
        _this.subGroups = [];
        _this.subGroupId = 0;
        _this.seriesItemEnabled = /* @__PURE__ */ new Map();
        var _b2 = opts2.pathsPerSeries, pathsPerSeries = _b2 === void 0 ? 1 : _b2, _c2 = opts2.hasMarkers, hasMarkers = _c2 === void 0 ? false : _c2, _d2 = opts2.pathsZIndexSubOrderOffset, pathsZIndexSubOrderOffset = _d2 === void 0 ? [] : _d2, _e = opts2.renderLayerPerSubSeries, renderLayerPerSubSeries = _e === void 0 ? true : _e;
        _this.opts = { pathsPerSeries, hasMarkers, pathsZIndexSubOrderOffset, renderLayerPerSubSeries };
        return _this;
      }
      Object.defineProperty(CartesianSeries2.prototype, "contextNodeData", {
        get: function() {
          var _a5;
          return (_a5 = this._contextNodeData) === null || _a5 === void 0 ? void 0 : _a5.slice();
        },
        enumerable: false,
        configurable: true
      });
      CartesianSeries2.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
        this._contextNodeData.splice(0, this._contextNodeData.length);
        this.subGroups.splice(0, this.subGroups.length);
      };
      CartesianSeries2.prototype.checkDomainXY = function(x, y, isContinuousX, isContinuousY) {
        var isValidDatum = (isContinuousX && isContinuous(x) || !isContinuousX && isDiscrete(x)) && (isContinuousY && isContinuous(y) || !isContinuousY && isDiscrete(y));
        return isValidDatum ? [x, y] : void 0;
      };
      CartesianSeries2.prototype.checkRangeXY = function(x, y, xAxis, yAxis) {
        return !isNaN(x) && !isNaN(y) && xAxis.inRange(x) && yAxis.inRange(y);
      };
      CartesianSeries2.prototype.update = function(_a5) {
        var _b2, _c2;
        var seriesRect = _a5.seriesRect;
        return __awaiter3(this, void 0, void 0, function() {
          var _d2, seriesItemEnabled, visible, series, seriesHighlighted, anySeriesItemEnabled, newNodeDataDependencies;
          return __generator3(this, function(_e) {
            switch (_e.label) {
              case 0:
                _d2 = this, seriesItemEnabled = _d2.seriesItemEnabled, visible = _d2.visible;
                series = ((_c2 = (_b2 = this.highlightManager) === null || _b2 === void 0 ? void 0 : _b2.getActiveHighlight()) !== null && _c2 !== void 0 ? _c2 : {}).series;
                seriesHighlighted = series ? series === this : void 0;
                anySeriesItemEnabled = visible && seriesItemEnabled.size === 0 || __spread14(seriesItemEnabled.values()).some(function(v) {
                  return v === true;
                });
                newNodeDataDependencies = {
                  seriesRectWidth: seriesRect === null || seriesRect === void 0 ? void 0 : seriesRect.width,
                  seriesRectHeight: seriesRect === null || seriesRect === void 0 ? void 0 : seriesRect.height
                };
                if (jsonDiff(this.nodeDataDependencies, newNodeDataDependencies) != null) {
                  this.nodeDataDependencies = newNodeDataDependencies;
                  this.markNodeDataDirty();
                }
                return [4, this.updateSelections(seriesHighlighted, anySeriesItemEnabled)];
              case 1:
                _e.sent();
                return [4, this.updateNodes(seriesHighlighted, anySeriesItemEnabled)];
              case 2:
                _e.sent();
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      CartesianSeries2.prototype.updateSelections = function(seriesHighlighted, anySeriesItemEnabled) {
        return __awaiter3(this, void 0, void 0, function() {
          var _a5;
          var _this = this;
          return __generator3(this, function(_b2) {
            switch (_b2.label) {
              case 0:
                return [4, this.updateHighlightSelection(seriesHighlighted)];
              case 1:
                _b2.sent();
                if (!anySeriesItemEnabled) {
                  return [
                    2
                    /*return*/
                  ];
                }
                if (!this.nodeDataRefresh && !this.isPathOrSelectionDirty()) {
                  return [
                    2
                    /*return*/
                  ];
                }
                if (!this.nodeDataRefresh)
                  return [3, 4];
                this.nodeDataRefresh = false;
                _a5 = this;
                return [4, this.createNodeData()];
              case 2:
                _a5._contextNodeData = _b2.sent();
                return [4, this.updateSeriesGroups()];
              case 3:
                _b2.sent();
                _b2.label = 4;
              case 4:
                return [4, Promise.all(this.subGroups.map(function(g, i) {
                  return _this.updateSeriesGroupSelections(g, i, seriesHighlighted);
                }))];
              case 5:
                _b2.sent();
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      CartesianSeries2.prototype.updateSeriesGroupSelections = function(subGroup, seriesIdx, seriesHighlighted) {
        return __awaiter3(this, void 0, void 0, function() {
          var datumSelection, labelSelection, markerSelection, paths, contextData, nodeData, labelData, itemId, _a5, _b2, _c2;
          return __generator3(this, function(_d2) {
            switch (_d2.label) {
              case 0:
                datumSelection = subGroup.datumSelection, labelSelection = subGroup.labelSelection, markerSelection = subGroup.markerSelection, paths = subGroup.paths;
                contextData = this._contextNodeData[seriesIdx];
                nodeData = contextData.nodeData, labelData = contextData.labelData, itemId = contextData.itemId;
                return [4, this.updatePaths({ seriesHighlighted, itemId, contextData, paths, seriesIdx })];
              case 1:
                _d2.sent();
                _a5 = subGroup;
                return [4, this.updateDatumSelection({ nodeData, datumSelection, seriesIdx })];
              case 2:
                _a5.datumSelection = _d2.sent();
                _b2 = subGroup;
                return [4, this.updateLabelSelection({ labelData, labelSelection, seriesIdx })];
              case 3:
                _b2.labelSelection = _d2.sent();
                if (!markerSelection)
                  return [3, 5];
                _c2 = subGroup;
                return [4, this.updateMarkerSelection({
                  nodeData,
                  markerSelection,
                  seriesIdx
                })];
              case 4:
                _c2.markerSelection = _d2.sent();
                _d2.label = 5;
              case 5:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      CartesianSeries2.prototype.nodeFactory = function() {
        return new Group();
      };
      CartesianSeries2.prototype.markerFactory = function() {
        var MarkerShape = getMarker();
        return new MarkerShape();
      };
      CartesianSeries2.prototype.updateSeriesGroups = function() {
        var _a5;
        return __awaiter3(this, void 0, void 0, function() {
          var _b2, contextNodeData, contentGroup, subGroups, _c2, pathsPerSeries, hasMarkers, pathsZIndexSubOrderOffset, renderLayerPerSubSeries, totalGroups, layer, subGroupId, subGroupZOffset, dataNodeGroup, markerGroup, labelGroup, pathParentGroup, paths, index;
          var _this = this;
          return __generator3(this, function(_d2) {
            _b2 = this, contextNodeData = _b2._contextNodeData, contentGroup = _b2.contentGroup, subGroups = _b2.subGroups, _c2 = _b2.opts, pathsPerSeries = _c2.pathsPerSeries, hasMarkers = _c2.hasMarkers, pathsZIndexSubOrderOffset = _c2.pathsZIndexSubOrderOffset, renderLayerPerSubSeries = _c2.renderLayerPerSubSeries;
            if (contextNodeData.length === subGroups.length) {
              return [
                2
                /*return*/
              ];
            }
            if (contextNodeData.length < subGroups.length) {
              subGroups.splice(contextNodeData.length).forEach(function(_a6) {
                var e_1, _b3;
                var dataNodeGroup2 = _a6.dataNodeGroup, markerGroup2 = _a6.markerGroup, labelGroup2 = _a6.labelGroup, paths2 = _a6.paths;
                contentGroup.removeChild(dataNodeGroup2);
                if (markerGroup2) {
                  contentGroup.removeChild(markerGroup2);
                }
                if (labelGroup2) {
                  contentGroup.removeChild(labelGroup2);
                }
                try {
                  for (var paths_1 = __values16(paths2), paths_1_1 = paths_1.next(); !paths_1_1.done; paths_1_1 = paths_1.next()) {
                    var path = paths_1_1.value;
                    contentGroup.removeChild(path);
                  }
                } catch (e_1_1) {
                  e_1 = { error: e_1_1 };
                } finally {
                  try {
                    if (paths_1_1 && !paths_1_1.done && (_b3 = paths_1.return))
                      _b3.call(paths_1);
                  } finally {
                    if (e_1)
                      throw e_1.error;
                  }
                }
              });
            }
            totalGroups = contextNodeData.length;
            while (totalGroups > subGroups.length) {
              layer = renderLayerPerSubSeries;
              subGroupId = this.subGroupId++;
              subGroupZOffset = subGroupId;
              dataNodeGroup = new Group({
                name: this.id + "-series-sub" + subGroupId + "-dataNodes",
                layer,
                zIndex: Layers.SERIES_LAYER_ZINDEX,
                zIndexSubOrder: [function() {
                  return _this._declarationOrder;
                }, subGroupZOffset]
              });
              markerGroup = hasMarkers ? new Group({
                name: this.id + "-series-sub" + this.subGroupId++ + "-markers",
                layer,
                zIndex: Layers.SERIES_LAYER_ZINDEX,
                zIndexSubOrder: [function() {
                  return _this._declarationOrder;
                }, 1e4 + subGroupId]
              }) : void 0;
              labelGroup = new Group({
                name: this.id + "-series-sub" + this.subGroupId++ + "-labels",
                layer,
                zIndex: Layers.SERIES_LABEL_ZINDEX,
                zIndexSubOrder: [function() {
                  return _this._declarationOrder;
                }, subGroupId]
              });
              contentGroup.appendChild(dataNodeGroup);
              contentGroup.appendChild(labelGroup);
              if (markerGroup) {
                contentGroup.appendChild(markerGroup);
              }
              pathParentGroup = renderLayerPerSubSeries ? dataNodeGroup : contentGroup;
              paths = [];
              for (index = 0; index < pathsPerSeries; index++) {
                paths[index] = new Path();
                paths[index].zIndex = Layers.SERIES_LAYER_ZINDEX;
                paths[index].zIndexSubOrder = [
                  function() {
                    return _this._declarationOrder;
                  },
                  ((_a5 = pathsZIndexSubOrderOffset[index]) !== null && _a5 !== void 0 ? _a5 : 0) + subGroupZOffset
                ];
                pathParentGroup.appendChild(paths[index]);
              }
              subGroups.push({
                paths,
                dataNodeGroup,
                markerGroup,
                labelGroup,
                labelSelection: Selection.select(labelGroup, Text),
                datumSelection: Selection.select(dataNodeGroup, function() {
                  return _this.nodeFactory();
                }),
                markerSelection: markerGroup ? Selection.select(markerGroup, function() {
                  return _this.markerFactory();
                }) : void 0
              });
            }
            return [
              2
              /*return*/
            ];
          });
        });
      };
      CartesianSeries2.prototype.updateNodes = function(seriesHighlighted, anySeriesItemEnabled) {
        var _a5;
        return __awaiter3(this, void 0, void 0, function() {
          var _b2, highlightSelection, highlightLabelSelection, contextNodeData, seriesItemEnabled, _c2, hasMarkers, renderLayerPerSubSeries, visible, seriesOpacity, subGroupOpacities, isSubGroupOpacityDifferent;
          var _this = this;
          return __generator3(this, function(_d2) {
            switch (_d2.label) {
              case 0:
                _b2 = this, highlightSelection = _b2.highlightSelection, highlightLabelSelection = _b2.highlightLabelSelection, contextNodeData = _b2._contextNodeData, seriesItemEnabled = _b2.seriesItemEnabled, _c2 = _b2.opts, hasMarkers = _c2.hasMarkers, renderLayerPerSubSeries = _c2.renderLayerPerSubSeries;
                visible = this.visible && ((_a5 = this._contextNodeData) === null || _a5 === void 0 ? void 0 : _a5.length) > 0 && anySeriesItemEnabled;
                this.rootGroup.visible = visible;
                this.contentGroup.visible = visible;
                this.highlightGroup.visible = visible && !!seriesHighlighted;
                seriesOpacity = this.getOpacity();
                subGroupOpacities = this.subGroups.map(function(_, index) {
                  var itemId = contextNodeData[index].itemId;
                  return _this.getOpacity({ itemId });
                });
                isSubGroupOpacityDifferent = subGroupOpacities.some(function(subOp) {
                  return subOp !== seriesOpacity;
                });
                this.contentGroup.opacity = isSubGroupOpacityDifferent ? 1 : seriesOpacity;
                if (!hasMarkers)
                  return [3, 2];
                return [4, this.updateMarkerNodes({
                  markerSelection: highlightSelection,
                  isHighlight: true,
                  seriesIdx: -1
                })];
              case 1:
                _d2.sent();
                return [3, 4];
              case 2:
                return [4, this.updateDatumNodes({ datumSelection: highlightSelection, isHighlight: true, seriesIdx: -1 })];
              case 3:
                _d2.sent();
                _d2.label = 4;
              case 4:
                return [4, this.updateLabelNodes({ labelSelection: highlightLabelSelection, seriesIdx: -1 })];
              case 5:
                _d2.sent();
                return [4, Promise.all(this.subGroups.map(function(subGroup, seriesIdx) {
                  return __awaiter3(_this, void 0, void 0, function() {
                    var dataNodeGroup, markerGroup, datumSelection, labelSelection, markerSelection, paths, labelGroup, itemId, subGroupVisible, subGroupOpacity, paths_2, paths_2_1, path;
                    var e_2, _a6;
                    var _b3;
                    return __generator3(this, function(_c3) {
                      switch (_c3.label) {
                        case 0:
                          dataNodeGroup = subGroup.dataNodeGroup, markerGroup = subGroup.markerGroup, datumSelection = subGroup.datumSelection, labelSelection = subGroup.labelSelection, markerSelection = subGroup.markerSelection, paths = subGroup.paths, labelGroup = subGroup.labelGroup;
                          itemId = contextNodeData[seriesIdx].itemId;
                          subGroupVisible = visible && ((_b3 = seriesItemEnabled.get(itemId)) !== null && _b3 !== void 0 ? _b3 : true);
                          subGroupOpacity = isSubGroupOpacityDifferent ? subGroupOpacities[seriesIdx] : 1;
                          dataNodeGroup.opacity = subGroupOpacity;
                          dataNodeGroup.visible = subGroupVisible;
                          labelGroup.visible = subGroupVisible;
                          if (markerGroup) {
                            markerGroup.opacity = subGroupOpacity;
                            markerGroup.zIndex = dataNodeGroup.zIndex >= Layers.SERIES_LAYER_ZINDEX ? dataNodeGroup.zIndex : dataNodeGroup.zIndex + 1;
                            markerGroup.visible = subGroupVisible;
                          }
                          if (labelGroup) {
                            labelGroup.opacity = subGroupOpacity;
                          }
                          try {
                            for (paths_2 = __values16(paths), paths_2_1 = paths_2.next(); !paths_2_1.done; paths_2_1 = paths_2.next()) {
                              path = paths_2_1.value;
                              if (!renderLayerPerSubSeries) {
                                path.opacity = subGroupOpacity;
                                path.visible = subGroupVisible;
                              }
                            }
                          } catch (e_2_1) {
                            e_2 = { error: e_2_1 };
                          } finally {
                            try {
                              if (paths_2_1 && !paths_2_1.done && (_a6 = paths_2.return))
                                _a6.call(paths_2);
                            } finally {
                              if (e_2)
                                throw e_2.error;
                            }
                          }
                          if (!dataNodeGroup.visible) {
                            return [
                              2
                              /*return*/
                            ];
                          }
                          return [4, this.updatePathNodes({ seriesHighlighted, itemId, paths, seriesIdx })];
                        case 1:
                          _c3.sent();
                          return [4, this.updateDatumNodes({ datumSelection, isHighlight: false, seriesIdx })];
                        case 2:
                          _c3.sent();
                          return [4, this.updateLabelNodes({ labelSelection, seriesIdx })];
                        case 3:
                          _c3.sent();
                          if (!(hasMarkers && markerSelection))
                            return [3, 5];
                          return [4, this.updateMarkerNodes({ markerSelection, isHighlight: false, seriesIdx })];
                        case 4:
                          _c3.sent();
                          _c3.label = 5;
                        case 5:
                          return [
                            2
                            /*return*/
                          ];
                      }
                    });
                  });
                }))];
              case 6:
                _d2.sent();
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      CartesianSeries2.prototype.updateHighlightSelection = function(seriesHighlighted) {
        var _a5;
        return __awaiter3(this, void 0, void 0, function() {
          var _b2, highlightSelection, highlightLabelSelection, contextNodeData, highlightedDatum, item, _c2, labelItem, _d2, itemId_1, contextNodeData_1, contextNodeData_1_1, labelData, _e;
          var e_3, _f;
          return __generator3(this, function(_g) {
            switch (_g.label) {
              case 0:
                _b2 = this, highlightSelection = _b2.highlightSelection, highlightLabelSelection = _b2.highlightLabelSelection, contextNodeData = _b2._contextNodeData;
                highlightedDatum = (_a5 = this.highlightManager) === null || _a5 === void 0 ? void 0 : _a5.getActiveHighlight();
                item = seriesHighlighted && (highlightedDatum === null || highlightedDatum === void 0 ? void 0 : highlightedDatum.datum) ? highlightedDatum : void 0;
                _c2 = this;
                return [4, this.updateHighlightSelectionItem({ item, highlightSelection })];
              case 1:
                _c2.highlightSelection = _g.sent();
                if (this.isLabelEnabled() && item != null) {
                  _d2 = item.itemId, itemId_1 = _d2 === void 0 ? void 0 : _d2;
                  try {
                    for (contextNodeData_1 = __values16(contextNodeData), contextNodeData_1_1 = contextNodeData_1.next(); !contextNodeData_1_1.done; contextNodeData_1_1 = contextNodeData_1.next()) {
                      labelData = contextNodeData_1_1.value.labelData;
                      labelItem = labelData.find(function(ld) {
                        return ld.datum === item.datum && ld.itemId === itemId_1;
                      });
                      if (labelItem != null) {
                        break;
                      }
                    }
                  } catch (e_3_1) {
                    e_3 = { error: e_3_1 };
                  } finally {
                    try {
                      if (contextNodeData_1_1 && !contextNodeData_1_1.done && (_f = contextNodeData_1.return))
                        _f.call(contextNodeData_1);
                    } finally {
                      if (e_3)
                        throw e_3.error;
                    }
                  }
                }
                _e = this;
                return [4, this.updateHighlightSelectionLabel({
                  item: labelItem,
                  highlightLabelSelection
                })];
              case 2:
                _e.highlightLabelSelection = _g.sent();
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      CartesianSeries2.prototype.pickNodeExactShape = function(point) {
        var e_4, _a5;
        var result = _super.prototype.pickNodeExactShape.call(this, point);
        if (result) {
          return result;
        }
        var x = point.x, y = point.y;
        var hasMarkers = this.opts.hasMarkers;
        try {
          for (var _b2 = __values16(this.subGroups), _c2 = _b2.next(); !_c2.done; _c2 = _b2.next()) {
            var _d2 = _c2.value, dataNodeGroup = _d2.dataNodeGroup, markerGroup = _d2.markerGroup;
            var match = dataNodeGroup.pickNode(x, y);
            if (!match && hasMarkers) {
              match = markerGroup === null || markerGroup === void 0 ? void 0 : markerGroup.pickNode(x, y);
            }
            if (match) {
              return { datum: match.datum, distance: 0 };
            }
          }
        } catch (e_4_1) {
          e_4 = { error: e_4_1 };
        } finally {
          try {
            if (_c2 && !_c2.done && (_a5 = _b2.return))
              _a5.call(_b2);
          } finally {
            if (e_4)
              throw e_4.error;
          }
        }
      };
      CartesianSeries2.prototype.pickNodeClosestDatum = function(point) {
        var e_5, _a5, e_6, _b2;
        var _c2, _d2;
        var x = point.x, y = point.y;
        var _e = this, xAxis = _e.xAxis, yAxis = _e.yAxis, rootGroup = _e.rootGroup, contextNodeData = _e._contextNodeData;
        var hitPoint = rootGroup.transformPoint(x, y);
        var minDistance = Infinity;
        var closestDatum;
        try {
          for (var contextNodeData_2 = __values16(contextNodeData), contextNodeData_2_1 = contextNodeData_2.next(); !contextNodeData_2_1.done; contextNodeData_2_1 = contextNodeData_2.next()) {
            var context = contextNodeData_2_1.value;
            try {
              for (var _f = (e_6 = void 0, __values16(context.nodeData)), _g = _f.next(); !_g.done; _g = _f.next()) {
                var datum = _g.value;
                var _h = datum.point, _j = _h === void 0 ? {} : _h, _k = _j.x, datumX = _k === void 0 ? NaN : _k, _l = _j.y, datumY = _l === void 0 ? NaN : _l;
                if (isNaN(datumX) || isNaN(datumY)) {
                  continue;
                }
                var isInRange = (xAxis === null || xAxis === void 0 ? void 0 : xAxis.inRange(datumX)) && (yAxis === null || yAxis === void 0 ? void 0 : yAxis.inRange(datumY));
                if (!isInRange) {
                  continue;
                }
                var distance = Math.max(Math.pow(hitPoint.x - datumX, 2) + Math.pow(hitPoint.y - datumY, 2), 0);
                if (distance < minDistance) {
                  minDistance = distance;
                  closestDatum = datum;
                }
              }
            } catch (e_6_1) {
              e_6 = { error: e_6_1 };
            } finally {
              try {
                if (_g && !_g.done && (_b2 = _f.return))
                  _b2.call(_f);
              } finally {
                if (e_6)
                  throw e_6.error;
              }
            }
          }
        } catch (e_5_1) {
          e_5 = { error: e_5_1 };
        } finally {
          try {
            if (contextNodeData_2_1 && !contextNodeData_2_1.done && (_a5 = contextNodeData_2.return))
              _a5.call(contextNodeData_2);
          } finally {
            if (e_5)
              throw e_5.error;
          }
        }
        if (closestDatum) {
          var distance = Math.max(Math.sqrt(minDistance) - ((_d2 = (_c2 = closestDatum.point) === null || _c2 === void 0 ? void 0 : _c2.size) !== null && _d2 !== void 0 ? _d2 : 0), 0);
          return { datum: closestDatum, distance };
        }
      };
      CartesianSeries2.prototype.pickNodeMainAxisFirst = function(point, requireCategoryAxis) {
        var e_7, _a5, e_8, _b2;
        var _c2, _d2;
        var x = point.x, y = point.y;
        var _e = this, xAxis = _e.xAxis, yAxis = _e.yAxis, rootGroup = _e.rootGroup, contextNodeData = _e._contextNodeData;
        var directions2 = [xAxis, yAxis].filter(function(a) {
          return a instanceof CategoryAxis;
        }).map(function(a) {
          return a.direction;
        });
        if (requireCategoryAxis && directions2.length === 0) {
          return;
        }
        var _f = __read20(directions2, 1), _g = _f[0], primaryDirection = _g === void 0 ? ChartAxisDirection.X : _g;
        var hitPoint = rootGroup.transformPoint(x, y);
        var hitPointCoords = primaryDirection === ChartAxisDirection.X ? [hitPoint.x, hitPoint.y] : [hitPoint.y, hitPoint.x];
        var minDistance = [Infinity, Infinity];
        var closestDatum = void 0;
        try {
          for (var contextNodeData_3 = __values16(contextNodeData), contextNodeData_3_1 = contextNodeData_3.next(); !contextNodeData_3_1.done; contextNodeData_3_1 = contextNodeData_3.next()) {
            var context = contextNodeData_3_1.value;
            try {
              for (var _h = (e_8 = void 0, __values16(context.nodeData)), _j = _h.next(); !_j.done; _j = _h.next()) {
                var datum = _j.value;
                var _k = datum.point, _l = _k === void 0 ? {} : _k, _m = _l.x, datumX = _m === void 0 ? NaN : _m, _o = _l.y, datumY = _o === void 0 ? NaN : _o;
                if (isNaN(datumX) || isNaN(datumY)) {
                  continue;
                }
                var isInRange = (xAxis === null || xAxis === void 0 ? void 0 : xAxis.inRange(datumX)) && (yAxis === null || yAxis === void 0 ? void 0 : yAxis.inRange(datumY));
                if (!isInRange) {
                  continue;
                }
                var point_1 = primaryDirection === ChartAxisDirection.X ? [datumX, datumY] : [datumY, datumX];
                var newMinDistance = true;
                for (var i = 0; i < point_1.length; i++) {
                  var dist = Math.abs(point_1[i] - hitPointCoords[i]);
                  if (dist > minDistance[i]) {
                    newMinDistance = false;
                    break;
                  }
                  if (dist < minDistance[i]) {
                    minDistance[i] = dist;
                    minDistance.fill(Infinity, i + 1, minDistance.length);
                  }
                }
                if (newMinDistance) {
                  closestDatum = datum;
                }
              }
            } catch (e_8_1) {
              e_8 = { error: e_8_1 };
            } finally {
              try {
                if (_j && !_j.done && (_b2 = _h.return))
                  _b2.call(_h);
              } finally {
                if (e_8)
                  throw e_8.error;
              }
            }
          }
        } catch (e_7_1) {
          e_7 = { error: e_7_1 };
        } finally {
          try {
            if (contextNodeData_3_1 && !contextNodeData_3_1.done && (_a5 = contextNodeData_3.return))
              _a5.call(contextNodeData_3);
          } finally {
            if (e_7)
              throw e_7.error;
          }
        }
        if (closestDatum) {
          var distance = Math.max(Math.sqrt(Math.pow(minDistance[0], 2) + Math.pow(minDistance[1], 2)) - ((_d2 = (_c2 = closestDatum.point) === null || _c2 === void 0 ? void 0 : _c2.size) !== null && _d2 !== void 0 ? _d2 : 0), 0);
          return { datum: closestDatum, distance };
        }
      };
      CartesianSeries2.prototype.toggleSeriesItem = function(itemId, enabled) {
        if (this.seriesItemEnabled.size > 0) {
          this.seriesItemEnabled.set(itemId, enabled);
          this.nodeDataRefresh = true;
        } else {
          _super.prototype.toggleSeriesItem.call(this, itemId, enabled);
        }
      };
      CartesianSeries2.prototype.isEnabled = function() {
        var e_9, _a5;
        if (this.seriesItemEnabled.size > 0) {
          try {
            for (var _b2 = __values16(this.seriesItemEnabled), _c2 = _b2.next(); !_c2.done; _c2 = _b2.next()) {
              var _d2 = __read20(_c2.value, 2), enabled = _d2[1];
              if (enabled) {
                return true;
              }
            }
          } catch (e_9_1) {
            e_9 = { error: e_9_1 };
          } finally {
            try {
              if (_c2 && !_c2.done && (_a5 = _b2.return))
                _a5.call(_b2);
            } finally {
              if (e_9)
                throw e_9.error;
            }
          }
          return false;
        }
        return _super.prototype.isEnabled.call(this);
      };
      CartesianSeries2.prototype.isPathOrSelectionDirty = function() {
        return false;
      };
      CartesianSeries2.prototype.getLabelData = function() {
        return [];
      };
      CartesianSeries2.prototype.isAnySeriesVisible = function() {
        var e_10, _a5;
        try {
          for (var _b2 = __values16(this.seriesItemEnabled.values()), _c2 = _b2.next(); !_c2.done; _c2 = _b2.next()) {
            var visible = _c2.value;
            if (visible) {
              return true;
            }
          }
        } catch (e_10_1) {
          e_10 = { error: e_10_1 };
        } finally {
          try {
            if (_c2 && !_c2.done && (_a5 = _b2.return))
              _a5.call(_b2);
          } finally {
            if (e_10)
              throw e_10.error;
          }
        }
        return false;
      };
      CartesianSeries2.prototype.validateXYData = function(xKey, yKey, data, xAxis, yAxis, xData, yData, yDepth) {
        var _a5;
        if (yDepth === void 0) {
          yDepth = 1;
        }
        if (((_a5 = this.chart) === null || _a5 === void 0 ? void 0 : _a5.mode) === "integrated") {
          return true;
        }
        if (!xAxis || !yAxis || data.length === 0 || this.seriesItemEnabled.size > 0 && !this.isAnySeriesVisible()) {
          return true;
        }
        var hasNumber = function(items, depth, maxDepth) {
          if (depth === void 0) {
            depth = 0;
          }
          if (maxDepth === void 0) {
            maxDepth = 0;
          }
          return items.some(depth === maxDepth ? function(y) {
            return isContinuous(y);
          } : function(arr) {
            return hasNumber(arr, depth + 1, maxDepth);
          });
        };
        var isContinuousX = xAxis.scale instanceof ContinuousScale;
        var isContinuousY = yAxis.scale instanceof ContinuousScale;
        var validationResult = true;
        if (isContinuousX && !hasNumber(xData)) {
          Logger.warnOnce("the number axis has no numeric data supplied for xKey: [" + xKey + "].");
          validationResult = false;
        }
        if (isContinuousY && !hasNumber(yData, 0, yDepth - 1)) {
          Logger.warnOnce("the number axis has no numeric data supplied for yKey: [" + yKey + "].");
          validationResult = false;
        }
        return validationResult;
      };
      CartesianSeries2.prototype.updatePaths = function(opts2) {
        return __awaiter3(this, void 0, void 0, function() {
          return __generator3(this, function(_a5) {
            opts2.paths.forEach(function(p) {
              return p.visible = false;
            });
            return [
              2
              /*return*/
            ];
          });
        });
      };
      CartesianSeries2.prototype.updatePathNodes = function(_opts) {
        return __awaiter3(this, void 0, void 0, function() {
          return __generator3(this, function(_a5) {
            return [
              2
              /*return*/
            ];
          });
        });
      };
      CartesianSeries2.prototype.updateHighlightSelectionItem = function(opts2) {
        return __awaiter3(this, void 0, void 0, function() {
          var hasMarkers, item, highlightSelection, nodeData, markerSelection;
          return __generator3(this, function(_a5) {
            hasMarkers = this.opts.hasMarkers;
            item = opts2.item, highlightSelection = opts2.highlightSelection;
            nodeData = item ? [item] : [];
            if (hasMarkers) {
              markerSelection = highlightSelection;
              return [2, this.updateMarkerSelection({ nodeData, markerSelection, seriesIdx: -1 })];
            } else {
              return [2, this.updateDatumSelection({ nodeData, datumSelection: highlightSelection, seriesIdx: -1 })];
            }
            return [
              2
              /*return*/
            ];
          });
        });
      };
      CartesianSeries2.prototype.updateHighlightSelectionLabel = function(opts2) {
        return __awaiter3(this, void 0, void 0, function() {
          var item, highlightLabelSelection, labelData;
          return __generator3(this, function(_a5) {
            item = opts2.item, highlightLabelSelection = opts2.highlightLabelSelection;
            labelData = item ? [item] : [];
            return [2, this.updateLabelSelection({ labelData, labelSelection: highlightLabelSelection, seriesIdx: -1 })];
          });
        });
      };
      CartesianSeries2.prototype.updateDatumSelection = function(opts2) {
        return __awaiter3(this, void 0, void 0, function() {
          return __generator3(this, function(_a5) {
            return [2, opts2.datumSelection];
          });
        });
      };
      CartesianSeries2.prototype.updateDatumNodes = function(_opts) {
        return __awaiter3(this, void 0, void 0, function() {
          return __generator3(this, function(_a5) {
            return [
              2
              /*return*/
            ];
          });
        });
      };
      CartesianSeries2.prototype.updateMarkerSelection = function(opts2) {
        return __awaiter3(this, void 0, void 0, function() {
          return __generator3(this, function(_a5) {
            return [2, opts2.markerSelection];
          });
        });
      };
      CartesianSeries2.prototype.updateMarkerNodes = function(_opts) {
        return __awaiter3(this, void 0, void 0, function() {
          return __generator3(this, function(_a5) {
            return [
              2
              /*return*/
            ];
          });
        });
      };
      return CartesianSeries2;
    }(Series);
    CartesianSeriesMarker = /** @class */
    function(_super) {
      __extends27(CartesianSeriesMarker2, _super);
      function CartesianSeriesMarker2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.formatter = void 0;
        return _this;
      }
      __decorate22([
        Validate(OPT_FUNCTION),
        SceneChangeDetection({ redraw: RedrawType.MAJOR })
      ], CartesianSeriesMarker2.prototype, "formatter", void 0);
      return CartesianSeriesMarker2;
    }(SeriesMarker);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/util/async.js
function sleep(sleepTimeoutMs) {
  return new Promise(function(resolve) {
    setTimeout(function() {
      return resolve(void 0);
    }, sleepTimeoutMs);
  });
}
var init_async = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/util/async.js"() {
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/overlay/overlay.js
var __decorate23, Overlay;
var init_overlay = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/overlay/overlay.js"() {
    init_validation();
    __decorate23 = function(decorators, target2, key2, desc) {
      var c = arguments.length, r = c < 3 ? target2 : desc === null ? desc = Object.getOwnPropertyDescriptor(target2, key2) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target2, key2, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target2, key2, r) : d(target2, key2)) || r;
      return c > 3 && r && Object.defineProperty(target2, key2, r), r;
    };
    Overlay = /** @class */
    function() {
      function Overlay2(className, parent) {
        this.renderer = void 0;
        this.text = void 0;
        this.className = className;
        this.parentElement = parent;
      }
      Overlay2.prototype.show = function(rect) {
        var _a5, _b2;
        var element2 = this.element;
        if (!this.element) {
          element2 = document.createElement("div");
          element2.className = this.className;
          this.element = element2;
        }
        element2.style.position = "absolute";
        element2.style.left = rect.x + "px";
        element2.style.top = rect.y + "px";
        element2.style.width = rect.width + "px";
        element2.style.height = rect.height + "px";
        if (this.renderer) {
          this.element.innerHTML = this.renderer();
        } else {
          var content = document.createElement("div");
          content.style.alignItems = "center";
          content.style.boxSizing = "border-box";
          content.style.display = "flex";
          content.style.justifyContent = "center";
          content.style.margin = "8px";
          content.style.height = "100%";
          content.style.font = "12px Verdana, sans-serif";
          content.innerText = (_a5 = this.text) !== null && _a5 !== void 0 ? _a5 : "No data to display";
          element2.append(content);
        }
        (_b2 = this.parentElement) === null || _b2 === void 0 ? void 0 : _b2.append(element2);
      };
      Overlay2.prototype.hide = function() {
        var _a5;
        (_a5 = this.element) === null || _a5 === void 0 ? void 0 : _a5.remove();
        this.element = void 0;
      };
      __decorate23([
        Validate(OPT_FUNCTION)
      ], Overlay2.prototype, "renderer", void 0);
      __decorate23([
        Validate(OPT_STRING)
      ], Overlay2.prototype, "text", void 0);
      return Overlay2;
    }();
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/overlay/chartOverlays.js
var ChartOverlays;
var init_chartOverlays = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/overlay/chartOverlays.js"() {
    init_overlay();
    ChartOverlays = /** @class */
    function() {
      function ChartOverlays2(parent) {
        this.noData = new Overlay("ag-chart-no-data-overlay", parent);
      }
      return ChartOverlays2;
    }();
  }
});

// node_modules/ag-charts-community/dist/esm/es5/util/listeners.js
var __read21, __spread15, __values17, Listeners;
var init_listeners = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/util/listeners.js"() {
    __read21 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread15 = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read21(arguments[i]));
      return ar;
    };
    __values17 = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    Listeners = /** @class */
    function() {
      function Listeners2() {
        this.registeredListeners = {};
      }
      Listeners2.prototype.addListener = function(type2, cb) {
        var _a5;
        var symbol = Symbol(type2);
        if (!this.registeredListeners[type2]) {
          this.registeredListeners[type2] = [];
        }
        (_a5 = this.registeredListeners[type2]) === null || _a5 === void 0 ? void 0 : _a5.push({ symbol, handler: cb });
        return symbol;
      };
      Listeners2.prototype.dispatch = function(type2) {
        var _a5;
        var params = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          params[_i - 1] = arguments[_i];
        }
        var listeners = (_a5 = this.registeredListeners[type2]) !== null && _a5 !== void 0 ? _a5 : [];
        return listeners.map(function(l) {
          return l.handler.apply(l, __spread15(params));
        });
      };
      Listeners2.prototype.cancellableDispatch = function(type2, cancelled) {
        var e_1, _a5;
        var _b2;
        var params = [];
        for (var _i = 2; _i < arguments.length; _i++) {
          params[_i - 2] = arguments[_i];
        }
        var listeners = (_b2 = this.registeredListeners[type2]) !== null && _b2 !== void 0 ? _b2 : [];
        var results = [];
        try {
          for (var listeners_1 = __values17(listeners), listeners_1_1 = listeners_1.next(); !listeners_1_1.done; listeners_1_1 = listeners_1.next()) {
            var listener = listeners_1_1.value;
            if (cancelled())
              break;
            results.push(listener.handler.apply(listener, __spread15(params)));
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (listeners_1_1 && !listeners_1_1.done && (_a5 = listeners_1.return))
              _a5.call(listeners_1);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        return results;
      };
      Listeners2.prototype.reduceDispatch = function(type2, reduceFn) {
        var e_2, _a5;
        var _b2;
        var params = [];
        for (var _i = 2; _i < arguments.length; _i++) {
          params[_i - 2] = arguments[_i];
        }
        var listeners = (_b2 = this.registeredListeners[type2]) !== null && _b2 !== void 0 ? _b2 : [];
        var listenerResult = void 0;
        try {
          for (var listeners_2 = __values17(listeners), listeners_2_1 = listeners_2.next(); !listeners_2_1.done; listeners_2_1 = listeners_2.next()) {
            var listener = listeners_2_1.value;
            listenerResult = listener.handler.apply(listener, __spread15(params));
            params = reduceFn.apply(void 0, __spread15([listenerResult], params));
          }
        } catch (e_2_1) {
          e_2 = { error: e_2_1 };
        } finally {
          try {
            if (listeners_2_1 && !listeners_2_1.done && (_a5 = listeners_2.return))
              _a5.call(listeners_2);
          } finally {
            if (e_2)
              throw e_2.error;
          }
        }
        return listenerResult;
      };
      Listeners2.prototype.removeListener = function(listenerSymbol) {
        for (var type2 in this.registeredListeners) {
          var listeners = this.registeredListeners[type2];
          var match = listeners === null || listeners === void 0 ? void 0 : listeners.findIndex(function(entry) {
            return entry.symbol === listenerSymbol;
          });
          if (match != null && match >= 0) {
            listeners === null || listeners === void 0 ? void 0 : listeners.splice(match, 1);
          }
          if (match != null && (listeners === null || listeners === void 0 ? void 0 : listeners.length) === 0) {
            delete this.registeredListeners[type2];
          }
        }
      };
      return Listeners2;
    }();
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/interaction/baseManager.js
var BaseManager;
var init_baseManager = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/interaction/baseManager.js"() {
    init_listeners();
    BaseManager = /** @class */
    function() {
      function BaseManager2() {
        this.listeners = new Listeners();
      }
      BaseManager2.prototype.addListener = function(type2, cb) {
        return this.listeners.addListener(type2, cb);
      };
      BaseManager2.prototype.removeListener = function(listenerSymbol) {
        this.listeners.removeListener(listenerSymbol);
      };
      return BaseManager2;
    }();
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/interaction/interactionManager.js
var __extends28, __assign7, __awaiter4, __generator4, __values18, WINDOW_EVENT_HANDLERS, EVENT_HANDLERS, CSS, InteractionManager;
var init_interactionManager = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/interaction/interactionManager.js"() {
    init_value();
    init_baseManager();
    __extends28 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __assign7 = function() {
      __assign7 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign7.apply(this, arguments);
    };
    __awaiter4 = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __generator4 = function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    __values18 = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    WINDOW_EVENT_HANDLERS = ["pagehide", "mousemove", "mouseup", "wheel"];
    EVENT_HANDLERS = [
      "click",
      "dblclick",
      "contextmenu",
      "mousedown",
      "mouseout",
      "mouseenter",
      "touchstart",
      "touchmove",
      "touchend",
      "touchcancel"
    ];
    CSS = "\n.ag-chart-wrapper {\n    touch-action: none;\n}\n";
    InteractionManager = /** @class */
    function(_super) {
      __extends28(InteractionManager2, _super);
      function InteractionManager2(element2, doc) {
        var e_1, _a5, e_2, _b2;
        if (doc === void 0) {
          doc = document;
        }
        var _this = _super.call(this) || this;
        _this.eventHandler = function(event) {
          return _this.processEvent(event);
        };
        _this.mouseDown = false;
        _this.touchDown = false;
        _this.rootElement = doc.body;
        _this.element = element2;
        try {
          for (var EVENT_HANDLERS_1 = __values18(EVENT_HANDLERS), EVENT_HANDLERS_1_1 = EVENT_HANDLERS_1.next(); !EVENT_HANDLERS_1_1.done; EVENT_HANDLERS_1_1 = EVENT_HANDLERS_1.next()) {
            var type2 = EVENT_HANDLERS_1_1.value;
            if (type2.startsWith("touch")) {
              element2.addEventListener(type2, _this.eventHandler, { passive: true });
            } else {
              element2.addEventListener(type2, _this.eventHandler);
            }
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (EVENT_HANDLERS_1_1 && !EVENT_HANDLERS_1_1.done && (_a5 = EVENT_HANDLERS_1.return))
              _a5.call(EVENT_HANDLERS_1);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        try {
          for (var WINDOW_EVENT_HANDLERS_1 = __values18(WINDOW_EVENT_HANDLERS), WINDOW_EVENT_HANDLERS_1_1 = WINDOW_EVENT_HANDLERS_1.next(); !WINDOW_EVENT_HANDLERS_1_1.done; WINDOW_EVENT_HANDLERS_1_1 = WINDOW_EVENT_HANDLERS_1.next()) {
            var type2 = WINDOW_EVENT_HANDLERS_1_1.value;
            window.addEventListener(type2, _this.eventHandler);
          }
        } catch (e_2_1) {
          e_2 = { error: e_2_1 };
        } finally {
          try {
            if (WINDOW_EVENT_HANDLERS_1_1 && !WINDOW_EVENT_HANDLERS_1_1.done && (_b2 = WINDOW_EVENT_HANDLERS_1.return))
              _b2.call(WINDOW_EVENT_HANDLERS_1);
          } finally {
            if (e_2)
              throw e_2.error;
          }
        }
        if (InteractionManager2.interactionDocuments.indexOf(doc) < 0) {
          var styleElement = document.createElement("style");
          styleElement.innerHTML = CSS;
          document.head.insertBefore(styleElement, document.head.querySelector("style"));
          InteractionManager2.interactionDocuments.push(doc);
        }
        return _this;
      }
      InteractionManager2.prototype.destroy = function() {
        var e_3, _a5, e_4, _b2;
        try {
          for (var WINDOW_EVENT_HANDLERS_2 = __values18(WINDOW_EVENT_HANDLERS), WINDOW_EVENT_HANDLERS_2_1 = WINDOW_EVENT_HANDLERS_2.next(); !WINDOW_EVENT_HANDLERS_2_1.done; WINDOW_EVENT_HANDLERS_2_1 = WINDOW_EVENT_HANDLERS_2.next()) {
            var type2 = WINDOW_EVENT_HANDLERS_2_1.value;
            window.removeEventListener(type2, this.eventHandler);
          }
        } catch (e_3_1) {
          e_3 = { error: e_3_1 };
        } finally {
          try {
            if (WINDOW_EVENT_HANDLERS_2_1 && !WINDOW_EVENT_HANDLERS_2_1.done && (_a5 = WINDOW_EVENT_HANDLERS_2.return))
              _a5.call(WINDOW_EVENT_HANDLERS_2);
          } finally {
            if (e_3)
              throw e_3.error;
          }
        }
        try {
          for (var EVENT_HANDLERS_2 = __values18(EVENT_HANDLERS), EVENT_HANDLERS_2_1 = EVENT_HANDLERS_2.next(); !EVENT_HANDLERS_2_1.done; EVENT_HANDLERS_2_1 = EVENT_HANDLERS_2.next()) {
            var type2 = EVENT_HANDLERS_2_1.value;
            this.element.removeEventListener(type2, this.eventHandler);
          }
        } catch (e_4_1) {
          e_4 = { error: e_4_1 };
        } finally {
          try {
            if (EVENT_HANDLERS_2_1 && !EVENT_HANDLERS_2_1.done && (_b2 = EVENT_HANDLERS_2.return))
              _b2.call(EVENT_HANDLERS_2);
          } finally {
            if (e_4)
              throw e_4.error;
          }
        }
      };
      InteractionManager2.prototype.processEvent = function(event) {
        var types3 = this.decideInteractionEventTypes(event);
        if (types3.length > 0) {
          this.dispatchEvent(event, types3);
        }
      };
      InteractionManager2.prototype.dispatchEvent = function(event, types3) {
        return __awaiter4(this, void 0, void 0, function() {
          var coords, _loop_1, this_1, types_1, types_1_1, type2;
          var e_5, _a5;
          return __generator4(this, function(_b2) {
            coords = this.calculateCoordinates(event);
            if (coords == null) {
              return [
                2
                /*return*/
              ];
            }
            _loop_1 = function(type3) {
              var interactionEvent = this_1.buildEvent(__assign7(__assign7({ event }, coords), { type: type3 }));
              this_1.listeners.cancellableDispatch(type3, function() {
                return interactionEvent.consumed;
              }, interactionEvent);
            };
            this_1 = this;
            try {
              for (types_1 = __values18(types3), types_1_1 = types_1.next(); !types_1_1.done; types_1_1 = types_1.next()) {
                type2 = types_1_1.value;
                _loop_1(type2);
              }
            } catch (e_5_1) {
              e_5 = { error: e_5_1 };
            } finally {
              try {
                if (types_1_1 && !types_1_1.done && (_a5 = types_1.return))
                  _a5.call(types_1);
              } finally {
                if (e_5)
                  throw e_5.error;
              }
            }
            return [
              2
              /*return*/
            ];
          });
        });
      };
      InteractionManager2.prototype.decideInteractionEventTypes = function(event) {
        switch (event.type) {
          case "click":
            return ["click"];
          case "dblclick":
            return ["dblclick"];
          case "contextmenu":
            return ["contextmenu"];
          case "mousedown":
            this.mouseDown = true;
            this.dragStartElement = event.target;
            return ["drag-start"];
          case "touchstart":
            this.touchDown = true;
            this.dragStartElement = event.target;
            return ["drag-start"];
          case "touchmove":
          case "mousemove":
            if (!this.mouseDown && !this.touchDown && !this.isEventOverElement(event)) {
              return [];
            }
            return this.mouseDown || this.touchDown ? ["drag"] : ["hover"];
          case "mouseup":
            if (!this.mouseDown && !this.isEventOverElement(event)) {
              return [];
            }
            this.mouseDown = false;
            this.dragStartElement = void 0;
            return ["drag-end"];
          case "touchend":
            if (!this.touchDown && !this.isEventOverElement(event)) {
              return [];
            }
            this.touchDown = false;
            this.dragStartElement = void 0;
            return ["drag-end"];
          case "mouseout":
          case "touchcancel":
            return ["leave"];
          case "mouseenter":
            var mouseButtonDown = event instanceof MouseEvent && (event.buttons & 1) === 1;
            if (this.mouseDown !== mouseButtonDown) {
              this.mouseDown = mouseButtonDown;
              return [mouseButtonDown ? "drag-start" : "drag-end"];
            }
            return [];
          case "pagehide":
            return ["page-left"];
          case "wheel":
            return ["wheel"];
        }
        return [];
      };
      InteractionManager2.prototype.isEventOverElement = function(event) {
        var _a5;
        return event.target === this.element || ((_a5 = event.target) === null || _a5 === void 0 ? void 0 : _a5.parentElement) === this.element;
      };
      InteractionManager2.prototype.calculateCoordinates = function(event) {
        var _a5;
        if (event instanceof MouseEvent) {
          var clientX = event.clientX, clientY = event.clientY, pageX = event.pageX, pageY = event.pageY, offsetX = event.offsetX, offsetY = event.offsetY;
          return this.fixOffsets(event, { clientX, clientY, pageX, pageY, offsetX, offsetY });
        } else if (typeof TouchEvent !== "undefined" && event instanceof TouchEvent) {
          var lastTouch = (_a5 = event.touches[0]) !== null && _a5 !== void 0 ? _a5 : event.changedTouches[0];
          var clientX = lastTouch.clientX, clientY = lastTouch.clientY, pageX = lastTouch.pageX, pageY = lastTouch.pageY;
          return __assign7(__assign7({}, InteractionManager2.NULL_COORDS), { clientX, clientY, pageX, pageY });
        } else if (event instanceof PageTransitionEvent) {
          if (event.persisted) {
            return;
          }
          return InteractionManager2.NULL_COORDS;
        }
      };
      InteractionManager2.prototype.fixOffsets = function(event, coords) {
        var offsets = function(el) {
          var x = 0;
          var y = 0;
          while (el) {
            x += el.offsetLeft;
            y += el.offsetTop;
            el = el.offsetParent;
          }
          return { x, y };
        };
        if (this.dragStartElement != null && event.target !== this.dragStartElement) {
          var offsetDragStart = offsets(this.dragStartElement);
          var offsetEvent = offsets(event.target);
          coords.offsetX -= offsetDragStart.x - offsetEvent.x;
          coords.offsetY -= offsetDragStart.y - offsetEvent.y;
        }
        return coords;
      };
      InteractionManager2.prototype.buildEvent = function(opts2) {
        var type2 = opts2.type, event = opts2.event, clientX = opts2.clientX, clientY = opts2.clientY;
        var offsetX = opts2.offsetX, offsetY = opts2.offsetY, pageX = opts2.pageX, pageY = opts2.pageY;
        if (!isNumber(offsetX) || !isNumber(offsetY)) {
          var rect = this.element.getBoundingClientRect();
          offsetX = clientX - rect.left;
          offsetY = clientY - rect.top;
        }
        if (!isNumber(pageX) || !isNumber(pageY)) {
          var pageRect = this.rootElement.getBoundingClientRect();
          pageX = clientX - pageRect.left;
          pageY = clientY - pageRect.top;
        }
        var builtEvent = {
          type: type2,
          offsetX,
          offsetY,
          pageX,
          pageY,
          sourceEvent: event,
          consumed: false,
          consume: function() {
            return builtEvent.consumed = true;
          }
        };
        return builtEvent;
      };
      InteractionManager2.interactionDocuments = [];
      InteractionManager2.NULL_COORDS = {
        clientX: -Infinity,
        clientY: -Infinity,
        pageX: -Infinity,
        pageY: -Infinity,
        offsetX: -Infinity,
        offsetY: -Infinity
      };
      return InteractionManager2;
    }(BaseManager);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/interaction/cursorManager.js
var __read22, CursorManager;
var init_cursorManager = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/interaction/cursorManager.js"() {
    __read22 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    CursorManager = /** @class */
    function() {
      function CursorManager2(element2) {
        this.states = {};
        this.element = element2;
      }
      CursorManager2.prototype.updateCursor = function(callerId, style) {
        delete this.states[callerId];
        if (style != null) {
          this.states[callerId] = { style };
        }
        this.applyStates();
      };
      CursorManager2.prototype.applyStates = function() {
        var styleToApply = "default";
        Object.entries(this.states).reverse().slice(0, 1).forEach(function(_a5) {
          var _b2 = __read22(_a5, 2), _ = _b2[0], style = _b2[1].style;
          return styleToApply = style;
        });
        this.element.style.cursor = styleToApply;
      };
      return CursorManager2;
    }();
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/interaction/highlightManager.js
function isEqual2(a, b) {
  if (a === b)
    return true;
  if ((a === null || a === void 0 ? void 0 : a.series) !== (b === null || b === void 0 ? void 0 : b.series))
    return false;
  if ((a === null || a === void 0 ? void 0 : a.itemId) !== (b === null || b === void 0 ? void 0 : b.itemId))
    return false;
  if ((a === null || a === void 0 ? void 0 : a.datum) !== (b === null || b === void 0 ? void 0 : b.datum))
    return false;
  return true;
}
var __extends29, __read23, HighlightManager;
var init_highlightManager = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/interaction/highlightManager.js"() {
    init_baseManager();
    __extends29 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __read23 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    HighlightManager = /** @class */
    function(_super) {
      __extends29(HighlightManager2, _super);
      function HighlightManager2() {
        var _this = _super.call(this) || this;
        _this.states = {};
        _this.activeHighlight = void 0;
        return _this;
      }
      HighlightManager2.prototype.updateHighlight = function(callerId, highlightedDatum) {
        delete this.states[callerId];
        if (highlightedDatum != null) {
          this.states[callerId] = { highlightedDatum };
        }
        this.applyStates();
      };
      HighlightManager2.prototype.getActiveHighlight = function() {
        return this.activeHighlight;
      };
      HighlightManager2.prototype.applyStates = function() {
        var previousHighlight = this.activeHighlight;
        var highlightToApply = void 0;
        Object.entries(this.states).reverse().slice(0, 1).forEach(function(_a5) {
          var _b2 = __read23(_a5, 2), _ = _b2[0], highlightedDatum = _b2[1].highlightedDatum;
          return highlightToApply = highlightedDatum;
        });
        this.activeHighlight = highlightToApply;
        var changed = !isEqual2(previousHighlight, this.activeHighlight);
        if (changed) {
          var event_1 = {
            type: "highlight-change",
            previousHighlight,
            currentHighlight: this.activeHighlight
          };
          this.listeners.dispatch("highlight-change", event_1);
        }
      };
      return HighlightManager2;
    }(BaseManager);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/interaction/tooltipManager.js
var __values19, __read24, TooltipManager;
var init_tooltipManager = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/interaction/tooltipManager.js"() {
    __values19 = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read24 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    TooltipManager = /** @class */
    function() {
      function TooltipManager2(tooltip, interactionManager) {
        var _this = this;
        this.states = {};
        this.exclusiveAreas = {};
        this.destroyFns = [];
        this.tooltip = tooltip;
        var hoverRef = interactionManager.addListener("hover", function(e) {
          return _this.checkExclusiveRects(e);
        });
        this.destroyFns.push(function() {
          return interactionManager.removeListener(hoverRef);
        });
      }
      TooltipManager2.prototype.updateTooltip = function(callerId, meta, content) {
        var _a5;
        if (content == null) {
          content = (_a5 = this.states[callerId]) === null || _a5 === void 0 ? void 0 : _a5.content;
        }
        this.states[callerId] = { content, meta };
        this.applyStates();
      };
      TooltipManager2.prototype.updateExclusiveRect = function(callerId, area) {
        if (area) {
          this.exclusiveAreas[callerId] = area;
        } else {
          delete this.exclusiveAreas[callerId];
        }
      };
      TooltipManager2.prototype.removeTooltip = function(callerId) {
        delete this.states[callerId];
        this.applyStates();
      };
      TooltipManager2.prototype.getTooltipMeta = function(callerId) {
        var _a5;
        return (_a5 = this.states[callerId]) === null || _a5 === void 0 ? void 0 : _a5.meta;
      };
      TooltipManager2.prototype.destroy = function() {
        var e_1, _a5;
        try {
          for (var _b2 = __values19(this.destroyFns), _c2 = _b2.next(); !_c2.done; _c2 = _b2.next()) {
            var destroyFn = _c2.value;
            destroyFn();
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c2 && !_c2.done && (_a5 = _b2.return))
              _a5.call(_b2);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
      };
      TooltipManager2.prototype.checkExclusiveRects = function(e) {
        var e_2, _a5;
        var newAppliedExclusiveArea;
        try {
          for (var _b2 = __values19(Object.entries(this.exclusiveAreas)), _c2 = _b2.next(); !_c2.done; _c2 = _b2.next()) {
            var _d2 = __read24(_c2.value, 2), entryId = _d2[0], area = _d2[1];
            if (!area.containsPoint(e.offsetX, e.offsetY)) {
              continue;
            }
            newAppliedExclusiveArea = entryId;
            break;
          }
        } catch (e_2_1) {
          e_2 = { error: e_2_1 };
        } finally {
          try {
            if (_c2 && !_c2.done && (_a5 = _b2.return))
              _a5.call(_b2);
          } finally {
            if (e_2)
              throw e_2.error;
          }
        }
        if (newAppliedExclusiveArea === this.appliedExclusiveArea) {
          return;
        }
        this.appliedExclusiveArea = newAppliedExclusiveArea;
        this.applyStates();
      };
      TooltipManager2.prototype.applyStates = function() {
        var _this = this;
        var _a5;
        var ids = this.appliedExclusiveArea ? [this.appliedExclusiveArea] : Object.keys(this.states);
        var contentToApply = void 0;
        var metaToApply = void 0;
        ids.reverse().slice(0, 1).forEach(function(id) {
          var _a6;
          var _b2 = (_a6 = _this.states[id]) !== null && _a6 !== void 0 ? _a6 : {}, content = _b2.content, meta = _b2.meta;
          contentToApply = content;
          metaToApply = meta;
        });
        if (metaToApply === void 0 || contentToApply === void 0) {
          this.appliedState = void 0;
          this.tooltip.toggle(false);
          return;
        }
        if (((_a5 = this.appliedState) === null || _a5 === void 0 ? void 0 : _a5.content) === contentToApply) {
          var renderInstantly = this.tooltip.isVisible();
          this.tooltip.show(metaToApply, void 0, renderInstantly);
        } else {
          this.tooltip.show(metaToApply, contentToApply);
        }
        this.appliedState = { content: contentToApply, meta: metaToApply };
      };
      return TooltipManager2;
    }();
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/interaction/zoomManager.js
function isEqual3(a, b) {
  var _a5, _b2, _c2, _d2, _e, _f, _g, _h;
  if (a === b)
    return true;
  if (((_a5 = a === null || a === void 0 ? void 0 : a.x) === null || _a5 === void 0 ? void 0 : _a5.min) !== ((_b2 = b === null || b === void 0 ? void 0 : b.x) === null || _b2 === void 0 ? void 0 : _b2.min))
    return false;
  if (((_c2 = a === null || a === void 0 ? void 0 : a.x) === null || _c2 === void 0 ? void 0 : _c2.max) !== ((_d2 = b === null || b === void 0 ? void 0 : b.x) === null || _d2 === void 0 ? void 0 : _d2.max))
    return false;
  if (((_e = a === null || a === void 0 ? void 0 : a.y) === null || _e === void 0 ? void 0 : _e.max) !== ((_f = b === null || b === void 0 ? void 0 : b.y) === null || _f === void 0 ? void 0 : _f.max))
    return false;
  if (((_g = a === null || a === void 0 ? void 0 : a.y) === null || _g === void 0 ? void 0 : _g.min) !== ((_h = b === null || b === void 0 ? void 0 : b.y) === null || _h === void 0 ? void 0 : _h.min))
    return false;
  return true;
}
var __extends30, __assign8, __values20, __read25, ZoomManager;
var init_zoomManager = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/interaction/zoomManager.js"() {
    init_baseManager();
    __extends30 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __assign8 = function() {
      __assign8 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign8.apply(this, arguments);
    };
    __values20 = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read25 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    ZoomManager = /** @class */
    function(_super) {
      __extends30(ZoomManager2, _super);
      function ZoomManager2() {
        var _this = _super.call(this) || this;
        _this.states = {};
        _this.currentZoom = void 0;
        return _this;
      }
      ZoomManager2.prototype.updateZoom = function(callerId, newZoom) {
        delete this.states[callerId];
        if (newZoom != null) {
          this.states[callerId] = __assign8({}, newZoom);
        }
        this.applyStates();
      };
      ZoomManager2.prototype.getZoom = function() {
        return this.currentZoom;
      };
      ZoomManager2.prototype.applyStates = function() {
        var e_1, _a5;
        var currentZoom = this.currentZoom;
        var zoomToApply = {};
        try {
          for (var _b2 = __values20(Object.entries(this.states)), _c2 = _b2.next(); !_c2.done; _c2 = _b2.next()) {
            var _d2 = __read25(_c2.value, 2), _ = _d2[0], _e = _d2[1], x = _e.x, y = _e.y;
            zoomToApply.x = x !== null && x !== void 0 ? x : zoomToApply.x;
            zoomToApply.y = y !== null && y !== void 0 ? y : zoomToApply.y;
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c2 && !_c2.done && (_a5 = _b2.return))
              _a5.call(_b2);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        this.currentZoom = zoomToApply.x != null || zoomToApply.y != null ? zoomToApply : void 0;
        var changed = !isEqual3(currentZoom, this.currentZoom);
        if (!changed) {
          return;
        }
        var event = __assign8({ type: "zoom-change" }, currentZoom !== null && currentZoom !== void 0 ? currentZoom : {});
        this.listeners.dispatch("zoom-change", event);
      };
      return ZoomManager2;
    }(BaseManager);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/layout/layoutService.js
function isLayoutStage(t) {
  return t !== "layout-complete";
}
function isLayoutComplete(t) {
  return t === "layout-complete";
}
var __assign9, LayoutService;
var init_layoutService = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/layout/layoutService.js"() {
    init_listeners();
    __assign9 = function() {
      __assign9 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign9.apply(this, arguments);
    };
    LayoutService = /** @class */
    function() {
      function LayoutService2() {
        this.layoutProcessors = new Listeners();
        this.listeners = new Listeners();
      }
      LayoutService2.prototype.addListener = function(type2, cb) {
        if (isLayoutStage(type2)) {
          return this.layoutProcessors.addListener(type2, cb);
        } else if (isLayoutComplete(type2)) {
          return this.listeners.addListener(type2, cb);
        }
        throw new Error("AG Charts - unsupported listener type: " + type2);
      };
      LayoutService2.prototype.removeListener = function(listenerSymbol) {
        this.listeners.removeListener(listenerSymbol);
        this.layoutProcessors.removeListener(listenerSymbol);
      };
      LayoutService2.prototype.dispatchPerformLayout = function(stage, ctx) {
        var result = this.layoutProcessors.reduceDispatch(stage, function(_a5, ctx2) {
          var shrinkRect = _a5.shrinkRect;
          return [__assign9(__assign9({}, ctx2), { shrinkRect })];
        }, ctx);
        return result !== null && result !== void 0 ? result : ctx;
      };
      LayoutService2.prototype.dispatchLayoutComplete = function(event) {
        this.listeners.dispatch("layout-complete", event);
      };
      return LayoutService2;
    }();
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/updateService.js
var UpdateService;
var init_updateService = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/updateService.js"() {
    init_chartUpdateType();
    UpdateService = /** @class */
    function() {
      function UpdateService2(updateCallback) {
        this.updateCallback = updateCallback;
      }
      UpdateService2.prototype.update = function(type2) {
        if (type2 === void 0) {
          type2 = ChartUpdateType.FULL;
        }
        this.updateCallback(type2);
      };
      return UpdateService2;
    }();
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/chartHighlight.js
var __decorate24, ChartHighlight;
var init_chartHighlight = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/chartHighlight.js"() {
    init_validation();
    __decorate24 = function(decorators, target2, key2, desc) {
      var c = arguments.length, r = c < 3 ? target2 : desc === null ? desc = Object.getOwnPropertyDescriptor(target2, key2) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target2, key2, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target2, key2, r) : d(target2, key2)) || r;
      return c > 3 && r && Object.defineProperty(target2, key2, r), r;
    };
    ChartHighlight = /** @class */
    function() {
      function ChartHighlight2() {
        this.range = "tooltip";
      }
      __decorate24([
        Validate(STRING_UNION("tooltip", "node"))
      ], ChartHighlight2.prototype, "range", void 0);
      return ChartHighlight2;
    }();
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/chart.js
var __extends31, __assign10, __decorate25, __awaiter5, __generator5, __values21, __read26, __spread16, Chart;
var init_chart = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/chart.js"() {
    init_scene();
    init_group();
    init_series();
    init_padding();
    init_legend();
    init_bbox();
    init_sizeMonitor();
    init_observable();
    init_chartAxisDirection();
    init_id();
    init_labelPlacement();
    init_render();
    init_cartesianSeries();
    init_validation();
    init_async();
    init_tooltip();
    init_chartOverlays();
    init_interactionManager();
    init_json();
    init_layers();
    init_cursorManager();
    init_highlightManager();
    init_tooltipManager();
    init_zoomManager();
    init_layoutService();
    init_updateService();
    init_chartUpdateType();
    init_logger();
    init_proxy();
    init_chartHighlight();
    __extends31 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __assign10 = function() {
      __assign10 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign10.apply(this, arguments);
    };
    __decorate25 = function(decorators, target2, key2, desc) {
      var c = arguments.length, r = c < 3 ? target2 : desc === null ? desc = Object.getOwnPropertyDescriptor(target2, key2) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target2, key2, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target2, key2, r) : d(target2, key2)) || r;
      return c > 3 && r && Object.defineProperty(target2, key2, r), r;
    };
    __awaiter5 = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __generator5 = function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    __values21 = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read26 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread16 = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read26(arguments[i]));
      return ar;
    };
    Chart = /** @class */
    function(_super) {
      __extends31(Chart2, _super);
      function Chart2(document2, overrideDevicePixelRatio, resources) {
        if (document2 === void 0) {
          document2 = window.document;
        }
        var _a5;
        var _this = _super.call(this) || this;
        _this.id = createId(_this);
        _this.processedOptions = {};
        _this.userOptions = {};
        _this.queuedUserOptions = [];
        _this.seriesRoot = new Group({ name: _this.id + "-Series-root" });
        _this.extraDebugStats = {};
        _this._container = void 0;
        _this.data = [];
        _this.padding = new Padding(20);
        _this.seriesAreaPadding = new Padding(0);
        _this.title = void 0;
        _this.subtitle = void 0;
        _this.footnote = void 0;
        _this.mode = "standalone";
        _this._destroyed = false;
        _this.modules = {};
        _this._pendingFactoryUpdates = [];
        _this._performUpdateNoRenderCount = 0;
        _this._performUpdateType = ChartUpdateType.NONE;
        _this.seriesToUpdate = /* @__PURE__ */ new Set();
        _this.performUpdateTrigger = debouncedCallback(function(_a6) {
          var count = _a6.count;
          return __awaiter5(_this, void 0, void 0, function() {
            var error_1;
            return __generator5(this, function(_b2) {
              switch (_b2.label) {
                case 0:
                  if (this._destroyed)
                    return [
                      2
                      /*return*/
                    ];
                  _b2.label = 1;
                case 1:
                  _b2.trys.push([1, 3, , 4]);
                  return [4, this.performUpdate(count)];
                case 2:
                  _b2.sent();
                  return [3, 4];
                case 3:
                  error_1 = _b2.sent();
                  this._lastPerformUpdateError = error_1;
                  Logger.error("update error", error_1);
                  return [3, 4];
                case 4:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        });
        _this._axes = [];
        _this._series = [];
        _this.lastInteractionEvent = void 0;
        _this.pointerScheduler = debouncedAnimationFrame(function() {
          if (_this.lastInteractionEvent) {
            _this.handlePointer(_this.lastInteractionEvent);
          }
          _this.lastInteractionEvent = void 0;
        });
        _this.onSeriesNodeClick = function(event) {
          var seriesNodeClickEvent = __assign10(__assign10({}, event), { type: "seriesNodeClick" });
          Object.defineProperty(seriesNodeClickEvent, "series", {
            enumerable: false,
            // Should display the deprecation warning
            get: function() {
              return event.series;
            }
          });
          _this.fireEvent(seriesNodeClickEvent);
        };
        _this.onSeriesNodeDoubleClick = function(event) {
          var seriesNodeDoubleClick = __assign10(__assign10({}, event), { type: "seriesNodeDoubleClick" });
          _this.fireEvent(seriesNodeDoubleClick);
        };
        var scene = resources === null || resources === void 0 ? void 0 : resources.scene;
        var element2 = (_a5 = resources === null || resources === void 0 ? void 0 : resources.element) !== null && _a5 !== void 0 ? _a5 : document2.createElement("div");
        var container = resources === null || resources === void 0 ? void 0 : resources.container;
        var root = new Group({ name: "root" });
        root.visible = false;
        root.append(_this.seriesRoot);
        _this.axisGroup = new Group({ name: "Axes", layer: true, zIndex: Layers.AXIS_ZINDEX });
        root.appendChild(_this.axisGroup);
        _this.element = element2;
        element2.classList.add("ag-chart-wrapper");
        element2.style.position = "relative";
        _this.scene = scene !== null && scene !== void 0 ? scene : new Scene({ document: document2, overrideDevicePixelRatio });
        _this.debug = false;
        _this.scene.debug.consoleLog = false;
        _this.scene.root = root;
        _this.scene.container = element2;
        _this.autoSize = true;
        _this.interactionManager = new InteractionManager(element2);
        _this.cursorManager = new CursorManager(element2);
        _this.highlightManager = new HighlightManager();
        _this.zoomManager = new ZoomManager();
        _this.layoutService = new LayoutService();
        _this.updateService = new UpdateService(function(type2) {
          if (type2 === void 0) {
            type2 = ChartUpdateType.FULL;
          }
          return _this.update(type2);
        });
        SizeMonitor.observe(_this.element, function(size) {
          var width = size.width, height = size.height;
          if (!_this.autoSize) {
            return;
          }
          if (width === 0 && height === 0) {
            return;
          }
          if (width === _this.width && height === _this.height) {
            return;
          }
          _this._lastAutoSize = [width, height];
          _this.resize(width, height);
        });
        _this.layoutService.addListener("start-layout", function(e) {
          return _this.positionPadding(e.shrinkRect);
        });
        _this.layoutService.addListener("start-layout", function(e) {
          return _this.positionCaptions(e.shrinkRect);
        });
        _this.tooltip = new Tooltip(_this.scene.canvas.element, document2, document2.body);
        _this.tooltipManager = new TooltipManager(_this.tooltip, _this.interactionManager);
        _this.legend = new Legend(_this, _this.interactionManager, _this.cursorManager, _this.highlightManager, _this.tooltipManager, _this.layoutService);
        _this.overlays = new ChartOverlays(_this.element);
        _this.highlight = new ChartHighlight();
        _this.container = container;
        _this.interactionManager.addListener("click", function(event) {
          return _this.onClick(event);
        });
        _this.interactionManager.addListener("dblclick", function(event) {
          return _this.onDoubleClick(event);
        });
        _this.interactionManager.addListener("hover", function(event) {
          return _this.onMouseMove(event);
        });
        _this.interactionManager.addListener("leave", function(event) {
          return _this.onLeave(event);
        });
        _this.interactionManager.addListener("page-left", function() {
          return _this.destroy();
        });
        _this.interactionManager.addListener("wheel", function() {
          return _this.disablePointer();
        });
        _this.zoomManager.addListener("zoom-change", function(_) {
          return _this.update(ChartUpdateType.PROCESS_DATA, { forceNodeDataRefresh: true });
        });
        _this.highlightManager.addListener("highlight-change", function(event) {
          return _this.changeHighlightDatum(event);
        });
        return _this;
      }
      Chart2.prototype.getOptions = function() {
        var _a5;
        var queuedUserOptions = this.queuedUserOptions;
        var lastUpdateOptions = (_a5 = queuedUserOptions[queuedUserOptions.length - 1]) !== null && _a5 !== void 0 ? _a5 : this.userOptions;
        return jsonMerge([lastUpdateOptions]);
      };
      Object.defineProperty(Chart2.prototype, "container", {
        get: function() {
          return this._container;
        },
        set: function(value) {
          if (this._container !== value) {
            var parentNode = this.element.parentNode;
            if (parentNode != null) {
              parentNode.removeChild(this.element);
            }
            if (value && !this.destroyed) {
              value.appendChild(this.element);
            }
            this._container = value;
          }
        },
        enumerable: false,
        configurable: true
      });
      Chart2.prototype.autoSizeChanged = function(value) {
        var style = this.element.style;
        if (value) {
          style.display = "block";
          style.width = "100%";
          style.height = "100%";
          if (!this._lastAutoSize) {
            return;
          }
          this.resize(this._lastAutoSize[0], this._lastAutoSize[1]);
        } else {
          style.display = "inline-block";
          style.width = "auto";
          style.height = "auto";
        }
      };
      Chart2.prototype.download = function(fileName, fileFormat) {
        this.scene.download(fileName, fileFormat);
      };
      Object.defineProperty(Chart2.prototype, "destroyed", {
        get: function() {
          return this._destroyed;
        },
        enumerable: false,
        configurable: true
      });
      Chart2.prototype.addModule = function(module) {
        if (this.modules[module.optionsKey] != null) {
          throw new Error("AG Charts - module already initialised: " + module.optionsKey);
        }
        var moduleMeta = module.initialiseModule(this.getModuleContext());
        this.modules[module.optionsKey] = moduleMeta;
        this[module.optionsKey] = moduleMeta.instance;
      };
      Chart2.prototype.removeModule = function(module) {
        var _a5, _b2;
        (_b2 = (_a5 = this.modules[module.optionsKey]) === null || _a5 === void 0 ? void 0 : _a5.instance) === null || _b2 === void 0 ? void 0 : _b2.destroy();
        delete this.modules[module.optionsKey];
        delete this[module.optionsKey];
      };
      Chart2.prototype.isModuleEnabled = function(module) {
        return this.modules[module.optionsKey] != null;
      };
      Chart2.prototype.getModuleContext = function() {
        var _a5 = this, scene = _a5.scene, interactionManager = _a5.interactionManager, zoomManager = _a5.zoomManager, cursorManager = _a5.cursorManager, highlightManager = _a5.highlightManager, tooltipManager = _a5.tooltipManager, layoutService = _a5.layoutService, updateService = _a5.updateService;
        return {
          scene,
          interactionManager,
          zoomManager,
          cursorManager,
          highlightManager,
          tooltipManager,
          layoutService,
          updateService
        };
      };
      Chart2.prototype.destroy = function(opts2) {
        var e_1, _a5;
        if (this._destroyed) {
          return;
        }
        var keepTransferableResources = opts2 === null || opts2 === void 0 ? void 0 : opts2.keepTransferableResources;
        var result = void 0;
        this._performUpdateType = ChartUpdateType.NONE;
        this._pendingFactoryUpdates.splice(0);
        this.tooltipManager.destroy();
        this.tooltip.destroy();
        this.legend.destroy();
        SizeMonitor.unobserve(this.element);
        try {
          for (var _b2 = __values21(Object.entries(this.modules)), _c2 = _b2.next(); !_c2.done; _c2 = _b2.next()) {
            var _d2 = __read26(_c2.value, 2), key2 = _d2[0], module_1 = _d2[1];
            module_1.instance.destroy();
            delete this.modules[key2];
            delete this[key2];
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c2 && !_c2.done && (_a5 = _b2.return))
              _a5.call(_b2);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        this.interactionManager.destroy();
        if (keepTransferableResources) {
          this.scene.strip();
          result = { container: this.container, scene: this.scene, element: this.element };
        } else {
          this.scene.destroy();
          this.container = void 0;
        }
        this.series.forEach(function(s) {
          return s.destroy();
        });
        this.series = [];
        this.axes.forEach(function(a) {
          return a.destroy();
        });
        this.axes = [];
        this._destroyed = true;
        return result;
      };
      Chart2.prototype.log = function(opts2) {
        if (this.debug) {
          Logger.debug(opts2);
        }
      };
      Chart2.prototype.disablePointer = function(highlightOnly) {
        if (highlightOnly === void 0) {
          highlightOnly = false;
        }
        if (!highlightOnly) {
          this.tooltipManager.removeTooltip(this.id);
        }
        this.highlightManager.updateHighlight(this.id);
        if (this.lastInteractionEvent) {
          this.lastInteractionEvent = void 0;
        }
      };
      Chart2.prototype.requestFactoryUpdate = function(cb) {
        var callbacks = this._pendingFactoryUpdates;
        var count = callbacks.length;
        if (count === 0) {
          callbacks.push(cb);
          this._processCallbacks();
        } else {
          callbacks.splice(1, count - 1, cb);
        }
      };
      Chart2.prototype._processCallbacks = function() {
        return __awaiter5(this, void 0, void 0, function() {
          var callbacks, e_2;
          return __generator5(this, function(_a5) {
            switch (_a5.label) {
              case 0:
                callbacks = this._pendingFactoryUpdates;
                _a5.label = 1;
              case 1:
                if (!(callbacks.length > 0))
                  return [3, 7];
                if (!this.updatePending)
                  return [3, 3];
                return [4, sleep(1)];
              case 2:
                _a5.sent();
                return [3, 1];
              case 3:
                _a5.trys.push([3, 5, , 6]);
                return [4, callbacks[0]()];
              case 4:
                _a5.sent();
                return [3, 6];
              case 5:
                e_2 = _a5.sent();
                Logger.error("update error", e_2);
                return [3, 6];
              case 6:
                callbacks.shift();
                return [3, 1];
              case 7:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      Object.defineProperty(Chart2.prototype, "performUpdateType", {
        get: function() {
          return this._performUpdateType;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Chart2.prototype, "updatePending", {
        get: function() {
          return this._performUpdateType !== ChartUpdateType.NONE || this.lastInteractionEvent != null;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Chart2.prototype, "lastPerformUpdateError", {
        get: function() {
          return this._lastPerformUpdateError;
        },
        enumerable: false,
        configurable: true
      });
      Chart2.prototype.awaitUpdateCompletion = function() {
        return __awaiter5(this, void 0, void 0, function() {
          return __generator5(this, function(_a5) {
            switch (_a5.label) {
              case 0:
                return [4, this.performUpdateTrigger.await()];
              case 1:
                _a5.sent();
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      Chart2.prototype.update = function(type2, opts2) {
        var e_3, _a5;
        if (type2 === void 0) {
          type2 = ChartUpdateType.FULL;
        }
        var _b2 = opts2 || {}, _c2 = _b2.forceNodeDataRefresh, forceNodeDataRefresh = _c2 === void 0 ? false : _c2, _d2 = _b2.seriesToUpdate, seriesToUpdate = _d2 === void 0 ? this.series : _d2;
        if (forceNodeDataRefresh) {
          this.series.forEach(function(series2) {
            return series2.markNodeDataDirty();
          });
        }
        try {
          for (var seriesToUpdate_1 = __values21(seriesToUpdate), seriesToUpdate_1_1 = seriesToUpdate_1.next(); !seriesToUpdate_1_1.done; seriesToUpdate_1_1 = seriesToUpdate_1.next()) {
            var series = seriesToUpdate_1_1.value;
            this.seriesToUpdate.add(series);
          }
        } catch (e_3_1) {
          e_3 = { error: e_3_1 };
        } finally {
          try {
            if (seriesToUpdate_1_1 && !seriesToUpdate_1_1.done && (_a5 = seriesToUpdate_1.return))
              _a5.call(seriesToUpdate_1);
          } finally {
            if (e_3)
              throw e_3.error;
          }
        }
        if (type2 < this._performUpdateType) {
          this._performUpdateType = type2;
          this.performUpdateTrigger.schedule();
        }
      };
      Chart2.prototype.performUpdate = function(count) {
        var _a5;
        return __awaiter5(this, void 0, void 0, function() {
          var _b2, performUpdateType, extraDebugStats, splits, _c2, count_1, seriesRect_1, seriesUpdates, tooltipMeta, end;
          return __generator5(this, function(_d2) {
            switch (_d2.label) {
              case 0:
                _b2 = this, performUpdateType = _b2._performUpdateType, extraDebugStats = _b2.extraDebugStats;
                splits = [performance.now()];
                _c2 = performUpdateType;
                switch (_c2) {
                  case ChartUpdateType.FULL:
                    return [3, 1];
                  case ChartUpdateType.PROCESS_DATA:
                    return [3, 1];
                  case ChartUpdateType.PERFORM_LAYOUT:
                    return [3, 3];
                  case ChartUpdateType.SERIES_UPDATE:
                    return [3, 5];
                  case ChartUpdateType.TOOLTIP_RECALCULATION:
                    return [3, 7];
                  case ChartUpdateType.SCENE_RENDER:
                    return [3, 8];
                  case ChartUpdateType.NONE:
                    return [3, 10];
                }
                return [3, 11];
              case 1:
                return [4, this.processData()];
              case 2:
                _d2.sent();
                this.disablePointer(true);
                splits.push(performance.now());
                _d2.label = 3;
              case 3:
                if (this.autoSize && !this._lastAutoSize) {
                  count_1 = this._performUpdateNoRenderCount++;
                  if (count_1 < 5) {
                    this._performUpdateType = ChartUpdateType.PERFORM_LAYOUT;
                    this.performUpdateTrigger.schedule();
                    return [3, 11];
                  }
                }
                this._performUpdateNoRenderCount = 0;
                return [4, this.performLayout()];
              case 4:
                _d2.sent();
                this.handleOverlays();
                splits.push(performance.now());
                _d2.label = 5;
              case 5:
                seriesRect_1 = this.seriesRect;
                seriesUpdates = __spread16(this.seriesToUpdate).map(function(series) {
                  return series.update({ seriesRect: seriesRect_1 });
                });
                this.seriesToUpdate.clear();
                return [4, Promise.all(seriesUpdates)];
              case 6:
                _d2.sent();
                splits.push(performance.now());
                _d2.label = 7;
              case 7:
                tooltipMeta = this.tooltipManager.getTooltipMeta(this.id);
                if (performUpdateType < ChartUpdateType.SERIES_UPDATE && ((_a5 = tooltipMeta === null || tooltipMeta === void 0 ? void 0 : tooltipMeta.event) === null || _a5 === void 0 ? void 0 : _a5.type) === "hover") {
                  this.handlePointer(tooltipMeta.event);
                }
                _d2.label = 8;
              case 8:
                return [4, this.scene.render({ debugSplitTimes: splits, extraDebugStats })];
              case 9:
                _d2.sent();
                this.extraDebugStats = {};
                _d2.label = 10;
              case 10:
                this._performUpdateType = ChartUpdateType.NONE;
                _d2.label = 11;
              case 11:
                end = performance.now();
                this.log({
                  chart: this,
                  durationMs: Math.round((end - splits[0]) * 100) / 100,
                  count,
                  performUpdateType: ChartUpdateType[performUpdateType]
                });
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      Object.defineProperty(Chart2.prototype, "axes", {
        get: function() {
          return this._axes;
        },
        set: function(values) {
          var _this = this;
          var removedAxes = /* @__PURE__ */ new Set();
          this._axes.forEach(function(axis) {
            axis.detachAxis(_this.axisGroup);
            removedAxes.add(axis);
          });
          this._axes = values.filter(function(a) {
            return !a.linkedTo;
          }).concat(values.filter(function(a) {
            return a.linkedTo;
          }));
          this._axes.forEach(function(axis) {
            axis.attachAxis(_this.axisGroup);
            removedAxes.delete(axis);
          });
          removedAxes.forEach(function(axis) {
            return axis.destroy();
          });
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Chart2.prototype, "series", {
        get: function() {
          return this._series;
        },
        set: function(values) {
          var _this = this;
          this.removeAllSeries();
          values.forEach(function(series) {
            return _this.addSeries(series);
          });
        },
        enumerable: false,
        configurable: true
      });
      Chart2.prototype.addSeries = function(series, before) {
        var _a5 = this, allSeries = _a5.series, seriesRoot = _a5.seriesRoot;
        var canAdd = allSeries.indexOf(series) < 0;
        if (canAdd) {
          var beforeIndex = before ? allSeries.indexOf(before) : -1;
          if (beforeIndex >= 0) {
            allSeries.splice(beforeIndex, 0, series);
            seriesRoot.insertBefore(series.rootGroup, before.rootGroup);
          } else {
            allSeries.push(series);
            seriesRoot.append(series.rootGroup);
          }
          this.initSeries(series);
          return true;
        }
        return false;
      };
      Chart2.prototype.initSeries = function(series) {
        series.chart = this;
        series.highlightManager = this.highlightManager;
        if (!series.data) {
          series.data = this.data;
        }
        this.addSeriesListeners(series);
      };
      Chart2.prototype.freeSeries = function(series) {
        series.chart = void 0;
        series.removeEventListener("nodeClick", this.onSeriesNodeClick);
        series.removeEventListener("nodeDoubleClick", this.onSeriesNodeDoubleClick);
      };
      Chart2.prototype.removeAllSeries = function() {
        var _this = this;
        this.series.forEach(function(series) {
          _this.freeSeries(series);
          _this.seriesRoot.removeChild(series.rootGroup);
        });
        this._series = [];
      };
      Chart2.prototype.addSeriesListeners = function(series) {
        if (this.hasEventListener("seriesNodeClick")) {
          series.addEventListener("nodeClick", this.onSeriesNodeClick);
        }
        if (this.hasEventListener("seriesNodeDoubleClick")) {
          series.addEventListener("nodeDoubleClick", this.onSeriesNodeDoubleClick);
        }
      };
      Chart2.prototype.updateAllSeriesListeners = function() {
        var _this = this;
        this.series.forEach(function(series) {
          series.removeEventListener("nodeClick", _this.onSeriesNodeClick);
          series.removeEventListener("nodeDoubleClick", _this.onSeriesNodeDoubleClick);
          _this.addSeriesListeners(series);
        });
      };
      Chart2.prototype.assignSeriesToAxes = function() {
        var _this = this;
        this.axes.forEach(function(axis) {
          axis.boundSeries = _this.series.filter(function(s) {
            var seriesAxis = axis.direction === ChartAxisDirection.X ? s.xAxis : s.yAxis;
            return seriesAxis === axis;
          });
        });
      };
      Chart2.prototype.assignAxesToSeries = function(force) {
        var _this = this;
        if (force === void 0) {
          force = false;
        }
        var directionToAxesMap = {};
        this.axes.forEach(function(axis) {
          var direction = axis.direction;
          var directionAxes = directionToAxesMap[direction] || (directionToAxesMap[direction] = []);
          directionAxes.push(axis);
        });
        this.series.forEach(function(series) {
          series.directions.forEach(function(direction) {
            var currentAxis = direction === ChartAxisDirection.X ? series.xAxis : series.yAxis;
            if (currentAxis && !force) {
              return;
            }
            var directionAxes = directionToAxesMap[direction];
            if (!directionAxes) {
              Logger.warn("no available axis for direction [" + direction + "]; check series and axes configuration.");
              return;
            }
            var seriesKeys = series.getKeys(direction);
            var newAxis = _this.findMatchingAxis(directionAxes, series.getKeys(direction));
            if (!newAxis) {
              Logger.warn("no matching axis for direction [" + direction + "] and keys [" + seriesKeys + "]; check series and axes configuration.");
              return;
            }
            if (direction === ChartAxisDirection.X) {
              series.xAxis = newAxis;
            } else {
              series.yAxis = newAxis;
            }
          });
        });
      };
      Chart2.prototype.findMatchingAxis = function(directionAxes, directionKeys) {
        var e_4, _a5, e_5, _b2;
        try {
          for (var directionAxes_1 = __values21(directionAxes), directionAxes_1_1 = directionAxes_1.next(); !directionAxes_1_1.done; directionAxes_1_1 = directionAxes_1.next()) {
            var axis = directionAxes_1_1.value;
            var axisKeys = axis.keys;
            if (!axisKeys.length) {
              return axis;
            }
            if (!directionKeys) {
              continue;
            }
            try {
              for (var directionKeys_1 = (e_5 = void 0, __values21(directionKeys)), directionKeys_1_1 = directionKeys_1.next(); !directionKeys_1_1.done; directionKeys_1_1 = directionKeys_1.next()) {
                var directionKey = directionKeys_1_1.value;
                if (axisKeys.indexOf(directionKey) >= 0) {
                  return axis;
                }
              }
            } catch (e_5_1) {
              e_5 = { error: e_5_1 };
            } finally {
              try {
                if (directionKeys_1_1 && !directionKeys_1_1.done && (_b2 = directionKeys_1.return))
                  _b2.call(directionKeys_1);
              } finally {
                if (e_5)
                  throw e_5.error;
              }
            }
          }
        } catch (e_4_1) {
          e_4 = { error: e_4_1 };
        } finally {
          try {
            if (directionAxes_1_1 && !directionAxes_1_1.done && (_a5 = directionAxes_1.return))
              _a5.call(directionAxes_1);
          } finally {
            if (e_4)
              throw e_4.error;
          }
        }
      };
      Chart2.prototype.resize = function(width, height) {
        if (!width || !height || !Number.isFinite(width) || !Number.isFinite(height))
          return;
        if (this.scene.resize(width, height)) {
          this.disablePointer();
          this.update(ChartUpdateType.PERFORM_LAYOUT, { forceNodeDataRefresh: true });
        }
      };
      Chart2.prototype.processData = function() {
        return __awaiter5(this, void 0, void 0, function() {
          return __generator5(this, function(_a5) {
            switch (_a5.label) {
              case 0:
                if (this.axes.length > 0 || this.series.some(function(s) {
                  return s instanceof CartesianSeries;
                })) {
                  this.assignAxesToSeries(true);
                  this.assignSeriesToAxes();
                }
                return [4, Promise.all(this.series.map(function(s) {
                  return s.processData();
                }))];
              case 1:
                _a5.sent();
                return [4, this.updateLegend()];
              case 2:
                _a5.sent();
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      Chart2.prototype.placeLabels = function() {
        var e_6, _a5;
        var visibleSeries = [];
        var data = [];
        try {
          for (var _b2 = __values21(this.series), _c2 = _b2.next(); !_c2.done; _c2 = _b2.next()) {
            var series = _c2.value;
            if (!series.visible) {
              continue;
            }
            var labelData = series.getLabelData();
            if (!(labelData && isPointLabelDatum(labelData[0]))) {
              continue;
            }
            data.push(labelData);
            visibleSeries.push(series);
          }
        } catch (e_6_1) {
          e_6 = { error: e_6_1 };
        } finally {
          try {
            if (_c2 && !_c2.done && (_a5 = _b2.return))
              _a5.call(_b2);
          } finally {
            if (e_6)
              throw e_6.error;
          }
        }
        var seriesRect = this.seriesRect;
        var labels = seriesRect && data.length > 0 ? placeLabels(data, { x: 0, y: 0, width: seriesRect.width, height: seriesRect.height }) : [];
        return new Map(labels.map(function(l, i) {
          return [visibleSeries[i], l];
        }));
      };
      Chart2.prototype.updateLegend = function() {
        return __awaiter5(this, void 0, void 0, function() {
          var legendData, formatter;
          return __generator5(this, function(_a5) {
            legendData = [];
            this.series.filter(function(s) {
              return s.showInLegend;
            }).forEach(function(series) {
              legendData.push.apply(legendData, __spread16(series.getLegendData()));
            });
            formatter = this.legend.item.label.formatter;
            if (formatter) {
              legendData.forEach(function(datum) {
                return datum.label.text = formatter({
                  get id() {
                    Logger.warnOnce("LegendLabelFormatterParams.id is deprecated, use seriesId instead");
                    return datum.seriesId;
                  },
                  itemId: datum.itemId,
                  value: datum.label.text,
                  seriesId: datum.seriesId
                });
              });
            }
            this.legend.data = legendData;
            return [
              2
              /*return*/
            ];
          });
        });
      };
      Chart2.prototype.performLayout = function() {
        return __awaiter5(this, void 0, void 0, function() {
          var _a5, width, height, shrinkRect;
          return __generator5(this, function(_b2) {
            this.scene.root.visible = true;
            _a5 = this.scene, width = _a5.width, height = _a5.height;
            shrinkRect = new BBox(0, 0, width, height);
            shrinkRect = this.layoutService.dispatchPerformLayout("start-layout", { shrinkRect }).shrinkRect;
            shrinkRect = this.layoutService.dispatchPerformLayout("before-series", { shrinkRect }).shrinkRect;
            return [2, shrinkRect];
          });
        });
      };
      Chart2.prototype.positionPadding = function(shrinkRect) {
        var padding = this.padding;
        shrinkRect.shrink(padding.left, "left");
        shrinkRect.shrink(padding.top, "top");
        shrinkRect.shrink(padding.right, "right");
        shrinkRect.shrink(padding.bottom, "bottom");
        return { shrinkRect };
      };
      Chart2.prototype.positionCaptions = function(shrinkRect) {
        var _a5 = this, title = _a5.title, subtitle = _a5.subtitle, footnote = _a5.footnote;
        var newShrinkRect = shrinkRect.clone();
        var positionTopAndShrinkBBox = function(caption) {
          var _a6;
          var baseY = newShrinkRect.y;
          caption.node.x = newShrinkRect.x + newShrinkRect.width / 2;
          caption.node.y = baseY;
          caption.node.textBaseline = "top";
          var bbox = caption.node.computeBBox();
          var bboxHeight = Math.ceil(bbox.y - baseY + bbox.height + ((_a6 = caption.spacing) !== null && _a6 !== void 0 ? _a6 : 0));
          newShrinkRect.shrink(bboxHeight, "top");
        };
        var positionBottomAndShrinkBBox = function(caption) {
          var _a6;
          var baseY = newShrinkRect.y + newShrinkRect.height;
          caption.node.x = newShrinkRect.x + newShrinkRect.width / 2;
          caption.node.y = baseY;
          caption.node.textBaseline = "bottom";
          var bbox = caption.node.computeBBox();
          var bboxHeight = Math.ceil(baseY - bbox.y + ((_a6 = caption.spacing) !== null && _a6 !== void 0 ? _a6 : 0));
          newShrinkRect.shrink(bboxHeight, "bottom");
        };
        if (title) {
          title.node.visible = title.enabled;
          if (title.node.visible) {
            positionTopAndShrinkBBox(title);
          }
        }
        if (subtitle) {
          subtitle.node.visible = title !== void 0 && title.enabled && subtitle.enabled;
          if (subtitle.node.visible) {
            positionTopAndShrinkBBox(subtitle);
          }
        }
        if (footnote) {
          footnote.node.visible = footnote.enabled;
          if (footnote.node.visible) {
            positionBottomAndShrinkBBox(footnote);
          }
        }
        return { shrinkRect: newShrinkRect };
      };
      Chart2.prototype.getSeriesRect = function() {
        return this.seriesRect;
      };
      Chart2.prototype.pickSeriesNode = function(point, exactMatchOnly, maxDistance) {
        var e_7, _a5;
        var _b2, _c2;
        var start = performance.now();
        var pickModes = exactMatchOnly ? [SeriesNodePickMode.EXACT_SHAPE_MATCH] : void 0;
        var reverseSeries = __spread16(this.series).reverse();
        var result = void 0;
        try {
          for (var reverseSeries_1 = __values21(reverseSeries), reverseSeries_1_1 = reverseSeries_1.next(); !reverseSeries_1_1.done; reverseSeries_1_1 = reverseSeries_1.next()) {
            var series = reverseSeries_1_1.value;
            if (!series.visible || !series.rootGroup.visible) {
              continue;
            }
            var _d2 = (_b2 = series.pickNode(point, pickModes)) !== null && _b2 !== void 0 ? _b2 : {}, match = _d2.match, distance = _d2.distance;
            if (!match || distance == null) {
              continue;
            }
            if ((!result || result.distance > distance) && distance <= (maxDistance !== null && maxDistance !== void 0 ? maxDistance : Infinity)) {
              result = { series, distance, datum: match };
            }
            if (distance === 0) {
              break;
            }
          }
        } catch (e_7_1) {
          e_7 = { error: e_7_1 };
        } finally {
          try {
            if (reverseSeries_1_1 && !reverseSeries_1_1.done && (_a5 = reverseSeries_1.return))
              _a5.call(reverseSeries_1);
          } finally {
            if (e_7)
              throw e_7.error;
          }
        }
        this.extraDebugStats["pickSeriesNode"] = Math.round(((_c2 = this.extraDebugStats["pickSeriesNode"]) !== null && _c2 !== void 0 ? _c2 : 0) + (performance.now() - start));
        return result;
      };
      Chart2.prototype.onMouseMove = function(event) {
        this.lastInteractionEvent = event;
        this.pointerScheduler.schedule();
        this.extraDebugStats["mouseX"] = event.offsetX;
        this.extraDebugStats["mouseY"] = event.offsetY;
        this.update(ChartUpdateType.SCENE_RENDER);
      };
      Chart2.prototype.onLeave = function(event) {
        if (this.tooltip.pointerLeftOntoTooltip(event)) {
          return;
        }
        this.disablePointer();
      };
      Chart2.prototype.handlePointer = function(event) {
        var _this = this;
        var _a5 = this, lastPick = _a5.lastPick, hoverRect = _a5.hoverRect;
        var offsetX = event.offsetX, offsetY = event.offsetY;
        var disablePointer = function(highlightOnly) {
          if (highlightOnly === void 0) {
            highlightOnly = false;
          }
          if (lastPick) {
            _this.disablePointer(highlightOnly);
          }
        };
        if (!(hoverRect === null || hoverRect === void 0 ? void 0 : hoverRect.containsPoint(offsetX, offsetY))) {
          disablePointer();
          return;
        }
        this.handlePointerTooltip(event, disablePointer);
        this.handlePointerNode(event);
      };
      Chart2.prototype.handlePointerTooltip = function(event, disablePointer) {
        var _a5, _b2;
        var _c2 = this, lastPick = _c2.lastPick, tooltip = _c2.tooltip;
        var range2 = tooltip.range;
        var pageX = event.pageX, pageY = event.pageY, offsetX = event.offsetX, offsetY = event.offsetY;
        var pixelRange;
        if (typeof range2 === "number" && Number.isFinite(range2)) {
          pixelRange = range2;
        }
        var pick = this.pickSeriesNode({ x: offsetX, y: offsetY }, range2 === "exact", pixelRange);
        if (!pick) {
          this.tooltipManager.updateTooltip(this.id);
          if (this.highlight.range === "tooltip")
            disablePointer(true);
          return;
        }
        var isNewDatum = this.highlight.range === "node" || !lastPick || lastPick.datum !== pick.datum;
        var html;
        if (isNewDatum) {
          html = pick.series.getTooltipHtml(pick.datum);
          if (this.highlight.range === "tooltip") {
            this.highlightManager.updateHighlight(this.id, pick.datum);
          }
        } else if (lastPick) {
          lastPick.event = event.sourceEvent;
        }
        var isPixelRange = pixelRange != null;
        var tooltipEnabled = this.tooltip.enabled && pick.series.tooltip.enabled;
        var exactlyMatched = range2 === "exact" && pick.distance === 0;
        var rangeMatched = range2 === "nearest" || isPixelRange || exactlyMatched;
        var shouldUpdateTooltip = tooltipEnabled && rangeMatched && (!isNewDatum || html !== void 0);
        var position = {
          xOffset: pick.datum.series.tooltip.position.xOffset,
          yOffset: pick.datum.series.tooltip.position.yOffset
        };
        var meta = this.mergePointerDatum({ pageX, pageY, offsetX, offsetY, event, position }, pick.datum);
        meta.enableInteraction = (_b2 = (_a5 = pick.series.tooltip.interaction) === null || _a5 === void 0 ? void 0 : _a5.enabled) !== null && _b2 !== void 0 ? _b2 : false;
        if (shouldUpdateTooltip) {
          this.tooltipManager.updateTooltip(this.id, meta, html);
        }
      };
      Chart2.prototype.handlePointerNode = function(event) {
        var _this = this;
        var found = this.checkSeriesNodeRange(event, function(series, datum) {
          if (series.hasEventListener("nodeClick") || series.hasEventListener("nodeDoubleClick")) {
            _this.cursorManager.updateCursor("chart", "pointer");
          }
          if (_this.highlight.range === "node") {
            _this.highlightManager.updateHighlight(_this.id, datum);
          }
        });
        if (!found) {
          this.cursorManager.updateCursor("chart");
          if (this.highlight.range === "node") {
            this.highlightManager.updateHighlight(this.id);
          }
        }
      };
      Chart2.prototype.onClick = function(event) {
        if (this.checkSeriesNodeClick(event)) {
          this.update(ChartUpdateType.SERIES_UPDATE);
          return;
        }
        this.fireEvent({
          type: "click",
          event: event.sourceEvent
        });
      };
      Chart2.prototype.onDoubleClick = function(event) {
        if (this.checkSeriesNodeDoubleClick(event)) {
          this.update(ChartUpdateType.SERIES_UPDATE);
          return;
        }
        this.fireEvent({
          type: "doubleClick",
          event: event.sourceEvent
        });
      };
      Chart2.prototype.checkSeriesNodeClick = function(event) {
        return this.checkSeriesNodeRange(event, function(series, datum) {
          return series.fireNodeClickEvent(event.sourceEvent, datum);
        });
      };
      Chart2.prototype.checkSeriesNodeDoubleClick = function(event) {
        return this.checkSeriesNodeRange(event, function(series, datum) {
          return series.fireNodeDoubleClickEvent(event.sourceEvent, datum);
        });
      };
      Chart2.prototype.checkSeriesNodeRange = function(event, callback) {
        var nearestNode = this.pickSeriesNode({ x: event.offsetX, y: event.offsetY }, false);
        var datum = nearestNode === null || nearestNode === void 0 ? void 0 : nearestNode.datum;
        var nodeClickRange = datum === null || datum === void 0 ? void 0 : datum.series.nodeClickRange;
        if (datum && nodeClickRange === "nearest") {
          callback(datum.series, datum);
          return true;
        }
        var pixelRange;
        if (typeof nodeClickRange === "number" && Number.isFinite(nodeClickRange)) {
          pixelRange = nodeClickRange;
        }
        var pick = this.pickSeriesNode({ x: event.offsetX, y: event.offsetY }, nodeClickRange === "exact", pixelRange);
        if (!pick)
          return false;
        var isPixelRange = pixelRange != null;
        var exactlyMatched = nodeClickRange === "exact" && pick.distance === 0;
        if (isPixelRange || exactlyMatched) {
          callback(pick.series, pick.datum);
          return true;
        }
        return false;
      };
      Chart2.prototype.mergePointerDatum = function(meta, datum) {
        var type2 = datum.series.tooltip.position.type;
        if (type2 === "node" && datum.nodeMidPoint) {
          var _a5 = datum.nodeMidPoint, x = _a5.x, y = _a5.y;
          var canvas = this.scene.canvas;
          var point = datum.series.rootGroup.inverseTransformPoint(x, y);
          var canvasRect = canvas.element.getBoundingClientRect();
          return __assign10(__assign10({}, meta), { pageX: Math.round(canvasRect.left + window.scrollX + point.x), pageY: Math.round(canvasRect.top + window.scrollY + point.y), offsetX: Math.round(point.x), offsetY: Math.round(point.y) });
        }
        return meta;
      };
      Chart2.prototype.changeHighlightDatum = function(event) {
        var seriesToUpdate = /* @__PURE__ */ new Set();
        var _a5 = event.currentHighlight || {}, _b2 = _a5.series, newSeries = _b2 === void 0 ? void 0 : _b2, newDatum = _a5.datum;
        var _c2 = event.previousHighlight || {}, _d2 = _c2.series, lastSeries = _d2 === void 0 ? void 0 : _d2, lastDatum = _c2.datum;
        if (lastSeries) {
          seriesToUpdate.add(lastSeries);
        }
        if (newSeries) {
          seriesToUpdate.add(newSeries);
        }
        if ((lastSeries === null || lastSeries === void 0 ? void 0 : lastSeries.cursor) && lastDatum) {
          this.cursorManager.updateCursor(lastSeries.id);
        }
        if ((newSeries === null || newSeries === void 0 ? void 0 : newSeries.cursor) && newDatum) {
          this.cursorManager.updateCursor(newSeries.id, newSeries.cursor);
        }
        this.lastPick = event.currentHighlight ? { datum: event.currentHighlight } : void 0;
        var updateAll = newSeries == null || lastSeries == null;
        if (updateAll) {
          this.update(ChartUpdateType.SERIES_UPDATE);
        } else {
          this.update(ChartUpdateType.SERIES_UPDATE, { seriesToUpdate });
        }
      };
      Chart2.prototype.waitForUpdate = function(timeoutMs) {
        if (timeoutMs === void 0) {
          timeoutMs = 5e3;
        }
        return __awaiter5(this, void 0, void 0, function() {
          var start;
          return __generator5(this, function(_a5) {
            switch (_a5.label) {
              case 0:
                start = performance.now();
                _a5.label = 1;
              case 1:
                if (!(this._pendingFactoryUpdates.length > 0 || this.updatePending))
                  return [3, 3];
                if (performance.now() - start > timeoutMs) {
                  throw new Error("waitForUpdate() timeout reached.");
                }
                return [4, sleep(5)];
              case 2:
                _a5.sent();
                return [3, 1];
              case 3:
                return [4, this.awaitUpdateCompletion()];
              case 4:
                _a5.sent();
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      Chart2.prototype.handleOverlays = function() {
        this.handleNoDataOverlay();
      };
      Chart2.prototype.handleNoDataOverlay = function() {
        var shouldDisplayNoDataOverlay = !this.series.some(function(s) {
          return s.hasData();
        });
        var rect = this.getSeriesRect();
        if (shouldDisplayNoDataOverlay && rect) {
          this.overlays.noData.show(rect);
        } else {
          this.overlays.noData.hide();
        }
      };
      __decorate25([
        ActionOnSet({
          newValue: function(value) {
            this.scene.debug.consoleLog = value;
          }
        })
      ], Chart2.prototype, "debug", void 0);
      __decorate25([
        ActionOnSet({
          newValue: function(value) {
            var _a5;
            (_a5 = this.series) === null || _a5 === void 0 ? void 0 : _a5.forEach(function(series) {
              return series.data = value;
            });
          }
        })
      ], Chart2.prototype, "data", void 0);
      __decorate25([
        ActionOnSet({
          newValue: function(value) {
            this.autoSize = false;
            this.resize(value, this.height);
          }
        })
      ], Chart2.prototype, "width", void 0);
      __decorate25([
        ActionOnSet({
          newValue: function(value) {
            this.autoSize = false;
            this.resize(this.width, value);
          }
        })
      ], Chart2.prototype, "height", void 0);
      __decorate25([
        ActionOnSet({
          changeValue: function(value) {
            this.autoSizeChanged(value);
          }
        }),
        Validate(BOOLEAN)
      ], Chart2.prototype, "autoSize", void 0);
      __decorate25([
        ActionOnSet({
          newValue: function(value) {
            var _a5;
            (_a5 = this.scene.root) === null || _a5 === void 0 ? void 0 : _a5.appendChild(value.node);
          },
          oldValue: function(oldValue) {
            var _a5;
            (_a5 = this.scene.root) === null || _a5 === void 0 ? void 0 : _a5.removeChild(oldValue.node);
          }
        })
      ], Chart2.prototype, "title", void 0);
      __decorate25([
        ActionOnSet({
          newValue: function(value) {
            var _a5;
            (_a5 = this.scene.root) === null || _a5 === void 0 ? void 0 : _a5.appendChild(value.node);
          },
          oldValue: function(oldValue) {
            var _a5;
            (_a5 = this.scene.root) === null || _a5 === void 0 ? void 0 : _a5.removeChild(oldValue.node);
          }
        })
      ], Chart2.prototype, "subtitle", void 0);
      __decorate25([
        ActionOnSet({
          newValue: function(value) {
            var _a5;
            (_a5 = this.scene.root) === null || _a5 === void 0 ? void 0 : _a5.appendChild(value.node);
          },
          oldValue: function(oldValue) {
            var _a5;
            (_a5 = this.scene.root) === null || _a5 === void 0 ? void 0 : _a5.removeChild(oldValue.node);
          }
        })
      ], Chart2.prototype, "footnote", void 0);
      __decorate25([
        Validate(STRING_UNION("standalone", "integrated"))
      ], Chart2.prototype, "mode", void 0);
      return Chart2;
    }(Observable);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/layout/tree.js
function ticksToTree(ticks, pad2) {
  if (pad2 === void 0) {
    pad2 = true;
  }
  var root = new TreeNode();
  var depth = 0;
  if (pad2) {
    ticks.forEach(function(tick) {
      return depth = Math.max(depth, tick.labels.length);
    });
  }
  ticks.forEach(function(tick) {
    if (pad2) {
      while (tick.labels.length < depth) {
        tick.labels.unshift("");
      }
    }
    insertTick(root, tick);
  });
  return root;
}
function insertTick(root, tick) {
  var pathParts = tick.labels.slice().reverse();
  var lastPartIndex = pathParts.length - 1;
  pathParts.forEach(function(pathPart, partIndex) {
    var children = root.children;
    var existingNode = children.find(function(child) {
      return child.label === pathPart;
    });
    var isNotLeaf = partIndex !== lastPartIndex;
    if (existingNode && isNotLeaf) {
      root = existingNode;
    } else {
      var node = new TreeNode(pathPart, root);
      node.number = children.length;
      children.push(node);
      if (isNotLeaf) {
        root = node;
      }
    }
  });
}
function moveSubtree(wm, wp, shift) {
  var subtrees = wp.number - wm.number;
  var ratio = shift / subtrees;
  wp.change -= ratio;
  wp.shift += shift;
  wm.change += ratio;
  wp.prelim += shift;
  wp.mod += shift;
}
function ancestor(vim, v, defaultAncestor) {
  return v.getSiblings().indexOf(vim.ancestor) >= 0 ? vim.ancestor : defaultAncestor;
}
function executeShifts(v) {
  var children = v.children;
  if (children) {
    var shift = 0;
    var change = 0;
    for (var i = children.length - 1; i >= 0; i--) {
      var w = children[i];
      w.prelim += shift;
      w.mod += shift;
      change += w.change;
      shift += w.shift + change;
    }
  }
}
function apportion(v, defaultAncestor, distance) {
  var w = v.getLeftSibling();
  if (w) {
    var vop = v;
    var vip = v;
    var vim = w;
    var vom = vip.getLeftmostSibling();
    var sip = vip.mod;
    var sop = vop.mod;
    var sim = vim.mod;
    var som = vom.mod;
    while (vim.nextRight() && vip.nextLeft()) {
      vim = vim.nextRight();
      vip = vip.nextLeft();
      vom = vom.nextLeft();
      vop = vop.nextRight();
      vop.ancestor = v;
      var shift = vim.prelim + sim - (vip.prelim + sip) + distance;
      if (shift > 0) {
        moveSubtree(ancestor(vim, v, defaultAncestor), v, shift);
        sip += shift;
        sop += shift;
      }
      sim += vim.mod;
      sip += vip.mod;
      som += vom.mod;
      sop += vop.mod;
    }
    if (vim.nextRight() && !vop.nextRight()) {
      vop.thread = vim.nextRight();
      vop.mod += sim - sop;
    } else {
      if (vip.nextLeft() && !vom.nextLeft()) {
        vom.thread = vip.nextLeft();
        vom.mod += sip - som;
      }
      defaultAncestor = v;
    }
  }
  return defaultAncestor;
}
function firstWalk(node, distance) {
  var children = node.children;
  if (children.length) {
    var defaultAncestor_1 = children[0];
    children.forEach(function(child) {
      firstWalk(child, distance);
      defaultAncestor_1 = apportion(child, defaultAncestor_1, distance);
    });
    executeShifts(node);
    var midpoint = (children[0].prelim + children[children.length - 1].prelim) / 2;
    var leftSibling = node.getLeftSibling();
    if (leftSibling) {
      node.prelim = leftSibling.prelim + distance;
      node.mod = node.prelim - midpoint;
    } else {
      node.prelim = midpoint;
    }
  } else {
    var leftSibling = node.getLeftSibling();
    node.prelim = leftSibling ? leftSibling.prelim + distance : 0;
  }
}
function secondWalk(v, m, layout) {
  v.x = v.prelim + m;
  v.y = v.depth;
  layout.update(v);
  v.children.forEach(function(w) {
    return secondWalk(w, m + v.mod, layout);
  });
}
function thirdWalk(v) {
  var children = v.children;
  var leafCount = 0;
  children.forEach(function(w) {
    thirdWalk(w);
    if (w.children.length) {
      leafCount += w.leafCount;
    } else {
      leafCount++;
    }
  });
  v.leafCount = leafCount;
  if (children.length) {
    v.subtreeLeft = children[0].subtreeLeft;
    v.subtreeRight = children[v.children.length - 1].subtreeRight;
    v.x = (v.subtreeLeft + v.subtreeRight) / 2;
  } else {
    v.subtreeLeft = v.x;
    v.subtreeRight = v.x;
  }
}
function treeLayout(root) {
  var layout = new TreeLayout();
  firstWalk(root, 1);
  secondWalk(root, -root.prelim, layout);
  thirdWalk(root);
  return layout;
}
var TreeNode, Dimensions, TreeLayout;
var init_tree = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/layout/tree.js"() {
    TreeNode = /** @class */
    function() {
      function TreeNode2(label, parent, number) {
        if (label === void 0) {
          label = "";
        }
        if (number === void 0) {
          number = 0;
        }
        this.x = 0;
        this.y = 0;
        this.subtreeLeft = NaN;
        this.subtreeRight = NaN;
        this.screenX = 0;
        this.screenY = 0;
        this.children = [];
        this.leafCount = 0;
        this.prelim = 0;
        this.mod = 0;
        this.ancestor = this;
        this.change = 0;
        this.shift = 0;
        this.label = label;
        this.parent = parent;
        this.depth = parent ? parent.depth + 1 : 0;
        this.number = number;
      }
      TreeNode2.prototype.getLeftSibling = function() {
        return this.number > 0 && this.parent ? this.parent.children[this.number - 1] : void 0;
      };
      TreeNode2.prototype.getLeftmostSibling = function() {
        return this.number > 0 && this.parent ? this.parent.children[0] : void 0;
      };
      TreeNode2.prototype.nextLeft = function() {
        return this.children ? this.children[0] : this.thread;
      };
      TreeNode2.prototype.nextRight = function() {
        return this.children ? this.children[this.children.length - 1] : this.thread;
      };
      TreeNode2.prototype.getSiblings = function() {
        var _this = this;
        return this.parent ? this.parent.children.filter(function(_, i) {
          return i !== _this.number;
        }) : [];
      };
      return TreeNode2;
    }();
    Dimensions = /** @class */
    function() {
      function Dimensions2() {
        this.top = Infinity;
        this.right = -Infinity;
        this.bottom = -Infinity;
        this.left = Infinity;
      }
      Dimensions2.prototype.update = function(node, xy) {
        var _a5 = xy(node), x = _a5.x, y = _a5.y;
        if (x > this.right) {
          this.right = x;
        }
        if (x < this.left) {
          this.left = x;
        }
        if (y > this.bottom) {
          this.bottom = y;
        }
        if (y < this.top) {
          this.top = y;
        }
      };
      return Dimensions2;
    }();
    TreeLayout = /** @class */
    function() {
      function TreeLayout2() {
        this.dimensions = new Dimensions();
        this.leafCount = 0;
        this.nodes = [];
        this.leafNodes = [];
        this.nonLeafNodes = [];
        this.depth = 0;
      }
      TreeLayout2.prototype.update = function(node) {
        this.dimensions.update(node, function(node2) {
          return { x: node2.x, y: node2.y };
        });
        if (!node.children.length) {
          this.leafCount++;
          this.leafNodes.push(node);
        } else {
          this.nonLeafNodes.push(node);
        }
        if (node.depth > this.depth) {
          this.depth = node.depth;
        }
        this.nodes.push(node);
      };
      TreeLayout2.prototype.resize = function(width, height, shiftX, shiftY, flipX) {
        if (shiftX === void 0) {
          shiftX = 0;
        }
        if (shiftY === void 0) {
          shiftY = 0;
        }
        if (flipX === void 0) {
          flipX = false;
        }
        var xSteps = this.leafCount - 1;
        var ySteps = this.depth;
        var dimensions = this.dimensions;
        var scalingX = 1;
        var scalingY = 1;
        if (width > 0 && xSteps) {
          var existingSpacingX = (dimensions.right - dimensions.left) / xSteps;
          var desiredSpacingX = width / xSteps;
          scalingX = desiredSpacingX / existingSpacingX;
          if (flipX) {
            scalingX = -scalingX;
          }
        }
        if (height > 0 && ySteps) {
          var existingSpacingY = (dimensions.bottom - dimensions.top) / ySteps;
          var desiredSpacingY = height / ySteps;
          scalingY = desiredSpacingY / existingSpacingY;
        }
        var screenDimensions = new Dimensions();
        this.nodes.forEach(function(node) {
          node.screenX = node.x * scalingX;
          node.screenY = node.y * scalingY;
          screenDimensions.update(node, function(node2) {
            return { x: node2.screenX, y: node2.screenY };
          });
        });
        var offsetX = -screenDimensions.left;
        var offsetY = -screenDimensions.top;
        this.nodes.forEach(function(node) {
          node.screenX += offsetX + shiftX;
          node.screenY += offsetY + shiftY;
        });
      };
      return TreeLayout2;
    }();
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/axis/groupedCategoryAxis.js
var __extends32, __decorate26, __read27, __spread17, GroupedCategoryAxisLabel, GroupedCategoryAxis;
var init_groupedCategoryAxis = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/axis/groupedCategoryAxis.js"() {
    init_selection();
    init_line();
    init_angle();
    init_text();
    init_bandScale();
    init_tree();
    init_axis();
    init_chartAxis();
    init_chartAxisDirection();
    init_array();
    init_validation();
    init_label();
    __extends32 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate26 = function(decorators, target2, key2, desc) {
      var c = arguments.length, r = c < 3 ? target2 : desc === null ? desc = Object.getOwnPropertyDescriptor(target2, key2) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target2, key2, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target2, key2, r) : d(target2, key2)) || r;
      return c > 3 && r && Object.defineProperty(target2, key2, r), r;
    };
    __read27 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread17 = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read27(arguments[i]));
      return ar;
    };
    GroupedCategoryAxisLabel = /** @class */
    function(_super) {
      __extends32(GroupedCategoryAxisLabel2, _super);
      function GroupedCategoryAxisLabel2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.grid = false;
        return _this;
      }
      __decorate26([
        Validate(BOOLEAN)
      ], GroupedCategoryAxisLabel2.prototype, "grid", void 0);
      return GroupedCategoryAxisLabel2;
    }(AxisLabel);
    GroupedCategoryAxis = /** @class */
    function(_super) {
      __extends32(GroupedCategoryAxis2, _super);
      function GroupedCategoryAxis2(moduleCtx) {
        var _this = _super.call(this, moduleCtx, new BandScale()) || this;
        _this.tickScale = new BandScale();
        _this.translation = {
          x: 0,
          y: 0
        };
        _this.line = new AxisLine();
        _this.label = new GroupedCategoryAxisLabel();
        _this.labelColor = "rgba(87, 87, 87, 1)";
        _this.includeInvisibleDomains = true;
        var _a5 = _this, tickLineGroup = _a5.tickLineGroup, tickLabelGroup = _a5.tickLabelGroup, gridLineGroup = _a5.gridLineGroup, tickScale = _a5.tickScale, scale = _a5.scale;
        scale.paddingOuter = 0.1;
        scale.paddingInner = scale.paddingOuter * 2;
        _this.requestedRange = scale.range.slice();
        _this.refreshScale();
        tickScale.paddingInner = 1;
        tickScale.paddingOuter = 0;
        _this.gridLineSelection = Selection.select(gridLineGroup, Line);
        _this.axisLineSelection = Selection.select(tickLineGroup, Line);
        _this.separatorSelection = Selection.select(tickLineGroup, Line);
        _this.labelSelection = Selection.select(tickLabelGroup, Text);
        return _this;
      }
      Object.defineProperty(GroupedCategoryAxis2.prototype, "range", {
        get: function() {
          return this.requestedRange.slice();
        },
        set: function(value) {
          this.requestedRange = value.slice();
          this.updateRange();
        },
        enumerable: false,
        configurable: true
      });
      GroupedCategoryAxis2.prototype.updateRange = function() {
        var _a5 = this, rr = _a5.requestedRange, vr = _a5.visibleRange, scale = _a5.scale;
        var span = (rr[1] - rr[0]) / (vr[1] - vr[0]);
        var shift = span * vr[0];
        var start = rr[0] - shift;
        this.tickScale.range = scale.range = [start, start + span];
        this.resizeTickTree();
      };
      GroupedCategoryAxis2.prototype.resizeTickTree = function() {
        var s = this.scale;
        var range2 = s.domain.length ? [s.convert(s.domain[0]), s.convert(s.domain[s.domain.length - 1])] : s.range;
        var layout = this.tickTreeLayout;
        var lineHeight = this.lineHeight;
        if (layout) {
          layout.resize(Math.abs(range2[1] - range2[0]), layout.depth * lineHeight, (Math.min(range2[0], range2[1]) || 0) + (s.bandwidth || 0) / 2, -layout.depth * lineHeight, range2[1] - range2[0] < 0);
        }
      };
      Object.defineProperty(GroupedCategoryAxis2.prototype, "lineHeight", {
        get: function() {
          return this.label.fontSize * 1.5;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(GroupedCategoryAxis2.prototype, "gridLength", {
        get: function() {
          return this._gridLength;
        },
        /**
         * The length of the grid. The grid is only visible in case of a non-zero value.
         */
        set: function(value) {
          if (this._gridLength && !value || !this._gridLength && value) {
            this.gridLineSelection.clear();
            this.labelSelection.clear();
          }
          this._gridLength = value;
        },
        enumerable: false,
        configurable: true
      });
      GroupedCategoryAxis2.prototype.calculateDomain = function() {
        var _a5;
        var _b2 = this, direction = _b2.direction, boundSeries = _b2.boundSeries;
        var domains = [];
        var isNumericX = void 0;
        boundSeries.filter(function(s) {
          return s.visible;
        }).forEach(function(series) {
          if (direction === ChartAxisDirection.X) {
            if (isNumericX === void 0) {
              var domain_1 = series.getDomain(direction);
              domains.push(domain_1);
              isNumericX = typeof domain_1[0] === "number";
            } else if (isNumericX) {
              domains.push(series.getDomain(direction));
            }
          } else {
            domains.push(series.getDomain(direction));
          }
        });
        var domain = (_a5 = new Array()).concat.apply(_a5, __spread17(domains));
        var values = extent(domain) || domain;
        this.dataDomain = this.normaliseDataDomain(values);
      };
      GroupedCategoryAxis2.prototype.normaliseDataDomain = function(d) {
        var values = d.filter(function(s, i, arr) {
          return arr.indexOf(s) === i;
        });
        var tickTree = ticksToTree(values);
        this.tickTreeLayout = treeLayout(tickTree);
        var tickScaleDomain = values.slice();
        tickScaleDomain.push("");
        this.tickScale.domain = tickScaleDomain;
        this.resizeTickTree();
        return values;
      };
      GroupedCategoryAxis2.prototype.update = function(primaryTickCount) {
        var _this = this;
        this.calculateDomain();
        var _a5 = this, scale = _a5.scale, label = _a5.label, parallel = _a5.label.parallel, tickScale = _a5.tickScale, requestedRange = _a5.requestedRange;
        scale.domain = this.dataDomain;
        var rangeStart = scale.range[0];
        var rangeEnd = scale.range[1];
        var rangeLength = Math.abs(rangeEnd - rangeStart);
        var bandwidth = rangeLength / scale.domain.length || 0;
        var rotation = toRadians(this.rotation);
        var isHorizontal = Math.abs(Math.cos(rotation)) < 1e-8;
        this.updatePosition();
        var title = this.title;
        if (title) {
          title.node.visible = false;
        }
        var lineHeight = this.lineHeight;
        var tickTreeLayout = this.tickTreeLayout;
        var labels = scale.ticks();
        var treeLabels = tickTreeLayout ? tickTreeLayout.nodes : [];
        var isLabelTree = tickTreeLayout ? tickTreeLayout.depth > 1 : false;
        var ticks = tickScale.ticks();
        var sideFlag = label.mirrored ? 1 : -1;
        var _b2 = calculateLabelRotation({
          rotation: label.rotation,
          parallel,
          regularFlipRotation: normalizeAngle360(rotation - Math.PI / 2),
          parallelFlipRotation: normalizeAngle360(rotation)
        }), autoRotation = _b2.autoRotation, labelRotation = _b2.labelRotation, parallelFlipFlag = _b2.parallelFlipFlag;
        var gridLineSelection = this.gridLineSelection.update(this.gridLength ? ticks : []);
        var labelSelection = this.labelSelection.update(treeLabels);
        var labelFormatter = label.formatter;
        var labelBBoxes = /* @__PURE__ */ new Map();
        var maxLeafLabelWidth = 0;
        labelSelection.each(function(node, datum, index) {
          node.fontStyle = label.fontStyle;
          node.fontWeight = label.fontWeight;
          node.fontSize = label.fontSize;
          node.fontFamily = label.fontFamily;
          node.fill = label.color;
          node.textBaseline = parallelFlipFlag === -1 ? "bottom" : "hanging";
          node.textAlign = "center";
          node.translationX = datum.screenY - label.fontSize * 0.25;
          node.translationY = datum.screenX;
          if (index === 0) {
            if (title && title.enabled && labels.length > 0) {
              node.visible = true;
              node.text = title.text;
              node.fontSize = title.fontSize;
              node.fontStyle = title.fontStyle;
              node.fontWeight = title.fontWeight;
              node.fontFamily = title.fontFamily;
              node.textBaseline = "hanging";
            } else {
              node.visible = false;
            }
          } else {
            node.text = labelFormatter ? labelFormatter({
              value: String(datum.label),
              index
            }) : String(datum.label);
            node.visible = datum.screenX >= requestedRange[0] && datum.screenX <= requestedRange[1];
          }
          var bbox = node.computeBBox();
          labelBBoxes.set(node.id, bbox);
          if (bbox.width > maxLeafLabelWidth) {
            maxLeafLabelWidth = bbox.width;
          }
        });
        var labelX = sideFlag * label.padding;
        var labelGrid = this.label.grid;
        var separatorData = [];
        labelSelection.each(function(label2, datum, index) {
          label2.x = labelX;
          label2.rotationCenterX = labelX;
          if (!datum.children.length) {
            label2.rotation = labelRotation;
            label2.textAlign = "end";
            label2.textBaseline = "middle";
            var bbox = labelBBoxes.get(label2.id);
            if (bbox && bbox.height > bandwidth) {
              label2.visible = false;
            }
          } else {
            label2.translationX -= maxLeafLabelWidth - lineHeight + _this.label.padding;
            var availableRange = datum.leafCount * bandwidth;
            var bbox = labelBBoxes.get(label2.id);
            if (bbox && bbox.width > availableRange) {
              label2.visible = false;
            } else if (isHorizontal) {
              label2.rotation = autoRotation;
            } else {
              label2.rotation = -Math.PI / 2;
            }
          }
          if (datum.parent && isLabelTree) {
            var y = !datum.children.length ? datum.screenX - bandwidth / 2 : datum.screenX - datum.leafCount * bandwidth / 2;
            if (!datum.children.length) {
              if (datum.number !== datum.children.length - 1 || labelGrid) {
                separatorData.push({
                  y,
                  x1: 0,
                  x2: -maxLeafLabelWidth - _this.label.padding * 2,
                  toString: function() {
                    return String(index);
                  }
                });
              }
            } else {
              var x = -maxLeafLabelWidth - _this.label.padding * 2 + datum.screenY;
              separatorData.push({
                y,
                x1: x + lineHeight,
                x2: x,
                toString: function() {
                  return String(index);
                }
              });
            }
          }
        });
        var minX = 0;
        separatorData.forEach(function(d) {
          return minX = Math.min(minX, d.x2);
        });
        separatorData.push({
          y: Math.max(rangeStart, rangeEnd),
          x1: 0,
          x2: minX,
          toString: function() {
            return String(separatorData.length);
          }
        });
        var separatorSelection = this.separatorSelection.update(separatorData);
        var epsilon = 1e-7;
        separatorSelection.each(function(line, datum) {
          line.x1 = datum.x1;
          line.x2 = datum.x2;
          line.y1 = datum.y;
          line.y2 = datum.y;
          line.visible = datum.y >= requestedRange[0] - epsilon && datum.y <= requestedRange[1] + epsilon;
          line.stroke = _this.tick.color;
          line.fill = void 0;
          line.strokeWidth = 1;
        });
        this.gridLineSelection = gridLineSelection;
        this.labelSelection = labelSelection;
        var lineCount = tickTreeLayout ? tickTreeLayout.depth + 1 : 1;
        var lines = [];
        for (var i = 0; i < lineCount; i++) {
          lines.push(i);
        }
        var axisLineSelection = this.axisLineSelection.update(lines);
        axisLineSelection.each(function(line, _, index) {
          var x = index > 0 ? -maxLeafLabelWidth - _this.label.padding * 2 - (index - 1) * lineHeight : 0;
          line.x1 = x;
          line.x2 = x;
          line.y1 = requestedRange[0];
          line.y2 = requestedRange[1];
          line.strokeWidth = _this.line.width;
          line.stroke = _this.line.color;
          line.visible = labels.length > 0 && (index === 0 || labelGrid && isLabelTree);
        });
        if (this.gridLength) {
          var styles_1 = this.gridStyle;
          var styleCount_1 = styles_1.length;
          gridLineSelection.each(function(line, datum, index) {
            var y = Math.round(tickScale.convert(datum));
            line.x1 = 0;
            line.x2 = -sideFlag * _this.gridLength;
            line.y1 = y;
            line.y2 = y;
            line.visible = y >= requestedRange[0] && y <= requestedRange[1];
            var style = styles_1[index % styleCount_1];
            line.stroke = style.stroke;
            line.strokeWidth = _this.tick.width;
            line.lineDash = style.lineDash;
            line.fill = void 0;
          });
        }
        return primaryTickCount;
      };
      GroupedCategoryAxis2.className = "GroupedCategoryAxis";
      GroupedCategoryAxis2.type = "groupedCategory";
      __decorate26([
        Validate(OPT_COLOR_STRING)
      ], GroupedCategoryAxis2.prototype, "labelColor", void 0);
      return GroupedCategoryAxis2;
    }(ChartAxis);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/cartesianChart.js
var __extends33, __assign11, __awaiter6, __generator6, __values22, __read28, directions, CartesianChart;
var init_cartesianChart = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/cartesianChart.js"() {
    init_chart();
    init_categoryAxis();
    init_groupedCategoryAxis();
    init_chartAxisDirection();
    init_logger();
    __extends33 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __assign11 = function() {
      __assign11 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign11.apply(this, arguments);
    };
    __awaiter6 = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __generator6 = function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    __values22 = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read28 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    directions = ["top", "right", "bottom", "left"];
    CartesianChart = /** @class */
    function(_super) {
      __extends33(CartesianChart2, _super);
      function CartesianChart2(document2, overrideDevicePixelRatio, resources) {
        if (document2 === void 0) {
          document2 = window.document;
        }
        var _this = _super.call(this, document2, overrideDevicePixelRatio, resources) || this;
        _this.paired = true;
        _this._lastAxisWidths = {
          top: 0,
          bottom: 0,
          left: 0,
          right: 0
        };
        _this._lastVisibility = {
          crossLines: true,
          series: true
        };
        var root = _this.scene.root;
        _this.legend.attachLegend(root);
        return _this;
      }
      CartesianChart2.prototype.performLayout = function() {
        return __awaiter6(this, void 0, void 0, function() {
          var shrinkRect, _a5, seriesRect, visibility, clipSeries, _b2, seriesRoot, seriesAreaPadding, seriesPaddedRect, hoverRectPadding, hoverRect;
          return __generator6(this, function(_c2) {
            switch (_c2.label) {
              case 0:
                return [4, _super.prototype.performLayout.call(this)];
              case 1:
                shrinkRect = _c2.sent();
                _a5 = this.updateAxes(shrinkRect), seriesRect = _a5.seriesRect, visibility = _a5.visibility, clipSeries = _a5.clipSeries;
                this.seriesRoot.visible = visibility.series;
                this.seriesRect = seriesRect;
                this.series.forEach(function(series) {
                  series.rootGroup.translationX = Math.floor(seriesRect.x);
                  series.rootGroup.translationY = Math.floor(seriesRect.y);
                });
                _b2 = this, seriesRoot = _b2.seriesRoot, seriesAreaPadding = _b2.seriesAreaPadding;
                seriesPaddedRect = seriesRect.clone().grow(seriesAreaPadding);
                hoverRectPadding = 20;
                hoverRect = seriesPaddedRect.clone().grow(hoverRectPadding);
                this.hoverRect = hoverRect;
                this.layoutService.dispatchLayoutComplete({
                  type: "layout-complete",
                  chart: { width: this.scene.width, height: this.scene.height },
                  series: { rect: seriesRect, paddedRect: seriesPaddedRect, hoverRect, visible: visibility.series },
                  axes: this.axes.map(function(axis) {
                    return __assign11({ id: axis.id }, axis.getLayoutState());
                  })
                });
                if (clipSeries) {
                  seriesRoot.setClipRectInGroupCoordinateSpace(seriesPaddedRect);
                } else {
                  seriesRoot.setClipRectInGroupCoordinateSpace();
                }
                return [2, shrinkRect];
            }
          });
        });
      };
      CartesianChart2.prototype.updateAxes = function(inputShrinkRect) {
        var e_1, _a5;
        var _b2;
        var axisWidths = __assign11({}, this._lastAxisWidths);
        var visibility = __assign11({}, this._lastVisibility);
        var liveAxisWidths = new Set(this._axes.map(function(a) {
          return a.position;
        }));
        try {
          for (var _c2 = __values22(Object.keys(axisWidths)), _d2 = _c2.next(); !_d2.done; _d2 = _c2.next()) {
            var position = _d2.value;
            if (!liveAxisWidths.has(position)) {
              delete axisWidths[position];
            }
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_d2 && !_d2.done && (_a5 = _c2.return))
              _a5.call(_c2);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        var stableOutputs = function(otherAxisWidths, otherVisibility) {
          if (Object.keys(otherAxisWidths).some(function(k) {
            return axisWidths[k] == null;
          })) {
            return false;
          }
          return visibility.crossLines === otherVisibility.crossLines && visibility.series === otherVisibility.series && // Check for existing axis positions and equality.
          Object.entries(axisWidths).every(function(_a6) {
            var _b3 = __read28(_a6, 2), p = _b3[0], w = _b3[1];
            var otherW = otherAxisWidths[p];
            if (w != null || otherW != null) {
              return w === otherW;
            }
            return true;
          });
        };
        var ceilValues = function(records) {
          return Object.entries(records).reduce(function(out, _a6) {
            var _b3 = __read28(_a6, 2), key2 = _b3[0], value = _b3[1];
            if (value && Math.abs(value) === Infinity) {
              value = 0;
            }
            out[key2] = value != null ? Math.ceil(value) : value;
            return out;
          }, {});
        };
        var lastPassAxisWidths = {};
        var lastPassVisibility = {};
        var clipSeries = false;
        var seriesRect = (_b2 = this.seriesRect) === null || _b2 === void 0 ? void 0 : _b2.clone();
        var count = 0;
        do {
          Object.assign(axisWidths, lastPassAxisWidths);
          Object.assign(visibility, lastPassVisibility);
          var result = this.updateAxesPass(axisWidths, inputShrinkRect.clone(), seriesRect);
          lastPassAxisWidths = ceilValues(result.axisWidths);
          lastPassVisibility = result.visibility;
          clipSeries = result.clipSeries;
          seriesRect = result.seriesRect;
          if (count++ > 10) {
            Logger.warn("unable to find stable axis layout.");
            break;
          }
        } while (!stableOutputs(lastPassAxisWidths, lastPassVisibility));
        var clipRectPadding = 5;
        this.axes.forEach(function(axis) {
          axis.setCrossLinesVisible(visibility.crossLines);
          if (!seriesRect) {
            return;
          }
          axis.clipGrid(seriesRect.x, seriesRect.y, seriesRect.width + clipRectPadding, seriesRect.height + clipRectPadding);
          switch (axis.position) {
            case "left":
            case "right":
              axis.clipTickLines(inputShrinkRect.x, seriesRect.y, inputShrinkRect.width + clipRectPadding, seriesRect.height + clipRectPadding);
              break;
            case "top":
            case "bottom":
              axis.clipTickLines(seriesRect.x, inputShrinkRect.y, seriesRect.width + clipRectPadding, inputShrinkRect.height + clipRectPadding);
              break;
          }
        });
        this._lastAxisWidths = axisWidths;
        this._lastVisibility = visibility;
        return { seriesRect, visibility, clipSeries };
      };
      CartesianChart2.prototype.updateAxesPass = function(axisWidths, bounds, lastPassSeriesRect) {
        var _this = this;
        var axes = this.axes;
        var visited = {};
        var newAxisWidths = {};
        var visibility = {
          series: true,
          crossLines: true
        };
        var clipSeries = false;
        var primaryTickCounts = {};
        var paddedBounds = this.applySeriesPadding(bounds);
        var crossLinePadding = lastPassSeriesRect ? this.buildCrossLinePadding(lastPassSeriesRect, axisWidths) : {};
        var axisBound = this.buildAxisBound(paddedBounds, axisWidths, crossLinePadding, visibility);
        var seriesRect = this.buildSeriesRect(axisBound, axisWidths);
        axes.forEach(function(axis) {
          var _a5, _b2;
          var position = axis.position;
          var _c2 = _this.calculateAxisDimensions({
            axis,
            seriesRect,
            axisWidths,
            newAxisWidths,
            primaryTickCounts,
            clipSeries,
            addInterAxisPadding: ((_a5 = visited[position]) !== null && _a5 !== void 0 ? _a5 : 0) > 0
          }), newClipSeries = _c2.clipSeries, axisThickness = _c2.axisThickness, axisOffset = _c2.axisOffset;
          visited[position] = ((_b2 = visited[position]) !== null && _b2 !== void 0 ? _b2 : 0) + 1;
          clipSeries = clipSeries || newClipSeries;
          _this.positionAxis({
            axis,
            axisBound,
            axisOffset,
            axisThickness,
            axisWidths,
            primaryTickCounts,
            seriesRect
          });
        });
        return { clipSeries, seriesRect, axisWidths: newAxisWidths, visibility };
      };
      CartesianChart2.prototype.buildCrossLinePadding = function(lastPassSeriesRect, axisWidths) {
        var e_2, _a5;
        var _b2;
        var crossLinePadding = {};
        this.axes.forEach(function(axis) {
          if (axis.crossLines) {
            axis.crossLines.forEach(function(crossLine) {
              crossLine.calculatePadding(crossLinePadding, lastPassSeriesRect);
            });
          }
        });
        try {
          for (var _c2 = __values22(Object.entries(crossLinePadding)), _d2 = _c2.next(); !_d2.done; _d2 = _c2.next()) {
            var _e = __read28(_d2.value, 2), side = _e[0], _f = _e[1], padding = _f === void 0 ? 0 : _f;
            crossLinePadding[side] = Math.max(padding - ((_b2 = axisWidths[side]) !== null && _b2 !== void 0 ? _b2 : 0), 0);
          }
        } catch (e_2_1) {
          e_2 = { error: e_2_1 };
        } finally {
          try {
            if (_d2 && !_d2.done && (_a5 = _c2.return))
              _a5.call(_c2);
          } finally {
            if (e_2)
              throw e_2.error;
          }
        }
        return crossLinePadding;
      };
      CartesianChart2.prototype.applySeriesPadding = function(bounds) {
        var _this = this;
        var paddedRect = bounds.clone();
        var reversedAxes = this.axes.slice().reverse();
        directions.forEach(function(dir) {
          var padding = _this.seriesAreaPadding[dir];
          var axis = reversedAxes.find(function(axis2) {
            return axis2.position === dir;
          });
          if (axis) {
            axis.seriesAreaPadding = padding;
          } else {
            paddedRect.shrink(padding, dir);
          }
        });
        return paddedRect;
      };
      CartesianChart2.prototype.buildAxisBound = function(bounds, axisWidths, crossLinePadding, visibility) {
        var _a5, _b2, _c2, _d2;
        var result = bounds.clone();
        var _e = crossLinePadding.top, top = _e === void 0 ? 0 : _e, _f = crossLinePadding.right, right = _f === void 0 ? 0 : _f, _g = crossLinePadding.bottom, bottom = _g === void 0 ? 0 : _g, _h = crossLinePadding.left, left = _h === void 0 ? 0 : _h;
        var horizontalPadding = left + right;
        var verticalPadding = top + bottom;
        var totalWidth = ((_a5 = axisWidths.left) !== null && _a5 !== void 0 ? _a5 : 0) + ((_b2 = axisWidths.right) !== null && _b2 !== void 0 ? _b2 : 0) + horizontalPadding;
        var totalHeight = ((_c2 = axisWidths.top) !== null && _c2 !== void 0 ? _c2 : 0) + ((_d2 = axisWidths.bottom) !== null && _d2 !== void 0 ? _d2 : 0) + verticalPadding;
        if (result.width <= totalWidth || result.height <= totalHeight) {
          visibility.crossLines = false;
          visibility.series = false;
          return result;
        }
        result.x += left;
        result.y += top;
        result.width -= horizontalPadding;
        result.height -= verticalPadding;
        return result;
      };
      CartesianChart2.prototype.buildSeriesRect = function(axisBound, axisWidths) {
        var result = axisBound.clone();
        var top = axisWidths.top, bottom = axisWidths.bottom, left = axisWidths.left, right = axisWidths.right;
        result.x += left !== null && left !== void 0 ? left : 0;
        result.y += top !== null && top !== void 0 ? top : 0;
        result.width -= (left !== null && left !== void 0 ? left : 0) + (right !== null && right !== void 0 ? right : 0);
        result.height -= (top !== null && top !== void 0 ? top : 0) + (bottom !== null && bottom !== void 0 ? bottom : 0);
        result.width = Math.max(0, result.width);
        result.height = Math.max(0, result.height);
        return result;
      };
      CartesianChart2.prototype.clampToOutsideSeriesRect = function(seriesRect, value, dimension, direction) {
        var x = seriesRect.x, y = seriesRect.y, width = seriesRect.width, height = seriesRect.height;
        var clampBounds = [x, y, x + width, y + height];
        var fn = direction === 1 ? Math.min : Math.max;
        var compareTo = clampBounds[(dimension === "x" ? 0 : 1) + (direction === 1 ? 0 : 2)];
        return fn(value, compareTo);
      };
      CartesianChart2.prototype.calculateAxisDimensions = function(opts2) {
        var _a5, _b2, _c2, _d2, _e, _f;
        var axis = opts2.axis, seriesRect = opts2.seriesRect, axisWidths = opts2.axisWidths, newAxisWidths = opts2.newAxisWidths, primaryTickCounts = opts2.primaryTickCounts, addInterAxisPadding = opts2.addInterAxisPadding;
        var clipSeries = opts2.clipSeries;
        var position = axis.position, direction = axis.direction;
        var axisLeftRightRange = function(axis2) {
          if (axis2 instanceof CategoryAxis || axis2 instanceof GroupedCategoryAxis) {
            return [0, seriesRect.height];
          }
          return [seriesRect.height, 0];
        };
        axis.label.mirrored = ["top", "right"].includes(position);
        var axisOffset = (_a5 = newAxisWidths[position]) !== null && _a5 !== void 0 ? _a5 : 0;
        switch (position) {
          case "top":
          case "bottom":
            axis.range = [0, seriesRect.width];
            axis.gridLength = seriesRect.height;
            break;
          case "right":
          case "left":
            axis.range = axisLeftRightRange(axis);
            axis.gridLength = seriesRect.width;
            break;
        }
        var zoom = (_b2 = this.zoomManager.getZoom()) === null || _b2 === void 0 ? void 0 : _b2[axis.direction];
        var _g = zoom !== null && zoom !== void 0 ? zoom : {}, _h = _g.min, min = _h === void 0 ? 0 : _h, _j = _g.max, max = _j === void 0 ? 1 : _j;
        axis.visibleRange = [min, max];
        if (!clipSeries && (axis.visibleRange[0] > 0 || axis.visibleRange[1] < 1)) {
          clipSeries = true;
        }
        var primaryTickCount = axis.nice ? primaryTickCounts[direction] : void 0;
        primaryTickCount = axis.update(primaryTickCount);
        primaryTickCounts[direction] = (_c2 = primaryTickCounts[direction]) !== null && _c2 !== void 0 ? _c2 : primaryTickCount;
        var axisThickness = 0;
        if (axis.thickness) {
          axisThickness = axis.thickness;
        } else {
          var bbox = axis.computeBBox();
          axisThickness = direction === ChartAxisDirection.X ? bbox.height : bbox.width;
        }
        var axisPadding = 15;
        if (addInterAxisPadding) {
          axisThickness += axisPadding;
        }
        axisThickness = Math.ceil(axisThickness);
        newAxisWidths[position] = ((_d2 = newAxisWidths[position]) !== null && _d2 !== void 0 ? _d2 : 0) + axisThickness;
        axis.gridPadding = ((_e = axisWidths[position]) !== null && _e !== void 0 ? _e : 0) - ((_f = newAxisWidths[position]) !== null && _f !== void 0 ? _f : 0);
        return { clipSeries, axisThickness, axisOffset };
      };
      CartesianChart2.prototype.positionAxis = function(opts2) {
        var _a5, _b2, _c2, _d2;
        var axis = opts2.axis, axisBound = opts2.axisBound, axisWidths = opts2.axisWidths, seriesRect = opts2.seriesRect, axisOffset = opts2.axisOffset, axisThickness = opts2.axisThickness;
        var position = axis.position;
        switch (position) {
          case "top":
            axis.translation.x = axisBound.x + ((_a5 = axisWidths.left) !== null && _a5 !== void 0 ? _a5 : 0);
            axis.translation.y = this.clampToOutsideSeriesRect(seriesRect, axisBound.y + 1 + axisOffset + axisThickness, "y", 1);
            break;
          case "bottom":
            axis.translation.x = axisBound.x + ((_b2 = axisWidths.left) !== null && _b2 !== void 0 ? _b2 : 0);
            axis.translation.y = this.clampToOutsideSeriesRect(seriesRect, axisBound.y + axisBound.height + 1 - axisThickness - axisOffset, "y", -1);
            break;
          case "left":
            axis.translation.y = axisBound.y + ((_c2 = axisWidths.top) !== null && _c2 !== void 0 ? _c2 : 0);
            axis.translation.x = this.clampToOutsideSeriesRect(seriesRect, axisBound.x + axisOffset + axisThickness, "x", 1);
            break;
          case "right":
            axis.translation.y = axisBound.y + ((_d2 = axisWidths.top) !== null && _d2 !== void 0 ? _d2 : 0);
            axis.translation.x = this.clampToOutsideSeriesRect(seriesRect, axisBound.x + axisBound.width - axisThickness - axisOffset, "x", -1);
            break;
        }
        axis.updatePosition();
      };
      CartesianChart2.className = "CartesianChart";
      CartesianChart2.type = "cartesian";
      return CartesianChart2;
    }(Chart);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/series/polar/polarSeries.js
var __extends34, PolarSeries;
var init_polarSeries = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/series/polar/polarSeries.js"() {
    init_series();
    init_chartAxisDirection();
    __extends34 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    PolarSeries = /** @class */
    function(_super) {
      __extends34(PolarSeries2, _super);
      function PolarSeries2(_a5) {
        var _b2;
        var _c2 = _a5.useLabelLayer, useLabelLayer = _c2 === void 0 ? false : _c2;
        var _this = _super.call(this, {
          useLabelLayer,
          pickModes: [SeriesNodePickMode.EXACT_SHAPE_MATCH],
          directionKeys: (_b2 = {}, _b2[ChartAxisDirection.X] = ["angleKey"], _b2[ChartAxisDirection.Y] = ["radiusKey"], _b2)
        }) || this;
        _this.centerX = 0;
        _this.centerY = 0;
        _this.radius = 0;
        return _this;
      }
      PolarSeries2.prototype.getLabelData = function() {
        return [];
      };
      PolarSeries2.prototype.computeLabelsBBox = function(_options) {
        return null;
      };
      return PolarSeries2;
    }(Series);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/polarChart.js
var __extends35, __awaiter7, __generator7, PolarChart;
var init_polarChart = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/polarChart.js"() {
    init_chart();
    init_polarSeries();
    init_padding();
    init_bbox();
    __extends35 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __awaiter7 = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __generator7 = function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    PolarChart = /** @class */
    function(_super) {
      __extends35(PolarChart2, _super);
      function PolarChart2(document2, overrideDevicePixelRatio, resources) {
        if (document2 === void 0) {
          document2 = window.document;
        }
        var _this = _super.call(this, document2, overrideDevicePixelRatio, resources) || this;
        _this.padding = new Padding(40);
        var root = _this.scene.root;
        _this.legend.attachLegend(root);
        return _this;
      }
      PolarChart2.prototype.performLayout = function() {
        return __awaiter7(this, void 0, void 0, function() {
          var shrinkRect, fullSeriesRect, hoverRectPadding, hoverRect;
          return __generator7(this, function(_a5) {
            switch (_a5.label) {
              case 0:
                return [4, _super.prototype.performLayout.call(this)];
              case 1:
                shrinkRect = _a5.sent();
                fullSeriesRect = shrinkRect.clone();
                this.computeSeriesRect(shrinkRect);
                this.computeCircle();
                hoverRectPadding = 20;
                hoverRect = shrinkRect.clone().grow(hoverRectPadding);
                this.hoverRect = hoverRect;
                this.layoutService.dispatchLayoutComplete({
                  type: "layout-complete",
                  chart: { width: this.scene.width, height: this.scene.height },
                  series: { rect: fullSeriesRect, paddedRect: shrinkRect, hoverRect, visible: true },
                  axes: []
                });
                return [2, shrinkRect];
            }
          });
        });
      };
      PolarChart2.prototype.computeSeriesRect = function(shrinkRect) {
        var seriesAreaPadding = this.seriesAreaPadding;
        shrinkRect.shrink(seriesAreaPadding.left, "left");
        shrinkRect.shrink(seriesAreaPadding.top, "top");
        shrinkRect.shrink(seriesAreaPadding.right, "right");
        shrinkRect.shrink(seriesAreaPadding.bottom, "bottom");
        this.seriesRect = shrinkRect;
      };
      PolarChart2.prototype.computeCircle = function() {
        var _this = this;
        var seriesBox = this.seriesRect;
        var polarSeries = this.series.filter(function(series) {
          return series instanceof PolarSeries;
        });
        var setSeriesCircle = function(cx, cy, r) {
          polarSeries.forEach(function(series) {
            series.centerX = cx;
            series.centerY = cy;
            series.radius = r;
          });
        };
        var centerX = seriesBox.x + seriesBox.width / 2;
        var centerY = seriesBox.y + seriesBox.height / 2;
        var initialRadius = Math.max(0, Math.min(seriesBox.width, seriesBox.height) / 2);
        var radius = initialRadius;
        setSeriesCircle(centerX, centerY, radius);
        var shake = function(_a5) {
          var _b2 = (_a5 === void 0 ? {} : _a5).hideWhenNecessary, hideWhenNecessary = _b2 === void 0 ? false : _b2;
          var labelBoxes = polarSeries.map(function(series) {
            return series.computeLabelsBBox({ hideWhenNecessary });
          }).filter(function(box) {
            return box != null;
          });
          if (labelBoxes.length === 0) {
            setSeriesCircle(centerX, centerY, initialRadius);
            return;
          }
          var labelBox = BBox.merge(labelBoxes);
          var refined = _this.refineCircle(labelBox, radius);
          setSeriesCircle(refined.centerX, refined.centerY, refined.radius);
          if (refined.radius === radius) {
            return;
          }
          radius = refined.radius;
        };
        shake();
        shake();
        shake();
        shake({ hideWhenNecessary: true });
        shake({ hideWhenNecessary: true });
      };
      PolarChart2.prototype.refineCircle = function(labelsBox, radius) {
        var minCircleRatio = 0.5;
        var seriesBox = this.seriesRect;
        var circleLeft = -radius;
        var circleTop = -radius;
        var circleRight = radius;
        var circleBottom = radius;
        var padLeft = Math.max(0, circleLeft - labelsBox.x);
        var padTop = Math.max(0, circleTop - labelsBox.y);
        var padRight = Math.max(0, labelsBox.x + labelsBox.width - circleRight);
        var padBottom = Math.max(0, labelsBox.y + labelsBox.height - circleBottom);
        var availCircleWidth = seriesBox.width - padLeft - padRight;
        var availCircleHeight = seriesBox.height - padTop - padBottom;
        var newRadius = Math.min(availCircleWidth, availCircleHeight) / 2;
        var minHorizontalRadius = minCircleRatio * seriesBox.width / 2;
        var minVerticalRadius = minCircleRatio * seriesBox.height / 2;
        var minRadius = Math.min(minHorizontalRadius, minVerticalRadius);
        if (newRadius < minRadius) {
          newRadius = minRadius;
          var horizontalPadding = padLeft + padRight;
          var verticalPadding = padTop + padBottom;
          if (2 * newRadius + verticalPadding > seriesBox.height) {
            var padHeight = seriesBox.height - 2 * newRadius;
            if (Math.min(padTop, padBottom) * 2 > padHeight) {
              padTop = padHeight / 2;
              padBottom = padHeight / 2;
            } else if (padTop > padBottom) {
              padTop = padHeight - padBottom;
            } else {
              padBottom = padHeight - padTop;
            }
          }
          if (2 * newRadius + horizontalPadding > seriesBox.width) {
            var padWidth = seriesBox.width - 2 * newRadius;
            if (Math.min(padLeft, padRight) * 2 > padWidth) {
              padLeft = padWidth / 2;
              padRight = padWidth / 2;
            } else if (padLeft > padRight) {
              padLeft = padWidth - padRight;
            } else {
              padRight = padWidth - padLeft;
            }
          }
        }
        var newWidth = padLeft + 2 * newRadius + padRight;
        var newHeight = padTop + 2 * newRadius + padBottom;
        return {
          centerX: seriesBox.x + (seriesBox.width - newWidth) / 2 + padLeft + newRadius,
          centerY: seriesBox.y + (seriesBox.height - newHeight) / 2 + padTop + newRadius,
          radius: newRadius
        };
      };
      PolarChart2.className = "PolarChart";
      PolarChart2.type = "polar";
      return PolarChart2;
    }(Chart);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/hierarchyChart.js
var __extends36, __awaiter8, __generator8, HierarchyChart;
var init_hierarchyChart = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/hierarchyChart.js"() {
    init_bbox();
    init_chart();
    __extends36 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __awaiter8 = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __generator8 = function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    HierarchyChart = /** @class */
    function(_super) {
      __extends36(HierarchyChart2, _super);
      function HierarchyChart2(document2, overrideDevicePixelRatio, resources) {
        if (document2 === void 0) {
          document2 = window.document;
        }
        var _this = _super.call(this, document2, overrideDevicePixelRatio, resources) || this;
        _this._data = {};
        var root = _this.scene.root;
        _this.legend.attachLegend(root);
        return _this;
      }
      HierarchyChart2.prototype.performLayout = function() {
        return __awaiter8(this, void 0, void 0, function() {
          var shrinkRect, seriesAreaPadding, fullSeriesRect, hoverRectPadding, hoverRect, seriesRoot;
          return __generator8(this, function(_a5) {
            switch (_a5.label) {
              case 0:
                return [4, _super.prototype.performLayout.call(this)];
              case 1:
                shrinkRect = _a5.sent();
                seriesAreaPadding = this.seriesAreaPadding;
                fullSeriesRect = shrinkRect.clone();
                shrinkRect.shrink(seriesAreaPadding.left, "left");
                shrinkRect.shrink(seriesAreaPadding.top, "top");
                shrinkRect.shrink(seriesAreaPadding.right, "right");
                shrinkRect.shrink(seriesAreaPadding.bottom, "bottom");
                this.seriesRect = shrinkRect;
                hoverRectPadding = 20;
                hoverRect = shrinkRect.clone().grow(hoverRectPadding);
                this.hoverRect = hoverRect;
                this.series.forEach(function(series) {
                  series.rootGroup.translationX = Math.floor(shrinkRect.x);
                  series.rootGroup.translationY = Math.floor(shrinkRect.y);
                  series.update({ seriesRect: shrinkRect });
                });
                seriesRoot = this.seriesRoot;
                seriesRoot.setClipRectInGroupCoordinateSpace(new BBox(shrinkRect.x, shrinkRect.y, shrinkRect.width, shrinkRect.height));
                this.layoutService.dispatchLayoutComplete({
                  type: "layout-complete",
                  chart: { width: this.scene.width, height: this.scene.height },
                  series: { rect: fullSeriesRect, paddedRect: shrinkRect, hoverRect, visible: true },
                  axes: []
                });
                return [2, shrinkRect];
            }
          });
        });
      };
      HierarchyChart2.className = "HierarchyChart";
      HierarchyChart2.type = "hierarchy";
      return HierarchyChart2;
    }(Chart);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/util/string.js
function interpolate(input, values, formats) {
  return input.replace(interpolatePattern, function() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var name = args[2];
    var _a5 = __read29(name.split(":"), 2), valueName = _a5[0], formatName = _a5[1];
    var value = values[valueName];
    if (typeof value === "number") {
      var format2 = formatName && formats && formats[formatName];
      if (format2) {
        var _b2 = format2, locales = _b2.locales, options = _b2.options;
        return value.toLocaleString(locales, options);
      }
      return String(value);
    }
    if (value instanceof Date) {
      var format2 = formatName && formats && formats[formatName];
      if (typeof format2 === "string") {
        var formatter = buildFormatter(format2);
        return formatter(value);
      }
      return value.toDateString();
    }
    if (typeof value === "string" || value && value.toString) {
      return String(value);
    }
    return "";
  });
}
var __read29, interpolatePattern;
var init_string = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/util/string.js"() {
    init_timeFormat();
    __read29 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    interpolatePattern = /(#\{(.*?)\})/g;
  }
});

// node_modules/ag-charts-community/dist/esm/es5/util/sanitize.js
function sanitizeHtml(text) {
  element = element || document.createElement("div");
  if (!text) {
    return "";
  }
  element.textContent = text;
  return element.innerHTML;
}
var element;
var init_sanitize = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/util/sanitize.js"() {
    element = null;
  }
});

// node_modules/ag-charts-community/dist/esm/es5/util/secondaryAxisTicks.js
function calculateNiceSecondaryAxis(domain, primaryTickCount) {
  var start = Math.floor(domain[0]);
  var stop = domain[1];
  start = calculateNiceStart(start, stop, primaryTickCount);
  var step = getTickStep(start, stop, primaryTickCount);
  var segments = primaryTickCount - 1;
  stop = start + segments * step;
  var d = [start, stop];
  var ticks = getTicks(start, step, primaryTickCount);
  return [d, ticks];
}
function calculateNiceStart(a, b, count) {
  var rawStep = Math.abs(b - a) / (count - 1);
  var order = Math.floor(Math.log10(rawStep));
  var magnitude = Math.pow(10, order);
  return Math.floor(a / magnitude) * magnitude;
}
function getTicks(start, step, count) {
  var stepPower = Math.floor(Math.log10(step));
  var fractionDigits = step > 0 && step < 1 ? Math.abs(stepPower) : 0;
  var f = Math.pow(10, fractionDigits);
  var ticks = new NumericTicks(fractionDigits);
  for (var i = 0; i < count; i++) {
    var tick = start + step * i;
    ticks[i] = Math.round(tick * f) / f;
  }
  return ticks;
}
function getTickStep(start, stop, count) {
  var segments = count - 1;
  var rawStep = (stop - start) / segments;
  return calculateNextNiceStep(rawStep);
}
function calculateNextNiceStep(rawStep) {
  var order = Math.floor(Math.log10(rawStep));
  var magnitude = Math.pow(10, order);
  var step = rawStep / magnitude * 10;
  if (step > 0 && step <= 1) {
    return magnitude / 10;
  }
  if (step > 1 && step <= 2) {
    return 2 * magnitude / 10;
  }
  if (step > 1 && step <= 5) {
    return 5 * magnitude / 10;
  }
  if (step > 5 && step <= 10) {
    return 10 * magnitude / 10;
  }
  if (step > 10 && step <= 20) {
    return 20 * magnitude / 10;
  }
  if (step > 20 && step <= 40) {
    return 40 * magnitude / 10;
  }
  if (step > 40 && step <= 50) {
    return 50 * magnitude / 10;
  }
  if (step > 50 && step <= 100) {
    return 100 * magnitude / 10;
  }
  return step;
}
var init_secondaryAxisTicks = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/util/secondaryAxisTicks.js"() {
    init_ticks();
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/axis/numberAxis.js
var __extends37, __decorate27, __read30, NumberAxis;
var init_numberAxis = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/axis/numberAxis.js"() {
    init_linearScale();
    init_array();
    init_chartAxis();
    init_validation();
    init_default();
    init_secondaryAxisTicks();
    init_logger();
    __extends37 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate27 = function(decorators, target2, key2, desc) {
      var c = arguments.length, r = c < 3 ? target2 : desc === null ? desc = Object.getOwnPropertyDescriptor(target2, key2) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target2, key2, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target2, key2, r) : d(target2, key2)) || r;
      return c > 3 && r && Object.defineProperty(target2, key2, r), r;
    };
    __read30 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    NumberAxis = /** @class */
    function(_super) {
      __extends37(NumberAxis2, _super);
      function NumberAxis2(moduleCtx, scale) {
        if (scale === void 0) {
          scale = new LinearScale();
        }
        var _this = _super.call(this, moduleCtx, scale) || this;
        _this.min = NaN;
        _this.max = NaN;
        scale.strictClampByDefault = true;
        return _this;
      }
      NumberAxis2.prototype.normaliseDataDomain = function(d) {
        var _a5 = this, min = _a5.min, max = _a5.max;
        if (d.length > 2) {
          d = extent(d) || [NaN, NaN];
        }
        if (!isNaN(min)) {
          d = [min, d[1]];
        }
        if (!isNaN(max)) {
          d = [d[0], max];
        }
        if (d[0] > d[1]) {
          d = [];
        }
        return d;
      };
      NumberAxis2.prototype.formatDatum = function(datum) {
        if (typeof datum === "number") {
          return datum.toFixed(2);
        } else {
          Logger.warnOnce("data contains Date objects which are being plotted against a number axis, please only use a number axis for numbers.");
          return String(datum);
        }
      };
      NumberAxis2.prototype.updateSecondaryAxisTicks = function(primaryTickCount) {
        if (this.dataDomain == null) {
          throw new Error("AG Charts - dataDomain not calculated, cannot perform tick calculation.");
        }
        var _a5 = __read30(calculateNiceSecondaryAxis(this.dataDomain, primaryTickCount !== null && primaryTickCount !== void 0 ? primaryTickCount : 0), 2), d = _a5[0], ticks = _a5[1];
        this.scale.nice = false;
        this.scale.domain = d;
        this.scale.update();
        return ticks;
      };
      NumberAxis2.className = "NumberAxis";
      NumberAxis2.type = "number";
      __decorate27([
        Validate(AND(NUMBER_OR_NAN(), LESS_THAN("max"))),
        Default(NaN)
      ], NumberAxis2.prototype, "min", void 0);
      __decorate27([
        Validate(AND(NUMBER_OR_NAN(), GREATER_THAN("min"))),
        Default(NaN)
      ], NumberAxis2.prototype, "max", void 0);
      return NumberAxis2;
    }(ChartAxis);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/axis/logAxis.js
function NON_ZERO_NUMBER() {
  var message = "expecting a non-zero Number";
  return predicateWithMessage(function(v) {
    return typeof v === "number" && v !== 0;
  }, message);
}
var __extends38, __decorate28, LogAxis;
var init_logAxis = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/axis/logAxis.js"() {
    init_validation();
    init_default();
    init_logScale();
    init_numberAxis();
    init_array();
    init_logger();
    __extends38 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate28 = function(decorators, target2, key2, desc) {
      var c = arguments.length, r = c < 3 ? target2 : desc === null ? desc = Object.getOwnPropertyDescriptor(target2, key2) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target2, key2, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target2, key2, r) : d(target2, key2)) || r;
      return c > 3 && r && Object.defineProperty(target2, key2, r), r;
    };
    LogAxis = /** @class */
    function(_super) {
      __extends38(LogAxis2, _super);
      function LogAxis2(moduleCtx) {
        var _this = _super.call(this, moduleCtx, new LogScale()) || this;
        _this.min = NaN;
        _this.max = NaN;
        _this.scale.strictClampByDefault = true;
        return _this;
      }
      LogAxis2.prototype.normaliseDataDomain = function(d) {
        var _a5 = this, min = _a5.min, max = _a5.max;
        if (d.length > 2) {
          d = extent(d) || [NaN, NaN];
        }
        if (!isNaN(min)) {
          d = [min, d[1]];
        }
        if (!isNaN(max)) {
          d = [d[0], max];
        }
        var isInverted = d[0] > d[1];
        var crossesZero = d[0] < 0 && d[1] > 0;
        var hasZeroExtent = d[0] === 0 && d[1] === 0;
        var invalidDomain = isInverted || crossesZero || hasZeroExtent;
        if (invalidDomain) {
          d = [];
          if (crossesZero) {
            Logger.warn("the data domain crosses zero, the chart data cannot be rendered. See log axis documentation for more information.");
          } else if (hasZeroExtent) {
            Logger.warn("the data domain has 0 extent, no data is rendered.");
          }
        }
        if (d[0] === 0) {
          d[0] = 1;
        }
        if (d[1] === 0) {
          d[1] = -1;
        }
        return d;
      };
      Object.defineProperty(LogAxis2.prototype, "base", {
        get: function() {
          return this.scale.base;
        },
        set: function(value) {
          this.scale.base = value;
        },
        enumerable: false,
        configurable: true
      });
      LogAxis2.className = "LogAxis";
      LogAxis2.type = "log";
      __decorate28([
        Validate(AND(NUMBER_OR_NAN(), LESS_THAN("max"), NON_ZERO_NUMBER())),
        Default(NaN)
      ], LogAxis2.prototype, "min", void 0);
      __decorate28([
        Validate(AND(NUMBER_OR_NAN(), GREATER_THAN("min"), NON_ZERO_NUMBER())),
        Default(NaN)
      ], LogAxis2.prototype, "max", void 0);
      return LogAxis2;
    }(NumberAxis);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/data/dataModel.js
function extendDomain(values, domain) {
  var e_1, _a5;
  if (domain === void 0) {
    domain = [Infinity, -Infinity];
  }
  try {
    for (var values_1 = __values23(values), values_1_1 = values_1.next(); !values_1_1.done; values_1_1 = values_1.next()) {
      var value = values_1_1.value;
      if (typeof value !== "number") {
        continue;
      }
      if (value < domain[0]) {
        domain[0] = value;
      }
      if (value > domain[1]) {
        domain[1] = value;
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (values_1_1 && !values_1_1.done && (_a5 = values_1.return))
        _a5.call(values_1);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return domain;
}
function sumValues(values, accumulator) {
  var e_2, _a5;
  if (accumulator === void 0) {
    accumulator = [0, 0];
  }
  try {
    for (var values_2 = __values23(values), values_2_1 = values_2.next(); !values_2_1.done; values_2_1 = values_2.next()) {
      var value = values_2_1.value;
      if (typeof value !== "number") {
        continue;
      }
      if (value < 0) {
        accumulator[0] += value;
      }
      if (value > 0) {
        accumulator[1] += value;
      }
    }
  } catch (e_2_1) {
    e_2 = { error: e_2_1 };
  } finally {
    try {
      if (values_2_1 && !values_2_1.done && (_a5 = values_2.return))
        _a5.call(values_2);
    } finally {
      if (e_2)
        throw e_2.error;
    }
  }
  return accumulator;
}
function toKeyString(keys) {
  return keys.map(function(v) {
    if (v == null) {
      return v;
    } else if (typeof v === "number" || typeof v === "string" || typeof v === "boolean") {
      return v;
    } else if (typeof v === "object") {
      return JSON.stringify(v);
    }
    return v;
  }).join("-");
}
var __assign12, __values23, __read31, __spread18, SMALLEST_KEY_INTERVAL, SUM_VALUE_EXTENT, INVALID_VALUE, DataModel;
var init_dataModel = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/data/dataModel.js"() {
    init_logger();
    __assign12 = function() {
      __assign12 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign12.apply(this, arguments);
    };
    __values23 = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read31 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread18 = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read31(arguments[i]));
      return ar;
    };
    SMALLEST_KEY_INTERVAL = {
      type: "reducer",
      property: "smallestKeyInterval",
      initialValue: Infinity,
      reducer: function() {
        var prevX = NaN;
        return function(smallestSoFar, next) {
          var nextX = next.keys[0];
          var interval = Math.abs(nextX - prevX);
          prevX = nextX;
          if (!isNaN(interval) && interval > 0 && interval < smallestSoFar) {
            return interval;
          }
          return smallestSoFar;
        };
      }
    };
    SUM_VALUE_EXTENT = {
      type: "processor",
      property: "sumValueExtent",
      calculate: function(processedData) {
        var e_3, _a5;
        var _b2, _c2, _d2, _e;
        var result = __spread18((_c2 = (_b2 = processedData.domain.sumValues) === null || _b2 === void 0 ? void 0 : _b2[0]) !== null && _c2 !== void 0 ? _c2 : [0, 0]);
        try {
          for (var _f = __values23((_e = (_d2 = processedData.domain.sumValues) === null || _d2 === void 0 ? void 0 : _d2.slice(1)) !== null && _e !== void 0 ? _e : []), _g = _f.next(); !_g.done; _g = _f.next()) {
            var _h = __read31(_g.value, 2), min = _h[0], max = _h[1];
            if (min < result[0]) {
              result[0] = min;
            }
            if (max > result[1]) {
              result[1] = max;
            }
          }
        } catch (e_3_1) {
          e_3 = { error: e_3_1 };
        } finally {
          try {
            if (_g && !_g.done && (_a5 = _f.return))
              _a5.call(_f);
          } finally {
            if (e_3)
              throw e_3.error;
          }
        }
        return result;
      }
    };
    INVALID_VALUE = Symbol("invalid");
    DataModel = /** @class */
    function() {
      function DataModel2(opts2) {
        var e_4, _a5, e_5, _b2;
        var _this = this;
        var _c2;
        var props = opts2.props;
        var keys = true;
        try {
          for (var props_1 = __values23(props), props_1_1 = props_1.next(); !props_1_1.done; props_1_1 = props_1.next()) {
            var next = props_1_1.value;
            if (next.type === "key" && !keys) {
              throw new Error("AG Charts - internal config error: keys must come before values.");
            }
            if (next.type === "value" && keys) {
              keys = false;
            }
          }
        } catch (e_4_1) {
          e_4 = { error: e_4_1 };
        } finally {
          try {
            if (props_1_1 && !props_1_1.done && (_a5 = props_1.return))
              _a5.call(props_1);
          } finally {
            if (e_4)
              throw e_4.error;
          }
        }
        this.opts = __assign12({ dataVisible: true }, opts2);
        this.keys = props.filter(function(def) {
          return def.type === "key";
        }).map(function(def, index) {
          return __assign12(__assign12({}, def), { index, missing: false });
        });
        this.values = props.filter(function(def) {
          return def.type === "value";
        }).map(function(def, index) {
          return __assign12(__assign12({}, def), { index, missing: false });
        });
        this.sums = props.filter(function(def) {
          return def.type === "sum";
        });
        this.reducers = props.filter(function(def) {
          return def.type === "reducer";
        });
        this.processors = props.filter(function(def) {
          return def.type === "processor";
        });
        try {
          for (var _d2 = __values23((_c2 = this.sums) !== null && _c2 !== void 0 ? _c2 : []), _e = _d2.next(); !_e.done; _e = _d2.next()) {
            var properties = _e.value.properties;
            if (properties.length === 0)
              continue;
            if (!properties.some(function(prop) {
              return _this.values.some(function(def) {
                return def.property === prop;
              });
            })) {
              throw new Error("AG Charts - internal config error: sum properties must match defined properties (" + properties + ").");
            }
          }
        } catch (e_5_1) {
          e_5 = { error: e_5_1 };
        } finally {
          try {
            if (_e && !_e.done && (_b2 = _d2.return))
              _b2.call(_d2);
          } finally {
            if (e_5)
              throw e_5.error;
          }
        }
      }
      DataModel2.prototype.resolveProcessedDataIndex = function(propName) {
        var def = this.resolveProcessedDataDef(propName);
        if ((def === null || def === void 0 ? void 0 : def.type) === "key" || (def === null || def === void 0 ? void 0 : def.type) === "value") {
          return { type: def.type, index: def.index };
        }
      };
      DataModel2.prototype.resolveProcessedDataDef = function(propName) {
        var _a5 = this, keys = _a5.keys, values = _a5.values;
        var def = __spread18(keys, values).find(function(_a6) {
          var property = _a6.property;
          return property === propName;
        });
        if (!def)
          return void 0;
        return def;
      };
      DataModel2.prototype.getDomain = function(propName, processedData) {
        var idx = this.resolveProcessedDataIndex(propName);
        if (!idx) {
          return [];
        }
        return processedData.domain[idx.type === "key" ? "keys" : "values"][idx.index];
      };
      DataModel2.prototype.processData = function(data) {
        var e_6, _a5, e_7, _b2;
        var _c2 = this, _d2 = _c2.opts, groupByKeys = _d2.groupByKeys, normaliseTo = _d2.normaliseTo, sums = _c2.sums, reducers = _c2.reducers, processors = _c2.processors;
        var start = performance.now();
        try {
          for (var _e = __values23(__spread18(this.keys, this.values)), _f = _e.next(); !_f.done; _f = _e.next()) {
            var def = _f.value;
            def.missing = false;
          }
        } catch (e_6_1) {
          e_6 = { error: e_6_1 };
        } finally {
          try {
            if (_f && !_f.done && (_a5 = _e.return))
              _a5.call(_e);
          } finally {
            if (e_6)
              throw e_6.error;
          }
        }
        if (groupByKeys && this.keys.length === 0) {
          return void 0;
        }
        var processedData = this.extractData(data);
        if (groupByKeys) {
          processedData = this.groupData(processedData);
        }
        if (sums.length > 0) {
          this.sumData(processedData);
        }
        if (typeof normaliseTo === "number") {
          this.normaliseData(processedData);
        }
        if (reducers.length > 0) {
          this.reduceData(processedData);
        }
        if (processors.length > 0) {
          this.postProcessData(processedData);
        }
        try {
          for (var _g = __values23(__spread18(this.keys, this.values)), _h = _g.next(); !_h.done; _h = _g.next()) {
            var def = _h.value;
            if (def.missing) {
              Logger.warnOnce("the key '" + def.property + "' was not found in at least one data element.");
            }
          }
        } catch (e_7_1) {
          e_7 = { error: e_7_1 };
        } finally {
          try {
            if (_h && !_h.done && (_b2 = _g.return))
              _b2.call(_g);
          } finally {
            if (e_7)
              throw e_7.error;
          }
        }
        var end = performance.now();
        processedData.time = end - start;
        return processedData;
      };
      DataModel2.prototype.extractData = function(data) {
        var e_8, _a5, e_9, _b2, e_10, _c2;
        var _d2 = this, keyDefs = _d2.keys, valueDefs = _d2.values, dataVisible = _d2.opts.dataVisible;
        var _e = this.initDataDomainProcessor(), dataDomain = _e.dataDomain, processValue = _e.processValue;
        var resultData = new Array(dataVisible ? data.length : 0);
        var resultDataIdx = 0;
        try {
          dataLoop:
            for (var data_1 = __values23(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
              var datum = data_1_1.value;
              var keys = dataVisible ? new Array(keyDefs.length) : void 0;
              var keyIdx = 0;
              try {
                for (var keyDefs_1 = (e_9 = void 0, __values23(keyDefs)), keyDefs_1_1 = keyDefs_1.next(); !keyDefs_1_1.done; keyDefs_1_1 = keyDefs_1.next()) {
                  var def = keyDefs_1_1.value;
                  var key2 = processValue(def, datum);
                  if (key2 === INVALID_VALUE) {
                    continue dataLoop;
                  }
                  if (keys) {
                    keys[keyIdx++] = key2;
                  }
                }
              } catch (e_9_1) {
                e_9 = { error: e_9_1 };
              } finally {
                try {
                  if (keyDefs_1_1 && !keyDefs_1_1.done && (_b2 = keyDefs_1.return))
                    _b2.call(keyDefs_1);
                } finally {
                  if (e_9)
                    throw e_9.error;
                }
              }
              var values = dataVisible ? new Array(valueDefs.length) : void 0;
              var valueIdx = 0;
              try {
                for (var valueDefs_1 = (e_10 = void 0, __values23(valueDefs)), valueDefs_1_1 = valueDefs_1.next(); !valueDefs_1_1.done; valueDefs_1_1 = valueDefs_1.next()) {
                  var def = valueDefs_1_1.value;
                  var value = processValue(def, datum);
                  if (value === INVALID_VALUE) {
                    continue dataLoop;
                  }
                  if (values) {
                    values[valueIdx++] = value;
                  }
                }
              } catch (e_10_1) {
                e_10 = { error: e_10_1 };
              } finally {
                try {
                  if (valueDefs_1_1 && !valueDefs_1_1.done && (_c2 = valueDefs_1.return))
                    _c2.call(valueDefs_1);
                } finally {
                  if (e_10)
                    throw e_10.error;
                }
              }
              if (dataVisible) {
                resultData[resultDataIdx++] = {
                  datum,
                  keys,
                  values
                };
              }
            }
        } catch (e_8_1) {
          e_8 = { error: e_8_1 };
        } finally {
          try {
            if (data_1_1 && !data_1_1.done && (_a5 = data_1.return))
              _a5.call(data_1);
          } finally {
            if (e_8)
              throw e_8.error;
          }
        }
        resultData.length = resultDataIdx;
        var propertyDomain = function(def2) {
          var result = dataDomain.get(def2.property).domain;
          if (Array.isArray(result) && result[0] > result[1]) {
            return [];
          }
          return __spread18(result);
        };
        return {
          type: "ungrouped",
          data: resultData,
          domain: {
            keys: keyDefs.map(function(def2) {
              return propertyDomain(def2);
            }),
            values: valueDefs.map(function(def2) {
              return propertyDomain(def2);
            })
          },
          indices: {
            keys: keyDefs.reduce(function(r, _a6) {
              var property = _a6.property, index = _a6.index;
              r[property] = index;
              return r;
            }, {}),
            values: valueDefs.reduce(function(r, _a6) {
              var property = _a6.property, index = _a6.index;
              r[property] = index;
              return r;
            }, {})
          },
          defs: {
            keys: keyDefs,
            values: valueDefs
          },
          time: 0
        };
      };
      DataModel2.prototype.groupData = function(data) {
        var e_11, _a5, e_12, _b2;
        var processedData = /* @__PURE__ */ new Map();
        try {
          for (var _c2 = __values23(data.data), _d2 = _c2.next(); !_d2.done; _d2 = _c2.next()) {
            var _e = _d2.value, keys = _e.keys, values = _e.values, datum = _e.datum;
            var keyStr = toKeyString(keys);
            if (processedData.has(keyStr)) {
              var existingData = processedData.get(keyStr);
              existingData.values.push(values);
              existingData.datum.push(datum);
            } else {
              processedData.set(keyStr, { keys, values: [values], datum: [datum] });
            }
          }
        } catch (e_11_1) {
          e_11 = { error: e_11_1 };
        } finally {
          try {
            if (_d2 && !_d2.done && (_a5 = _c2.return))
              _a5.call(_c2);
          } finally {
            if (e_11)
              throw e_11.error;
          }
        }
        var resultData = new Array(processedData.size);
        var dataIndex = 0;
        try {
          for (var _f = __values23(processedData.entries()), _g = _f.next(); !_g.done; _g = _f.next()) {
            var _h = __read31(_g.value, 2), _j = _h[1], keys = _j.keys, values = _j.values, datum = _j.datum;
            resultData[dataIndex++] = {
              keys,
              values,
              datum
            };
          }
        } catch (e_12_1) {
          e_12 = { error: e_12_1 };
        } finally {
          try {
            if (_g && !_g.done && (_b2 = _f.return))
              _b2.call(_f);
          } finally {
            if (e_12)
              throw e_12.error;
          }
        }
        return __assign12(__assign12({}, data), { type: "grouped", data: resultData });
      };
      DataModel2.prototype.sumData = function(processedData) {
        var e_13, _a5, e_14, _b2, e_15, _c2;
        var _d2;
        var _e = this, valueDefs = _e.values, sumDefs = _e.sums;
        if (!sumDefs)
          return;
        var resultSumValues = sumDefs.map(function() {
          return [Infinity, -Infinity];
        });
        var resultSumValueIndices = sumDefs.map(function(defs) {
          return defs.properties.map(function(prop) {
            return valueDefs.findIndex(function(def) {
              return def.property === prop;
            });
          });
        });
        try {
          for (var _f = __values23(processedData.data), _g = _f.next(); !_g.done; _g = _f.next()) {
            var group2 = _g.value;
            var values = group2.values;
            (_d2 = group2.sumValues) !== null && _d2 !== void 0 ? _d2 : group2.sumValues = new Array(resultSumValueIndices.length);
            if (processedData.type === "ungrouped") {
              values = [values];
            }
            var resultIdx = 0;
            try {
              for (var resultSumValueIndices_1 = (e_14 = void 0, __values23(resultSumValueIndices)), resultSumValueIndices_1_1 = resultSumValueIndices_1.next(); !resultSumValueIndices_1_1.done; resultSumValueIndices_1_1 = resultSumValueIndices_1.next()) {
                var indices = resultSumValueIndices_1_1.value;
                var groupDomain = extendDomain([]);
                var _loop_1 = function(distinctValues2) {
                  var valuesToSum = indices.map(function(valueIdx) {
                    return distinctValues2[valueIdx];
                  });
                  var range2 = sumValues(valuesToSum);
                  if (range2) {
                    extendDomain(range2, groupDomain);
                  }
                };
                try {
                  for (var values_3 = (e_15 = void 0, __values23(values)), values_3_1 = values_3.next(); !values_3_1.done; values_3_1 = values_3.next()) {
                    var distinctValues = values_3_1.value;
                    _loop_1(distinctValues);
                  }
                } catch (e_15_1) {
                  e_15 = { error: e_15_1 };
                } finally {
                  try {
                    if (values_3_1 && !values_3_1.done && (_c2 = values_3.return))
                      _c2.call(values_3);
                  } finally {
                    if (e_15)
                      throw e_15.error;
                  }
                }
                extendDomain(groupDomain, resultSumValues[resultIdx]);
                group2.sumValues[resultIdx++] = groupDomain;
              }
            } catch (e_14_1) {
              e_14 = { error: e_14_1 };
            } finally {
              try {
                if (resultSumValueIndices_1_1 && !resultSumValueIndices_1_1.done && (_b2 = resultSumValueIndices_1.return))
                  _b2.call(resultSumValueIndices_1);
              } finally {
                if (e_14)
                  throw e_14.error;
              }
            }
          }
        } catch (e_13_1) {
          e_13 = { error: e_13_1 };
        } finally {
          try {
            if (_g && !_g.done && (_a5 = _f.return))
              _a5.call(_f);
          } finally {
            if (e_13)
              throw e_13.error;
          }
        }
        processedData.domain.sumValues = resultSumValues;
      };
      DataModel2.prototype.normaliseData = function(processedData) {
        var e_16, _a5, e_17, _b2, e_18, _c2, e_19, _d2, e_20, _e, e_21, _f, e_22, _g;
        var _h;
        var _j = this, sumDefs = _j.sums, valueDefs = _j.values, normaliseTo = _j.opts.normaliseTo;
        if (normaliseTo == null)
          return;
        var sumValues2 = processedData.domain.sumValues;
        var resultSumValueIndices = sumDefs.map(function(defs) {
          return defs.properties.map(function(prop) {
            return valueDefs.findIndex(function(def) {
              return def.property === prop;
            });
          });
        });
        var normalise = function(val, extent2) {
          var result = val * normaliseTo / extent2;
          if (result >= 0) {
            return Math.min(normaliseTo, result);
          }
          return Math.max(-normaliseTo, result);
        };
        for (var sumIdx = 0; sumIdx < sumDefs.length; sumIdx++) {
          var sums = sumValues2 === null || sumValues2 === void 0 ? void 0 : sumValues2[sumIdx];
          if (sums == null)
            continue;
          var sumAbsExtent = -Infinity;
          try {
            for (var sums_1 = (e_16 = void 0, __values23(sums)), sums_1_1 = sums_1.next(); !sums_1_1.done; sums_1_1 = sums_1.next()) {
              var sum = sums_1_1.value;
              var sumAbs = Math.abs(sum);
              if (sumAbsExtent < sumAbs) {
                sumAbsExtent = sumAbs;
              }
            }
          } catch (e_16_1) {
            e_16 = { error: e_16_1 };
          } finally {
            try {
              if (sums_1_1 && !sums_1_1.done && (_a5 = sums_1.return))
                _a5.call(sums_1);
            } finally {
              if (e_16)
                throw e_16.error;
            }
          }
          var sumRangeIdx = 0;
          try {
            for (var sums_2 = (e_17 = void 0, __values23(sums)), sums_2_1 = sums_2.next(); !sums_2_1.done; sums_2_1 = sums_2.next()) {
              var _ = sums_2_1.value;
              sums[sumRangeIdx] = normalise(sums[sumRangeIdx], sumAbsExtent);
              sumRangeIdx++;
            }
          } catch (e_17_1) {
            e_17 = { error: e_17_1 };
          } finally {
            try {
              if (sums_2_1 && !sums_2_1.done && (_b2 = sums_2.return))
                _b2.call(sums_2);
            } finally {
              if (e_17)
                throw e_17.error;
            }
          }
          try {
            for (var _k = (e_18 = void 0, __values23(processedData.data)), _l = _k.next(); !_l.done; _l = _k.next()) {
              var next = _l.value;
              var sumValues_1 = next.sumValues;
              var values = next.values;
              if (processedData.type === "ungrouped") {
                values = [values];
              }
              var valuesSumExtent = 0;
              try {
                for (var _m = (e_19 = void 0, __values23((_h = sumValues_1 === null || sumValues_1 === void 0 ? void 0 : sumValues_1[sumIdx]) !== null && _h !== void 0 ? _h : [])), _o = _m.next(); !_o.done; _o = _m.next()) {
                  var sum = _o.value;
                  var sumAbs = Math.abs(sum);
                  if (valuesSumExtent < sumAbs) {
                    valuesSumExtent = sumAbs;
                  }
                }
              } catch (e_19_1) {
                e_19 = { error: e_19_1 };
              } finally {
                try {
                  if (_o && !_o.done && (_d2 = _m.return))
                    _d2.call(_m);
                } finally {
                  if (e_19)
                    throw e_19.error;
                }
              }
              try {
                for (var values_4 = (e_20 = void 0, __values23(values)), values_4_1 = values_4.next(); !values_4_1.done; values_4_1 = values_4.next()) {
                  var row = values_4_1.value;
                  try {
                    for (var _p = (e_21 = void 0, __values23(resultSumValueIndices[sumIdx])), _q = _p.next(); !_q.done; _q = _p.next()) {
                      var indices = _q.value;
                      row[indices] = normalise(row[indices], valuesSumExtent);
                    }
                  } catch (e_21_1) {
                    e_21 = { error: e_21_1 };
                  } finally {
                    try {
                      if (_q && !_q.done && (_f = _p.return))
                        _f.call(_p);
                    } finally {
                      if (e_21)
                        throw e_21.error;
                    }
                  }
                }
              } catch (e_20_1) {
                e_20 = { error: e_20_1 };
              } finally {
                try {
                  if (values_4_1 && !values_4_1.done && (_e = values_4.return))
                    _e.call(values_4);
                } finally {
                  if (e_20)
                    throw e_20.error;
                }
              }
              if (sumValues_1 == null)
                continue;
              sumRangeIdx = 0;
              try {
                for (var _r = (e_22 = void 0, __values23(sumValues_1[sumIdx])), _s = _r.next(); !_s.done; _s = _r.next()) {
                  var _ = _s.value;
                  sumValues_1[sumIdx][sumRangeIdx] = normalise(sumValues_1[sumIdx][sumRangeIdx], valuesSumExtent);
                  sumRangeIdx++;
                }
              } catch (e_22_1) {
                e_22 = { error: e_22_1 };
              } finally {
                try {
                  if (_s && !_s.done && (_g = _r.return))
                    _g.call(_r);
                } finally {
                  if (e_22)
                    throw e_22.error;
                }
              }
            }
          } catch (e_18_1) {
            e_18 = { error: e_18_1 };
          } finally {
            try {
              if (_l && !_l.done && (_c2 = _k.return))
                _c2.call(_k);
            } finally {
              if (e_18)
                throw e_18.error;
            }
          }
        }
      };
      DataModel2.prototype.reduceData = function(processedData) {
        var e_23, _a5, e_24, _b2;
        var _c2;
        var reducerDefs = this.reducers;
        var reducers = reducerDefs.map(function(def) {
          return def.reducer();
        });
        var accValues = reducerDefs.map(function(def) {
          return def.initialValue;
        });
        try {
          for (var _d2 = __values23(processedData.data), _e = _d2.next(); !_e.done; _e = _d2.next()) {
            var group2 = _e.value;
            var reducerIndex = 0;
            try {
              for (var reducers_1 = (e_24 = void 0, __values23(reducers)), reducers_1_1 = reducers_1.next(); !reducers_1_1.done; reducers_1_1 = reducers_1.next()) {
                var reducer = reducers_1_1.value;
                accValues[reducerIndex] = reducer(accValues[reducerIndex], group2);
                reducerIndex++;
              }
            } catch (e_24_1) {
              e_24 = { error: e_24_1 };
            } finally {
              try {
                if (reducers_1_1 && !reducers_1_1.done && (_b2 = reducers_1.return))
                  _b2.call(reducers_1);
              } finally {
                if (e_24)
                  throw e_24.error;
              }
            }
          }
        } catch (e_23_1) {
          e_23 = { error: e_23_1 };
        } finally {
          try {
            if (_e && !_e.done && (_a5 = _d2.return))
              _a5.call(_d2);
          } finally {
            if (e_23)
              throw e_23.error;
          }
        }
        for (var accIdx = 0; accIdx < accValues.length; accIdx++) {
          (_c2 = processedData.reduced) !== null && _c2 !== void 0 ? _c2 : processedData.reduced = {};
          processedData.reduced[reducerDefs[accIdx].property] = accValues[accIdx];
        }
      };
      DataModel2.prototype.postProcessData = function(processedData) {
        var e_25, _a5;
        var _b2;
        var processorDefs = this.processors;
        try {
          for (var processorDefs_1 = __values23(processorDefs), processorDefs_1_1 = processorDefs_1.next(); !processorDefs_1_1.done; processorDefs_1_1 = processorDefs_1.next()) {
            var def = processorDefs_1_1.value;
            (_b2 = processedData.reduced) !== null && _b2 !== void 0 ? _b2 : processedData.reduced = {};
            processedData.reduced[def.property] = def.calculate(processedData);
          }
        } catch (e_25_1) {
          e_25 = { error: e_25_1 };
        } finally {
          try {
            if (processorDefs_1_1 && !processorDefs_1_1.done && (_a5 = processorDefs_1.return))
              _a5.call(processorDefs_1);
          } finally {
            if (e_25)
              throw e_25.error;
          }
        }
      };
      DataModel2.prototype.initDataDomainProcessor = function() {
        var _a5 = this, keyDefs = _a5.keys, valueDefs = _a5.values;
        var dataDomain = /* @__PURE__ */ new Map();
        var initDataDomainKey = function(key2, type2, updateDataDomain) {
          if (type2 === "category") {
            updateDataDomain.set(key2, { type: type2, domain: /* @__PURE__ */ new Set() });
          } else {
            updateDataDomain.set(key2, { type: type2, domain: [Infinity, -Infinity] });
          }
        };
        var initDataDomain = function(updateDataDomain) {
          if (updateDataDomain === void 0) {
            updateDataDomain = dataDomain;
          }
          keyDefs.forEach(function(def) {
            return initDataDomainKey(def.property, def.valueType, updateDataDomain);
          });
          valueDefs.forEach(function(def) {
            return initDataDomainKey(def.property, def.valueType, updateDataDomain);
          });
          return updateDataDomain;
        };
        initDataDomain();
        var processValue = function(def, datum, updateDataDomain) {
          var _a6, _b2;
          if (updateDataDomain === void 0) {
            updateDataDomain = dataDomain;
          }
          var valueInDatum = def.property in datum;
          var missingValueDef = "missingValue" in def;
          if (!def.missing && !valueInDatum && !missingValueDef) {
            def.missing = true;
          }
          if (!updateDataDomain.has(def.property)) {
            initDataDomain(updateDataDomain);
          }
          var value = valueInDatum ? datum[def.property] : def.missingValue;
          if (valueInDatum) {
            var valid = (_b2 = (_a6 = def.validation) === null || _a6 === void 0 ? void 0 : _a6.call(def, value)) !== null && _b2 !== void 0 ? _b2 : true;
            if (!valid) {
              if ("invalidValue" in def) {
                value = def.invalidValue;
              } else {
                return INVALID_VALUE;
              }
            }
          }
          var meta = updateDataDomain.get(def.property);
          if ((meta === null || meta === void 0 ? void 0 : meta.type) === "category") {
            meta.domain.add(value);
          } else if ((meta === null || meta === void 0 ? void 0 : meta.type) === "range") {
            if (meta.domain[0] > value) {
              meta.domain[0] = value;
            }
            if (meta.domain[1] < value) {
              meta.domain[1] = value;
            }
          }
          return value;
        };
        return { dataDomain, processValue, initDataDomain };
      };
      return DataModel2;
    }();
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/axis/timeAxis.js
var __extends39, __decorate29, TimeAxis;
var init_timeAxis = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/axis/timeAxis.js"() {
    init_validation();
    init_timeScale();
    init_array();
    init_chartAxis();
    __extends39 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate29 = function(decorators, target2, key2, desc) {
      var c = arguments.length, r = c < 3 ? target2 : desc === null ? desc = Object.getOwnPropertyDescriptor(target2, key2) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target2, key2, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target2, key2, r) : d(target2, key2)) || r;
      return c > 3 && r && Object.defineProperty(target2, key2, r), r;
    };
    TimeAxis = /** @class */
    function(_super) {
      __extends39(TimeAxis2, _super);
      function TimeAxis2(moduleCtx) {
        var _this = _super.call(this, moduleCtx, new TimeScale()) || this;
        _this.datumFormat = "%m/%d/%y, %H:%M:%S";
        _this.min = void 0;
        _this.max = void 0;
        var scale = _this.scale;
        scale.strictClampByDefault = true;
        _this.refreshScale();
        _this.datumFormatter = scale.tickFormat({
          specifier: _this.datumFormat
        });
        return _this;
      }
      TimeAxis2.prototype.normaliseDataDomain = function(d) {
        var _a5 = this, min = _a5.min, max = _a5.max;
        if (typeof min === "number") {
          min = new Date(min);
        }
        if (typeof max === "number") {
          max = new Date(max);
        }
        if (d.length > 2) {
          d = (extent(d) || [0, 1e3]).map(function(x) {
            return new Date(x);
          });
        }
        if (min instanceof Date) {
          d = [min, d[1]];
        }
        if (max instanceof Date) {
          d = [d[0], max];
        }
        if (d[0] > d[1]) {
          d = [];
        }
        return d;
      };
      TimeAxis2.prototype.onLabelFormatChange = function(ticks, format2) {
        if (format2) {
          _super.prototype.onLabelFormatChange.call(this, ticks, format2);
        } else {
          this.labelFormatter = this.scale.tickFormat({ ticks });
        }
      };
      TimeAxis2.prototype.formatDatum = function(datum) {
        return this.datumFormatter(datum);
      };
      TimeAxis2.prototype.calculatePadding = function(_min, _max) {
        return 1;
      };
      TimeAxis2.className = "TimeAxis";
      TimeAxis2.type = "time";
      __decorate29([
        Validate(AND(OPT_DATE_OR_DATETIME_MS, LESS_THAN("max")))
      ], TimeAxis2.prototype, "min", void 0);
      __decorate29([
        Validate(AND(OPT_DATE_OR_DATETIME_MS, GREATER_THAN("min")))
      ], TimeAxis2.prototype, "max", void 0);
      return TimeAxis2;
    }(ChartAxis);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/series/cartesian/areaSeries.js
var __extends40, __decorate30, __awaiter9, __generator9, __read32, __spread19, __values24, AreaSeriesLabel, AreaSeriesTooltip, AreaSeriesTag, AreaSeries;
var init_areaSeries = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/series/cartesian/areaSeries.js"() {
    init_series();
    init_node();
    init_cartesianSeries();
    init_chartAxisDirection();
    init_util();
    init_tooltip();
    init_array();
    init_equal();
    init_string();
    init_label();
    init_sanitize();
    init_value();
    init_continuousScale();
    init_validation();
    init_logAxis();
    init_dataModel();
    init_timeAxis();
    __extends40 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate30 = function(decorators, target2, key2, desc) {
      var c = arguments.length, r = c < 3 ? target2 : desc === null ? desc = Object.getOwnPropertyDescriptor(target2, key2) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target2, key2, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target2, key2, r) : d(target2, key2)) || r;
      return c > 3 && r && Object.defineProperty(target2, key2, r), r;
    };
    __awaiter9 = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __generator9 = function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    __read32 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread19 = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read32(arguments[i]));
      return ar;
    };
    __values24 = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    AreaSeriesLabel = /** @class */
    function(_super) {
      __extends40(AreaSeriesLabel2, _super);
      function AreaSeriesLabel2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.formatter = void 0;
        return _this;
      }
      __decorate30([
        Validate(OPT_FUNCTION)
      ], AreaSeriesLabel2.prototype, "formatter", void 0);
      return AreaSeriesLabel2;
    }(Label);
    AreaSeriesTooltip = /** @class */
    function(_super) {
      __extends40(AreaSeriesTooltip2, _super);
      function AreaSeriesTooltip2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.renderer = void 0;
        _this.format = void 0;
        return _this;
      }
      __decorate30([
        Validate(OPT_FUNCTION)
      ], AreaSeriesTooltip2.prototype, "renderer", void 0);
      __decorate30([
        Validate(OPT_STRING)
      ], AreaSeriesTooltip2.prototype, "format", void 0);
      return AreaSeriesTooltip2;
    }(SeriesTooltip);
    (function(AreaSeriesTag2) {
      AreaSeriesTag2[AreaSeriesTag2["Fill"] = 0] = "Fill";
      AreaSeriesTag2[AreaSeriesTag2["Stroke"] = 1] = "Stroke";
      AreaSeriesTag2[AreaSeriesTag2["Marker"] = 2] = "Marker";
      AreaSeriesTag2[AreaSeriesTag2["Label"] = 3] = "Label";
    })(AreaSeriesTag || (AreaSeriesTag = {}));
    AreaSeries = /** @class */
    function(_super) {
      __extends40(AreaSeries2, _super);
      function AreaSeries2() {
        var _this = _super.call(this, {
          pathsPerSeries: 2,
          pathsZIndexSubOrderOffset: [0, 1e3],
          hasMarkers: true,
          renderLayerPerSubSeries: false,
          directionKeys: {
            x: ["xKey"],
            y: ["yKeys"]
          }
        }) || this;
        _this.tooltip = new AreaSeriesTooltip();
        _this.marker = new CartesianSeriesMarker();
        _this.label = new AreaSeriesLabel();
        _this.fills = ["#c16068", "#a2bf8a", "#ebcc87", "#80a0c3", "#b58dae", "#85c0d1"];
        _this.strokes = ["#874349", "#718661", "#a48f5f", "#5a7088", "#7f637a", "#5d8692"];
        _this.fillOpacity = 1;
        _this.strokeOpacity = 1;
        _this.lineDash = [0];
        _this.lineDashOffset = 0;
        _this._xKey = "";
        _this.xName = "";
        _this._yKeys = [];
        _this._visibles = [];
        _this.yNames = [];
        _this.strokeWidth = 2;
        _this.shadow = void 0;
        var _a5 = _this, marker = _a5.marker, label = _a5.label;
        marker.enabled = false;
        label.enabled = false;
        return _this;
      }
      Object.defineProperty(AreaSeries2.prototype, "xKey", {
        get: function() {
          return this._xKey;
        },
        set: function(value) {
          this._xKey = value;
          this.processedData = void 0;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(AreaSeries2.prototype, "yKeys", {
        get: function() {
          return this._yKeys;
        },
        set: function(values) {
          if (!areArrayItemsStrictlyEqual(this._yKeys, values)) {
            this._yKeys = values;
            this.processedData = void 0;
            this.processSeriesItemEnabled();
          }
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(AreaSeries2.prototype, "visibles", {
        get: function() {
          return this._visibles;
        },
        set: function(visibles) {
          this._visibles = visibles;
          this.processSeriesItemEnabled();
        },
        enumerable: false,
        configurable: true
      });
      AreaSeries2.prototype.processSeriesItemEnabled = function() {
        var _a5 = this, seriesItemEnabled = _a5.seriesItemEnabled, _b2 = _a5._visibles, visibles = _b2 === void 0 ? [] : _b2;
        seriesItemEnabled.clear();
        this._yKeys.forEach(function(key2, idx) {
          var _a6;
          return seriesItemEnabled.set(key2, (_a6 = visibles[idx]) !== null && _a6 !== void 0 ? _a6 : true);
        });
      };
      Object.defineProperty(AreaSeries2.prototype, "normalizedTo", {
        get: function() {
          return this._normalizedTo;
        },
        set: function(value) {
          var absValue = value ? Math.abs(value) : void 0;
          if (this._normalizedTo !== absValue) {
            this._normalizedTo = absValue;
          }
        },
        enumerable: false,
        configurable: true
      });
      AreaSeries2.prototype.processData = function() {
        return __awaiter9(this, void 0, void 0, function() {
          var _a5, xKey, yKeys, seriesItemEnabled, xAxis, yAxis, normalizedTo, data, isContinuousX, isContinuousY, enabledYKeys, normaliseTo;
          return __generator9(this, function(_b2) {
            _a5 = this, xKey = _a5.xKey, yKeys = _a5.yKeys, seriesItemEnabled = _a5.seriesItemEnabled, xAxis = _a5.xAxis, yAxis = _a5.yAxis, normalizedTo = _a5.normalizedTo;
            data = xKey && yKeys.length && this.data ? this.data : [];
            isContinuousX = (xAxis === null || xAxis === void 0 ? void 0 : xAxis.scale) instanceof ContinuousScale;
            isContinuousY = (yAxis === null || yAxis === void 0 ? void 0 : yAxis.scale) instanceof ContinuousScale;
            enabledYKeys = __spread19(seriesItemEnabled.entries()).filter(function(_a6) {
              var _b3 = __read32(_a6, 2), enabled = _b3[1];
              return enabled;
            }).map(function(_a6) {
              var _b3 = __read32(_a6, 1), yKey = _b3[0];
              return yKey;
            });
            normaliseTo = normalizedTo && isFinite(normalizedTo) ? normalizedTo : void 0;
            this.dataModel = new DataModel({
              props: __spread19([
                keyProperty(xKey, isContinuousX)
              ], enabledYKeys.map(function(yKey) {
                return valueProperty(yKey, isContinuousY, {
                  missingValue: NaN,
                  invalidValue: void 0
                });
              }), [
                sumProperties(enabledYKeys),
                SUM_VALUE_EXTENT
              ]),
              groupByKeys: true,
              dataVisible: this.visible && enabledYKeys.length > 0,
              normaliseTo
            });
            this.processedData = this.dataModel.processData(data);
            return [
              2
              /*return*/
            ];
          });
        });
      };
      AreaSeries2.prototype.getDomain = function(direction) {
        var _a5 = this, processedData = _a5.processedData, xAxis = _a5.xAxis, yAxis = _a5.yAxis;
        if (!processedData)
          return [];
        var _b2 = processedData, _c2 = __read32(_b2.defs.keys, 1), keyDef = _c2[0], _d2 = _b2.domain, _e = __read32(_d2.keys, 1), keys = _e[0], _f = __read32(_d2.values, 1), yExtent = _f[0], _g = _b2.reduced, _h = SUM_VALUE_EXTENT.property, ySumExtent = (_g === void 0 ? {} : _g)[_h];
        if (direction === ChartAxisDirection.X) {
          if (keyDef.valueType === "category") {
            return keys;
          }
          return this.fixNumericExtent(extent(keys), xAxis);
        } else if (yAxis instanceof LogAxis || yAxis instanceof TimeAxis) {
          return this.fixNumericExtent(yExtent, yAxis);
        } else {
          return this.fixNumericExtent(ySumExtent, yAxis);
        }
      };
      AreaSeries2.prototype.createNodeData = function() {
        return __awaiter9(this, void 0, void 0, function() {
          var _a5, xAxis, yAxis, data, _b2, groupedData, contexts, _c2, yKeys, xKey, marker, label, fills, strokes, seriesId, xScale, yScale, continuousY, xOffset, xDataCount, cumulativePathValues, cumulativeMarkerValues, createPathCoordinates, createMarkerCoordinate;
          var _this = this;
          return __generator9(this, function(_d2) {
            _a5 = this, xAxis = _a5.xAxis, yAxis = _a5.yAxis, data = _a5.data, _b2 = _a5.processedData, groupedData = (_b2 === void 0 ? {} : _b2).data;
            if (!xAxis || !yAxis || !data) {
              return [2, []];
            }
            contexts = [];
            _c2 = this, yKeys = _c2.yKeys, xKey = _c2.xKey, marker = _c2.marker, label = _c2.label, fills = _c2.fills, strokes = _c2.strokes, seriesId = _c2.id;
            xScale = xAxis.scale;
            yScale = yAxis.scale;
            continuousY = yScale instanceof ContinuousScale;
            xOffset = (xScale.bandwidth || 0) / 2;
            xDataCount = data.length;
            cumulativePathValues = new Array(xDataCount).fill(null).map(function() {
              return { left: 0, right: 0 };
            });
            cumulativeMarkerValues = new Array(xDataCount).fill(0);
            createPathCoordinates = function(xDatum, yDatum, idx, side) {
              var x = xScale.convert(xDatum) + xOffset;
              var prevY = cumulativePathValues[idx][side];
              var currY = cumulativePathValues[idx][side] + yDatum;
              var prevYCoordinate = yScale.convert(prevY, { strict: false });
              var currYCoordinate = yScale.convert(currY, { strict: false });
              cumulativePathValues[idx][side] = currY;
              return [
                { x, y: currYCoordinate, size: marker.size },
                { x, y: prevYCoordinate, size: marker.size }
              ];
            };
            createMarkerCoordinate = function(xDatum, yDatum, idx, rawYDatum) {
              var currY;
              var normalized = _this.normalizedTo && isFinite(_this.normalizedTo);
              var normalizedAndValid = normalized && continuousY && isContinuous(rawYDatum);
              var valid = !normalized && !isNaN(rawYDatum) || normalizedAndValid;
              if (valid) {
                currY = cumulativeMarkerValues[idx] += yDatum;
              }
              var x = xScale.convert(xDatum) + xOffset;
              var y = yScale.convert(currY, { strict: false });
              return { x, y, size: marker.size };
            };
            yKeys.forEach(function(yKey, seriesIdx) {
              var _a6;
              var yKeyDataIndex = (_a6 = _this.dataModel) === null || _a6 === void 0 ? void 0 : _a6.resolveProcessedDataIndex(yKey);
              var labelSelectionData = [];
              var markerSelectionData = [];
              var strokeSelectionData = { itemId: yKey, points: [], yValues: [] };
              var fillSelectionData = { itemId: yKey, points: [] };
              contexts[seriesIdx] = {
                itemId: yKey,
                fillSelectionData,
                labelData: labelSelectionData,
                nodeData: markerSelectionData,
                strokeSelectionData
              };
              if (!yKeyDataIndex) {
                return;
              }
              var fillPoints = fillSelectionData.points;
              var fillPhantomPoints = [];
              var strokePoints = strokeSelectionData.points;
              var yValues = strokeSelectionData.yValues;
              var datumIdx = -1;
              groupedData === null || groupedData === void 0 ? void 0 : groupedData.forEach(function(datumGroup, dataIdx) {
                var _a7 = __read32(datumGroup.keys, 1), xDatum = _a7[0], datumArray = datumGroup.datum, valuesArray = datumGroup.values;
                valuesArray.forEach(function(values, valueIdx) {
                  datumIdx++;
                  var seriesDatum = datumArray[valueIdx];
                  var rawYDatum = values[yKeyDataIndex.index];
                  var yDatum = isNaN(rawYDatum) ? void 0 : rawYDatum;
                  var nextValuesSameGroup = valueIdx < valuesArray.length - 1;
                  var nextDatumGroup = nextValuesSameGroup ? datumGroup : groupedData[dataIdx + 1];
                  var nextXDatum = nextDatumGroup === null || nextDatumGroup === void 0 ? void 0 : nextDatumGroup.keys[0];
                  var rawNextYIdx = nextValuesSameGroup ? valueIdx + 1 : 0;
                  var rawNextYDatum = nextDatumGroup === null || nextDatumGroup === void 0 ? void 0 : nextDatumGroup.values[rawNextYIdx][yKeyDataIndex.index];
                  var nextYDatum = isNaN(rawNextYDatum) ? void 0 : rawNextYDatum;
                  var point = createMarkerCoordinate(xDatum, +yDatum, datumIdx, seriesDatum[yKey]);
                  if (marker) {
                    markerSelectionData.push({
                      index: datumIdx,
                      series: _this,
                      itemId: yKey,
                      datum: seriesDatum,
                      nodeMidPoint: { x: point.x, y: point.y },
                      cumulativeValue: cumulativeMarkerValues[datumIdx],
                      yValue: yDatum,
                      yKey,
                      xKey,
                      point,
                      fill: fills[seriesIdx % fills.length],
                      stroke: strokes[seriesIdx % strokes.length]
                    });
                  }
                  var labelText;
                  if (label.formatter) {
                    labelText = label.formatter({ value: yDatum, seriesId });
                  } else {
                    labelText = isNumber(yDatum) ? Number(yDatum).toFixed(2) : String(yDatum);
                  }
                  if (label) {
                    labelSelectionData.push({
                      index: datumIdx,
                      itemId: yKey,
                      point,
                      label: labelText ? {
                        text: labelText,
                        fontStyle: label.fontStyle,
                        fontWeight: label.fontWeight,
                        fontSize: label.fontSize,
                        fontFamily: label.fontFamily,
                        textAlign: "center",
                        textBaseline: "bottom",
                        fill: label.color
                      } : void 0
                    });
                  }
                  var windowX = [xDatum, nextXDatum];
                  var windowY = [yDatum, nextYDatum];
                  if (windowX.some(function(v) {
                    return v == void 0;
                  })) {
                    return;
                  }
                  if (windowY.some(function(v) {
                    return v == void 0;
                  })) {
                    windowY[0] = 0;
                    windowY[1] = 0;
                  }
                  var currCoordinates = createPathCoordinates(windowX[0], +windowY[0], datumIdx, "right");
                  fillPoints.push(currCoordinates[0]);
                  fillPhantomPoints.push(currCoordinates[1]);
                  var nextCoordinates = createPathCoordinates(windowX[1], +windowY[1], datumIdx, "left");
                  fillPoints.push(nextCoordinates[0]);
                  fillPhantomPoints.push(nextCoordinates[1]);
                  strokePoints.push({ x: NaN, y: NaN });
                  yValues.push(void 0);
                  strokePoints.push(currCoordinates[0]);
                  yValues.push(yDatum);
                  if (nextYDatum !== void 0) {
                    strokePoints.push(nextCoordinates[0]);
                    yValues.push(yDatum);
                  }
                });
              });
              for (var i = fillPhantomPoints.length - 1; i >= 0; i--) {
                fillPoints.push(fillPhantomPoints[i]);
              }
            });
            return [2, contexts];
          });
        });
      };
      AreaSeries2.prototype.isPathOrSelectionDirty = function() {
        return this.marker.isDirty();
      };
      AreaSeries2.prototype.updatePaths = function(opts2) {
        return __awaiter9(this, void 0, void 0, function() {
          var _a5, fillSelectionData, strokeSelectionData, _b2, fill, stroke;
          return __generator9(this, function(_c2) {
            _a5 = opts2.contextData, fillSelectionData = _a5.fillSelectionData, strokeSelectionData = _a5.strokeSelectionData, _b2 = __read32(opts2.paths, 2), fill = _b2[0], stroke = _b2[1];
            fill.datum = fillSelectionData;
            fill.tag = AreaSeriesTag.Fill;
            fill.lineJoin = "round";
            fill.stroke = void 0;
            fill.pointerEvents = PointerEvents.None;
            stroke.datum = strokeSelectionData;
            stroke.tag = AreaSeriesTag.Stroke;
            stroke.fill = void 0;
            stroke.lineJoin = stroke.lineCap = "round";
            stroke.pointerEvents = PointerEvents.None;
            return [
              2
              /*return*/
            ];
          });
        });
      };
      AreaSeries2.prototype.updatePathNodes = function(opts2) {
        return __awaiter9(this, void 0, void 0, function() {
          var _a5, fill, stroke, seriesIdx, itemId, _b2, strokes, fills, fillOpacity, strokeOpacity, strokeWidth, shadow, points, path, i, points_1, points_1_1, p, _c2, points, yValues, moveTo_1, path, i, points_2, points_2_1, p;
          var e_1, _d2, e_2, _e;
          return __generator9(this, function(_f) {
            _a5 = __read32(opts2.paths, 2), fill = _a5[0], stroke = _a5[1], seriesIdx = opts2.seriesIdx, itemId = opts2.itemId;
            _b2 = this, strokes = _b2.strokes, fills = _b2.fills, fillOpacity = _b2.fillOpacity, strokeOpacity = _b2.strokeOpacity, strokeWidth = _b2.strokeWidth, shadow = _b2.shadow;
            {
              points = fill.datum.points;
              fill.fill = fills[seriesIdx % fills.length];
              fill.fillOpacity = fillOpacity;
              fill.strokeOpacity = strokeOpacity;
              fill.strokeWidth = strokeWidth;
              fill.lineDash = this.lineDash;
              fill.lineDashOffset = this.lineDashOffset;
              fill.fillShadow = shadow;
              path = fill.path;
              path.clear({ trackChanges: true });
              i = 0;
              try {
                for (points_1 = __values24(points), points_1_1 = points_1.next(); !points_1_1.done; points_1_1 = points_1.next()) {
                  p = points_1_1.value;
                  if (i++ > 0) {
                    path.lineTo(p.x, p.y);
                  } else {
                    path.moveTo(p.x, p.y);
                  }
                }
              } catch (e_1_1) {
                e_1 = { error: e_1_1 };
              } finally {
                try {
                  if (points_1_1 && !points_1_1.done && (_d2 = points_1.return))
                    _d2.call(points_1);
                } finally {
                  if (e_1)
                    throw e_1.error;
                }
              }
              path.closePath();
              fill.checkPathDirty();
            }
            {
              _c2 = stroke.datum, points = _c2.points, yValues = _c2.yValues;
              moveTo_1 = true;
              stroke.stroke = strokes[seriesIdx % strokes.length];
              stroke.strokeWidth = this.getStrokeWidth(this.strokeWidth, { itemId });
              stroke.strokeOpacity = strokeOpacity;
              stroke.lineDash = this.lineDash;
              stroke.lineDashOffset = this.lineDashOffset;
              path = stroke.path;
              path.clear({ trackChanges: true });
              i = 0;
              try {
                for (points_2 = __values24(points), points_2_1 = points_2.next(); !points_2_1.done; points_2_1 = points_2.next()) {
                  p = points_2_1.value;
                  if (yValues[i++] === void 0) {
                    moveTo_1 = true;
                  } else if (moveTo_1) {
                    path.moveTo(p.x, p.y);
                    moveTo_1 = false;
                  } else {
                    path.lineTo(p.x, p.y);
                  }
                }
              } catch (e_2_1) {
                e_2 = { error: e_2_1 };
              } finally {
                try {
                  if (points_2_1 && !points_2_1.done && (_e = points_2.return))
                    _e.call(points_2);
                } finally {
                  if (e_2)
                    throw e_2.error;
                }
              }
              stroke.checkPathDirty();
            }
            return [
              2
              /*return*/
            ];
          });
        });
      };
      AreaSeries2.prototype.markerFactory = function() {
        var shape = this.marker.shape;
        var MarkerShape = getMarker(shape);
        return new MarkerShape();
      };
      AreaSeries2.prototype.updateMarkerSelection = function(opts2) {
        return __awaiter9(this, void 0, void 0, function() {
          var nodeData, markerSelection, enabled, data;
          return __generator9(this, function(_a5) {
            nodeData = opts2.nodeData, markerSelection = opts2.markerSelection;
            enabled = this.marker.enabled;
            data = enabled && nodeData ? nodeData : [];
            if (this.marker.isDirty()) {
              markerSelection.clear();
            }
            return [2, markerSelection.update(data, function(marker) {
              marker.tag = AreaSeriesTag.Marker;
            })];
          });
        });
      };
      AreaSeries2.prototype.updateMarkerNodes = function(opts2) {
        return __awaiter9(this, void 0, void 0, function() {
          var markerSelection, isDatumHighlighted, _a5, seriesId, xKey, marker, seriesItemEnabled, yKeys, fills, strokes, seriesFillOpacity, _b2, markerFillOpacity, strokeOpacity, _c2, highlightedFill, _d2, highlightFillOpacity, highlightedStroke, highlightedDatumStrokeWidth, size, formatter, markerStrokeWidth, customMarker;
          return __generator9(this, function(_e) {
            markerSelection = opts2.markerSelection, isDatumHighlighted = opts2.isHighlight;
            _a5 = this, seriesId = _a5.id, xKey = _a5.xKey, marker = _a5.marker, seriesItemEnabled = _a5.seriesItemEnabled, yKeys = _a5.yKeys, fills = _a5.fills, strokes = _a5.strokes, seriesFillOpacity = _a5.fillOpacity, _b2 = _a5.marker.fillOpacity, markerFillOpacity = _b2 === void 0 ? seriesFillOpacity : _b2, strokeOpacity = _a5.strokeOpacity, _c2 = _a5.highlightStyle.item, highlightedFill = _c2.fill, _d2 = _c2.fillOpacity, highlightFillOpacity = _d2 === void 0 ? markerFillOpacity : _d2, highlightedStroke = _c2.stroke, highlightedDatumStrokeWidth = _c2.strokeWidth;
            size = marker.size, formatter = marker.formatter;
            markerStrokeWidth = marker.strokeWidth !== void 0 ? marker.strokeWidth : this.strokeWidth;
            customMarker = typeof marker.shape === "function";
            markerSelection.each(function(node, datum) {
              var _a6, _b3;
              var yKeyIndex = yKeys.indexOf(datum.yKey);
              var fill = isDatumHighlighted && highlightedFill !== void 0 ? highlightedFill : marker.fill || fills[yKeyIndex % fills.length];
              var fillOpacity = isDatumHighlighted ? highlightFillOpacity : markerFillOpacity;
              var stroke = isDatumHighlighted && highlightedStroke !== void 0 ? highlightedStroke : marker.stroke || strokes[yKeyIndex % fills.length];
              var strokeWidth = isDatumHighlighted && highlightedDatumStrokeWidth !== void 0 ? highlightedDatumStrokeWidth : markerStrokeWidth;
              var format2 = void 0;
              if (formatter) {
                format2 = formatter({
                  datum: datum.datum,
                  xKey,
                  yKey: datum.yKey,
                  fill,
                  stroke,
                  strokeWidth,
                  size,
                  highlighted: isDatumHighlighted,
                  seriesId
                });
              }
              node.fill = format2 && format2.fill || fill;
              node.stroke = format2 && format2.stroke || stroke;
              node.strokeWidth = format2 && format2.strokeWidth !== void 0 ? format2.strokeWidth : strokeWidth;
              node.fillOpacity = fillOpacity !== null && fillOpacity !== void 0 ? fillOpacity : 1;
              node.strokeOpacity = (_b3 = (_a6 = marker.strokeOpacity) !== null && _a6 !== void 0 ? _a6 : strokeOpacity) !== null && _b3 !== void 0 ? _b3 : 1;
              node.size = format2 && format2.size !== void 0 ? format2.size : size;
              node.translationX = datum.point.x;
              node.translationY = datum.point.y;
              node.visible = node.size > 0 && !!seriesItemEnabled.get(datum.yKey) && !isNaN(datum.point.x) && !isNaN(datum.point.y);
              if (!customMarker || node.dirtyPath) {
                return;
              }
              node.path.clear({ trackChanges: true });
              node.updatePath();
              node.checkPathDirty();
            });
            if (!isDatumHighlighted) {
              this.marker.markClean();
            }
            return [
              2
              /*return*/
            ];
          });
        });
      };
      AreaSeries2.prototype.updateLabelSelection = function(opts2) {
        return __awaiter9(this, void 0, void 0, function() {
          var labelData, labelSelection;
          return __generator9(this, function(_a5) {
            labelData = opts2.labelData, labelSelection = opts2.labelSelection;
            return [2, labelSelection.update(labelData, function(text) {
              text.tag = AreaSeriesTag.Label;
            })];
          });
        });
      };
      AreaSeries2.prototype.updateLabelNodes = function(opts2) {
        return __awaiter9(this, void 0, void 0, function() {
          var labelSelection, _a5, labelEnabled, fontStyle, fontWeight, fontSize, fontFamily, color;
          return __generator9(this, function(_b2) {
            labelSelection = opts2.labelSelection;
            _a5 = this.label, labelEnabled = _a5.enabled, fontStyle = _a5.fontStyle, fontWeight = _a5.fontWeight, fontSize = _a5.fontSize, fontFamily = _a5.fontFamily, color = _a5.color;
            labelSelection.each(function(text, datum) {
              var point = datum.point, label = datum.label;
              if (label && labelEnabled) {
                text.fontStyle = fontStyle;
                text.fontWeight = fontWeight;
                text.fontSize = fontSize;
                text.fontFamily = fontFamily;
                text.textAlign = label.textAlign;
                text.textBaseline = label.textBaseline;
                text.text = label.text;
                text.x = point.x;
                text.y = point.y - 10;
                text.fill = color;
                text.visible = true;
              } else {
                text.visible = false;
              }
            });
            return [
              2
              /*return*/
            ];
          });
        });
      };
      AreaSeries2.prototype.getNodeClickEvent = function(event, datum) {
        return new CartesianSeriesNodeClickEvent(this.xKey, datum.yKey, event, datum, this);
      };
      AreaSeries2.prototype.getNodeDoubleClickEvent = function(event, datum) {
        return new CartesianSeriesNodeDoubleClickEvent(this.xKey, datum.yKey, event, datum, this);
      };
      AreaSeries2.prototype.getTooltipHtml = function(nodeDatum) {
        var _a5, _b2, _c2;
        var _d2 = this, xKey = _d2.xKey, seriesId = _d2.id;
        var yKey = nodeDatum.yKey;
        var yKeyDataIndex = (_a5 = this.dataModel) === null || _a5 === void 0 ? void 0 : _a5.resolveProcessedDataIndex(yKey);
        if (!(xKey && yKey) || !yKeyDataIndex) {
          return "";
        }
        var datum = nodeDatum.datum;
        var xValue = datum[xKey];
        var yValue = datum[yKey];
        var _e = this, xAxis = _e.xAxis, yAxis = _e.yAxis, yKeys = _e.yKeys;
        if (!(xAxis && yAxis && isNumber(yValue)) || !yKeyDataIndex) {
          return "";
        }
        var _f = this, xName = _f.xName, yNames = _f.yNames, fills = _f.fills, strokes = _f.strokes, tooltip = _f.tooltip, marker = _f.marker;
        var size = marker.size, markerFormatter = marker.formatter, markerStrokeWidth = marker.strokeWidth, markerFill = marker.fill, markerStroke = marker.stroke;
        var xString = xAxis.formatDatum(xValue);
        var yString = yAxis.formatDatum(yValue);
        var yKeyIndex = yKeys.indexOf(yKey);
        var processedYValue = (_c2 = (_b2 = this.processedData) === null || _b2 === void 0 ? void 0 : _b2.data[nodeDatum.index]) === null || _c2 === void 0 ? void 0 : _c2.values[0][yKeyDataIndex === null || yKeyDataIndex === void 0 ? void 0 : yKeyDataIndex.index];
        var yName = yNames[yKeyIndex];
        var title = sanitizeHtml(yName);
        var content = sanitizeHtml(xString + ": " + yString);
        var strokeWidth = markerStrokeWidth !== void 0 ? markerStrokeWidth : this.strokeWidth;
        var fill = markerFill || fills[yKeyIndex % fills.length];
        var stroke = markerStroke || strokes[yKeyIndex % fills.length];
        var format2 = void 0;
        if (markerFormatter) {
          format2 = markerFormatter({
            datum,
            xKey,
            yKey,
            fill,
            stroke,
            strokeWidth,
            size,
            highlighted: false,
            seriesId
          });
        }
        var color = format2 && format2.fill || fill;
        var defaults = {
          title,
          backgroundColor: color,
          content
        };
        var tooltipRenderer = tooltip.renderer, tooltipFormat = tooltip.format;
        if (tooltipFormat || tooltipRenderer) {
          var params = {
            datum,
            xKey,
            xName,
            xValue,
            yKey,
            yValue,
            processedYValue,
            yName,
            color,
            title,
            seriesId
          };
          if (tooltipFormat) {
            return toTooltipHtml({
              content: interpolate(tooltipFormat, params)
            }, defaults);
          }
          if (tooltipRenderer) {
            return toTooltipHtml(tooltipRenderer(params), defaults);
          }
        }
        return toTooltipHtml(defaults);
      };
      AreaSeries2.prototype.getLegendData = function() {
        var _a5, _b2;
        var _c2 = this, data = _c2.data, id = _c2.id, xKey = _c2.xKey, yKeys = _c2.yKeys, yNames = _c2.yNames, seriesItemEnabled = _c2.seriesItemEnabled, marker = _c2.marker, fills = _c2.fills, strokes = _c2.strokes, fillOpacity = _c2.fillOpacity, strokeOpacity = _c2.strokeOpacity;
        if (!data || !data.length || !xKey || !yKeys.length) {
          return [];
        }
        var legendData = [];
        for (var index = yKeys.length - 1; index >= 0; index--) {
          var yKey = yKeys[index];
          legendData.push({
            id,
            itemId: yKey,
            seriesId: id,
            enabled: seriesItemEnabled.get(yKey) || false,
            label: {
              text: yNames[index] || yKeys[index]
            },
            marker: {
              shape: marker.shape,
              fill: marker.fill || fills[index % fills.length],
              stroke: marker.stroke || strokes[index % strokes.length],
              fillOpacity: (_a5 = marker.fillOpacity) !== null && _a5 !== void 0 ? _a5 : fillOpacity,
              strokeOpacity: (_b2 = marker.strokeOpacity) !== null && _b2 !== void 0 ? _b2 : strokeOpacity
            }
          });
        }
        return legendData;
      };
      AreaSeries2.prototype.isLabelEnabled = function() {
        return this.label.enabled;
      };
      AreaSeries2.className = "AreaSeries";
      AreaSeries2.type = "area";
      __decorate30([
        Validate(COLOR_STRING_ARRAY)
      ], AreaSeries2.prototype, "fills", void 0);
      __decorate30([
        Validate(COLOR_STRING_ARRAY)
      ], AreaSeries2.prototype, "strokes", void 0);
      __decorate30([
        Validate(NUMBER(0, 1))
      ], AreaSeries2.prototype, "fillOpacity", void 0);
      __decorate30([
        Validate(NUMBER(0, 1))
      ], AreaSeries2.prototype, "strokeOpacity", void 0);
      __decorate30([
        Validate(OPT_LINE_DASH)
      ], AreaSeries2.prototype, "lineDash", void 0);
      __decorate30([
        Validate(NUMBER(0))
      ], AreaSeries2.prototype, "lineDashOffset", void 0);
      __decorate30([
        Validate(STRING)
      ], AreaSeries2.prototype, "_xKey", void 0);
      __decorate30([
        Validate(STRING)
      ], AreaSeries2.prototype, "xName", void 0);
      __decorate30([
        Validate(STRING_ARRAY)
      ], AreaSeries2.prototype, "_yKeys", void 0);
      __decorate30([
        Validate(BOOLEAN_ARRAY)
      ], AreaSeries2.prototype, "_visibles", void 0);
      __decorate30([
        Validate(STRING_ARRAY)
      ], AreaSeries2.prototype, "yNames", void 0);
      __decorate30([
        Validate(OPT_NUMBER())
      ], AreaSeries2.prototype, "_normalizedTo", void 0);
      __decorate30([
        Validate(NUMBER(0))
      ], AreaSeries2.prototype, "strokeWidth", void 0);
      return AreaSeries2;
    }(CartesianSeries);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/scene/shape/rect.js
var __extends41, __decorate31, Rect;
var init_rect = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/scene/shape/rect.js"() {
    init_path();
    init_bbox();
    init_shape();
    init_path2D();
    __extends41 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate31 = function(decorators, target2, key2, desc) {
      var c = arguments.length, r = c < 3 ? target2 : desc === null ? desc = Object.getOwnPropertyDescriptor(target2, key2) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target2, key2, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target2, key2, r) : d(target2, key2)) || r;
      return c > 3 && r && Object.defineProperty(target2, key2, r), r;
    };
    Rect = /** @class */
    function(_super) {
      __extends41(Rect2, _super);
      function Rect2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.borderPath = new Path2D();
        _this.x = 0;
        _this.y = 0;
        _this.width = 10;
        _this.height = 10;
        _this.radius = 0;
        _this.crisp = false;
        _this.lastUpdatePathStrokeWidth = Shape.defaultStyles.strokeWidth;
        _this.effectiveStrokeWidth = Shape.defaultStyles.strokeWidth;
        _this.microPixelEffectOpacity = 1;
        return _this;
      }
      Rect2.prototype.isDirtyPath = function() {
        var _a5;
        if (this.lastUpdatePathStrokeWidth !== this.strokeWidth) {
          return true;
        }
        if (this.path.isDirty() || this.borderPath.isDirty() || ((_a5 = this.clipPath) === null || _a5 === void 0 ? void 0 : _a5.isDirty())) {
          return true;
        }
        return false;
      };
      Rect2.prototype.updatePath = function() {
        var _a5, _b2, _c2;
        var _d2 = this, path = _d2.path, borderPath = _d2.borderPath, crisp = _d2.crisp;
        var _e = this, x = _e.x, y = _e.y, w = _e.width, h = _e.height, strokeWidth = _e.strokeWidth;
        var pixelRatio = (_b2 = (_a5 = this.layerManager) === null || _a5 === void 0 ? void 0 : _a5.canvas.pixelRatio) !== null && _b2 !== void 0 ? _b2 : 1;
        var pixelSize = 1 / pixelRatio;
        var microPixelEffectOpacity = 1;
        path.clear({ trackChanges: true });
        borderPath.clear({ trackChanges: true });
        if (crisp) {
          if (w <= pixelSize) {
            microPixelEffectOpacity *= w / pixelSize;
          }
          if (h <= pixelSize) {
            microPixelEffectOpacity *= h / pixelSize;
          }
          w = this.align(x, w);
          h = this.align(y, h);
          x = this.align(x);
          y = this.align(y);
        }
        if (strokeWidth) {
          if (w < pixelSize) {
            var lx = x + pixelSize / 2;
            borderPath.moveTo(lx, y);
            borderPath.lineTo(lx, y + h);
            strokeWidth = pixelSize;
            this.borderClipPath = void 0;
          } else if (h < pixelSize) {
            var ly = y + pixelSize / 2;
            borderPath.moveTo(x, ly);
            borderPath.lineTo(x + w, ly);
            strokeWidth = pixelSize;
            this.borderClipPath = void 0;
          } else if (strokeWidth < w && strokeWidth < h) {
            var halfStrokeWidth = strokeWidth / 2;
            x += halfStrokeWidth;
            y += halfStrokeWidth;
            w -= strokeWidth;
            h -= strokeWidth;
            this.borderClipPath = void 0;
            path.rect(x, y, w, h);
            borderPath.rect(x, y, w, h);
          } else {
            this.borderClipPath = (_c2 = this.borderClipPath) !== null && _c2 !== void 0 ? _c2 : new Path2D();
            this.borderClipPath.clear({ trackChanges: true });
            this.borderClipPath.rect(x, y, w, h);
            borderPath.rect(x, y, w, h);
          }
        } else {
          this.borderClipPath = void 0;
          path.rect(x, y, w, h);
        }
        this.effectiveStrokeWidth = strokeWidth;
        this.lastUpdatePathStrokeWidth = strokeWidth;
        this.microPixelEffectOpacity = microPixelEffectOpacity;
      };
      Rect2.prototype.computeBBox = function() {
        var _a5 = this, x = _a5.x, y = _a5.y, width = _a5.width, height = _a5.height;
        return new BBox(x, y, width, height);
      };
      Rect2.prototype.isPointInPath = function(x, y) {
        var point = this.transformPoint(x, y);
        var bbox = this.computeBBox();
        return bbox.containsPoint(point.x, point.y);
      };
      Rect2.prototype.applyFillAlpha = function(ctx) {
        var _a5 = this, fillOpacity = _a5.fillOpacity, microPixelEffectOpacity = _a5.microPixelEffectOpacity, opacity = _a5.opacity;
        ctx.globalAlpha = opacity * fillOpacity * microPixelEffectOpacity;
      };
      Rect2.prototype.renderStroke = function(ctx) {
        var _a5 = this, stroke = _a5.stroke, effectiveStrokeWidth = _a5.effectiveStrokeWidth, borderPath = _a5.borderPath, borderClipPath = _a5.borderClipPath, opacity = _a5.opacity, microPixelEffectOpacity = _a5.microPixelEffectOpacity;
        var borderActive = !!stroke && !!effectiveStrokeWidth;
        if (borderActive) {
          var _b2 = this, strokeOpacity = _b2.strokeOpacity, lineDash = _b2.lineDash, lineDashOffset = _b2.lineDashOffset, lineCap = _b2.lineCap, lineJoin = _b2.lineJoin;
          if (borderClipPath) {
            borderClipPath.draw(ctx);
            ctx.clip();
          }
          borderPath.draw(ctx);
          var globalAlpha = ctx.globalAlpha;
          ctx.strokeStyle = stroke;
          ctx.globalAlpha = globalAlpha * opacity * strokeOpacity * microPixelEffectOpacity;
          ctx.lineWidth = effectiveStrokeWidth;
          if (lineDash) {
            ctx.setLineDash(lineDash);
          }
          if (lineDashOffset) {
            ctx.lineDashOffset = lineDashOffset;
          }
          if (lineCap) {
            ctx.lineCap = lineCap;
          }
          if (lineJoin) {
            ctx.lineJoin = lineJoin;
          }
          ctx.stroke();
          ctx.globalAlpha = globalAlpha;
        }
      };
      Rect2.className = "Rect";
      __decorate31([
        ScenePathChangeDetection()
      ], Rect2.prototype, "x", void 0);
      __decorate31([
        ScenePathChangeDetection()
      ], Rect2.prototype, "y", void 0);
      __decorate31([
        ScenePathChangeDetection()
      ], Rect2.prototype, "width", void 0);
      __decorate31([
        ScenePathChangeDetection()
      ], Rect2.prototype, "height", void 0);
      __decorate31([
        ScenePathChangeDetection()
      ], Rect2.prototype, "radius", void 0);
      __decorate31([
        ScenePathChangeDetection()
      ], Rect2.prototype, "crisp", void 0);
      return Rect2;
    }(Path);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/series/cartesian/barSeries.js
function is2dArray(array) {
  return array.length > 0 && Array.isArray(array[0]);
}
var __extends42, __decorate32, __awaiter10, __generator10, __read33, __spread20, BAR_LABEL_PLACEMENTS, OPT_BAR_LABEL_PLACEMENT, BarSeriesNodeTag, BarSeriesLabel, BarSeriesTooltip, BarSeries;
var init_barSeries = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/series/cartesian/barSeries.js"() {
    init_rect();
    init_bandScale();
    init_series();
    init_label();
    init_node();
    init_cartesianSeries();
    init_chartAxis();
    init_chartAxisDirection();
    init_tooltip();
    init_array();
    init_equal();
    init_sanitize();
    init_value();
    init_continuousScale();
    init_validation();
    init_categoryAxis();
    init_groupedCategoryAxis();
    init_logAxis();
    init_dataModel();
    __extends42 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate32 = function(decorators, target2, key2, desc) {
      var c = arguments.length, r = c < 3 ? target2 : desc === null ? desc = Object.getOwnPropertyDescriptor(target2, key2) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target2, key2, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target2, key2, r) : d(target2, key2)) || r;
      return c > 3 && r && Object.defineProperty(target2, key2, r), r;
    };
    __awaiter10 = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __generator10 = function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    __read33 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread20 = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read33(arguments[i]));
      return ar;
    };
    BAR_LABEL_PLACEMENTS = ["inside", "outside"];
    OPT_BAR_LABEL_PLACEMENT = function(v, ctx) {
      return OPTIONAL(v, ctx, function(v2) {
        return BAR_LABEL_PLACEMENTS.includes(v2);
      });
    };
    (function(BarSeriesNodeTag2) {
      BarSeriesNodeTag2[BarSeriesNodeTag2["Bar"] = 0] = "Bar";
      BarSeriesNodeTag2[BarSeriesNodeTag2["Label"] = 1] = "Label";
    })(BarSeriesNodeTag || (BarSeriesNodeTag = {}));
    BarSeriesLabel = /** @class */
    function(_super) {
      __extends42(BarSeriesLabel2, _super);
      function BarSeriesLabel2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.formatter = void 0;
        _this.placement = "inside";
        return _this;
      }
      __decorate32([
        Validate(OPT_FUNCTION)
      ], BarSeriesLabel2.prototype, "formatter", void 0);
      __decorate32([
        Validate(OPT_BAR_LABEL_PLACEMENT)
      ], BarSeriesLabel2.prototype, "placement", void 0);
      return BarSeriesLabel2;
    }(Label);
    BarSeriesTooltip = /** @class */
    function(_super) {
      __extends42(BarSeriesTooltip2, _super);
      function BarSeriesTooltip2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.renderer = void 0;
        return _this;
      }
      __decorate32([
        Validate(OPT_FUNCTION)
      ], BarSeriesTooltip2.prototype, "renderer", void 0);
      return BarSeriesTooltip2;
    }(SeriesTooltip);
    BarSeries = /** @class */
    function(_super) {
      __extends42(BarSeries2, _super);
      function BarSeries2() {
        var _a5;
        var _this = _super.call(this, {
          pickModes: [SeriesNodePickMode.EXACT_SHAPE_MATCH],
          pathsPerSeries: 0,
          directionKeys: (_a5 = {}, _a5[ChartAxisDirection.X] = ["xKey"], _a5[ChartAxisDirection.Y] = ["yKeys"], _a5)
        }) || this;
        _this.label = new BarSeriesLabel();
        _this.tooltip = new BarSeriesTooltip();
        _this.flipXY = false;
        _this.fills = ["#c16068", "#a2bf8a", "#ebcc87", "#80a0c3", "#b58dae", "#85c0d1"];
        _this.strokes = ["#874349", "#718661", "#a48f5f", "#5a7088", "#7f637a", "#5d8692"];
        _this.fillOpacity = 1;
        _this.strokeOpacity = 1;
        _this.lineDash = [0];
        _this.lineDashOffset = 0;
        _this.formatter = void 0;
        _this.groupScale = new BandScale();
        _this._xKey = "";
        _this.xName = "";
        _this.cumYKeyCount = [];
        _this.flatYKeys = void 0;
        _this.hideInLegend = [];
        _this.yKeys = [];
        _this.yKeysCache = [];
        _this.visibles = [];
        _this._grouped = false;
        _this.stackGroups = {};
        _this.yNames = {};
        _this.strokeWidth = 1;
        _this.shadow = void 0;
        _this.smallestDataInterval = void 0;
        _this.label.enabled = false;
        return _this;
      }
      BarSeries2.prototype.resolveKeyDirection = function(direction) {
        return this.flipXY ? flipChartAxisDirection(direction) : direction;
      };
      Object.defineProperty(BarSeries2.prototype, "xKey", {
        get: function() {
          return this._xKey;
        },
        set: function(value) {
          this._xKey = value;
          this.processedData = void 0;
        },
        enumerable: false,
        configurable: true
      });
      BarSeries2.prototype.processYKeys = function() {
        var _this = this;
        var yKeys = this.yKeys;
        var flatYKeys = void 0;
        if (!is2dArray(yKeys)) {
          flatYKeys = yKeys;
          yKeys = this.grouped ? flatYKeys.map(function(k) {
            return [k];
          }) : [flatYKeys];
        }
        var stackGroups = Object.values(this.stackGroups);
        if (stackGroups.length > 0) {
          var flattenKeys = function(keys) {
            return keys.reduce(function(res, k) {
              return res.concat(k);
            }, []);
          };
          var flatKeys_1 = flattenKeys(yKeys);
          var keysInStacks_1 = new Set(flattenKeys(stackGroups));
          var ungroupedKeys = flatKeys_1.filter(function(k) {
            return !keysInStacks_1.has(k);
          });
          yKeys = stackGroups.map(function(keys) {
            return keys;
          });
          if (ungroupedKeys.length > 0) {
            yKeys.push(ungroupedKeys);
          }
          var indexMap = function(items) {
            return items.reduce(function(map, key2, index) {
              return map.set(key2, index);
            }, /* @__PURE__ */ new Map());
          };
          var newKeys = flattenKeys(yKeys);
          var newKeysIndices_1 = indexMap(newKeys);
          var sort = function(items) {
            var result = Array.from({ length: items.length });
            items.forEach(function(item, index) {
              var key2 = flatKeys_1[index];
              var newIndex = newKeysIndices_1.get(key2);
              result[newIndex] = item;
            });
            return result;
          };
          this.fills = sort(this.fills);
          this.strokes = sort(this.strokes);
          this.visibles = sort(this.visibles);
        }
        if (!areArrayItemsStrictlyEqual(this.yKeysCache, yKeys)) {
          this.flatYKeys = flatYKeys ? flatYKeys : void 0;
          this.yKeys = yKeys;
          var prevYKeyCount_1 = 0;
          this.cumYKeyCount = [];
          var visibleStacks_1 = [];
          yKeys.forEach(function(stack, index) {
            if (stack.length > 0) {
              visibleStacks_1.push(String(index));
            }
            _this.cumYKeyCount.push(prevYKeyCount_1);
            prevYKeyCount_1 += stack.length;
          });
          this.processSeriesItemEnabled();
          var groupScale = this.groupScale;
          groupScale.domain = visibleStacks_1;
        }
        this.yKeysCache = yKeys;
      };
      BarSeries2.prototype.processSeriesItemEnabled = function() {
        var seriesItemEnabled = this.seriesItemEnabled;
        var flattenFn = function(r, n) {
          return r.concat.apply(r, __spread20(Array.isArray(n) ? n : [n]));
        };
        var visibles = this.visibles.reduce(flattenFn, []);
        seriesItemEnabled.clear();
        var visiblesIdx = 0;
        this.yKeys.forEach(function(stack) {
          stack.forEach(function(yKey) {
            var _a5;
            return seriesItemEnabled.set(yKey, (_a5 = visibles[visiblesIdx++]) !== null && _a5 !== void 0 ? _a5 : true);
          });
        });
      };
      Object.defineProperty(BarSeries2.prototype, "grouped", {
        get: function() {
          return this._grouped;
        },
        set: function(value) {
          this._grouped = value;
        },
        enumerable: false,
        configurable: true
      });
      BarSeries2.prototype.getStackGroup = function(yKey) {
        var _a5;
        var stackGroups = this.stackGroups;
        return (_a5 = Object.entries(stackGroups).find(function(_a6) {
          var _b2 = __read33(_a6, 2), _ = _b2[0], keys = _b2[1];
          return keys.includes(yKey);
        })) === null || _a5 === void 0 ? void 0 : _a5[0];
      };
      BarSeries2.prototype.processYNames = function() {
        var values = this.yNames;
        if (Array.isArray(values) && this.flatYKeys) {
          var map_1 = {};
          this.flatYKeys.forEach(function(k, i) {
            map_1[k] = values[i];
          });
          this.yNames = map_1;
        }
      };
      Object.defineProperty(BarSeries2.prototype, "normalizedTo", {
        get: function() {
          return this._normalizedTo;
        },
        set: function(value) {
          var absValue = value ? Math.abs(value) : void 0;
          this._normalizedTo = absValue;
        },
        enumerable: false,
        configurable: true
      });
      BarSeries2.prototype.processData = function() {
        var _a5, _b2, _c2, _d2, _e;
        return __awaiter10(this, void 0, void 0, function() {
          var _f, xKey, seriesItemEnabled, normalizedTo, _g, data, isContinuousX, isContinuousY, activeSeriesItems, activeStacks, normaliseTo;
          return __generator10(this, function(_h) {
            this.processYKeys();
            this.processYNames();
            _f = this, xKey = _f.xKey, seriesItemEnabled = _f.seriesItemEnabled, normalizedTo = _f.normalizedTo, _g = _f.data, data = _g === void 0 ? [] : _g;
            isContinuousX = ((_a5 = this.getCategoryAxis()) === null || _a5 === void 0 ? void 0 : _a5.scale) instanceof ContinuousScale;
            isContinuousY = ((_b2 = this.getValueAxis()) === null || _b2 === void 0 ? void 0 : _b2.scale) instanceof ContinuousScale;
            activeSeriesItems = __spread20(seriesItemEnabled.entries()).filter(function(_a6) {
              var _b3 = __read33(_a6, 2), enabled = _b3[1];
              return enabled;
            }).map(function(_a6) {
              var _b3 = __read33(_a6, 1), yKey = _b3[0];
              return yKey;
            });
            activeStacks = this.yKeys.map(function(stack) {
              return stack.filter(function(key2) {
                return seriesItemEnabled.get(key2);
              });
            }).filter(function(stack) {
              return stack.length > 0;
            });
            normaliseTo = normalizedTo && isFinite(normalizedTo) ? normalizedTo : void 0;
            this.dataModel = new DataModel({
              props: __spread20([
                keyProperty(xKey, isContinuousX)
              ], activeSeriesItems.map(function(yKey) {
                return valueProperty(yKey, isContinuousY, { invalidValue: null });
              }), activeStacks.map(function(stack) {
                return sumProperties(stack);
              }), isContinuousX ? [SMALLEST_KEY_INTERVAL] : [], [
                SUM_VALUE_EXTENT
              ]),
              groupByKeys: true,
              dataVisible: this.visible && activeSeriesItems.length > 0,
              normaliseTo
            });
            this.processedData = this.dataModel.processData(data);
            this.smallestDataInterval = {
              x: (_e = (_d2 = (_c2 = this.processedData) === null || _c2 === void 0 ? void 0 : _c2.reduced) === null || _d2 === void 0 ? void 0 : _d2[SMALLEST_KEY_INTERVAL.property]) !== null && _e !== void 0 ? _e : Infinity,
              y: Infinity
            };
            return [
              2
              /*return*/
            ];
          });
        });
      };
      BarSeries2.prototype.getDomain = function(direction) {
        var _a5 = this, flipXY = _a5.flipXY, processedData = _a5.processedData;
        if (!processedData)
          return [];
        if (flipXY) {
          direction = flipChartAxisDirection(direction);
        }
        var _b2 = processedData, _c2 = __read33(_b2.defs.keys, 1), keyDef = _c2[0], _d2 = _b2.domain, _e = __read33(_d2.keys, 1), keys = _e[0], _f = __read33(_d2.values, 1), yExtent = _f[0], _g = _b2.reduced, _h = _g === void 0 ? {} : _g, _j = SMALLEST_KEY_INTERVAL.property, smallestX = _h[_j], _k = SUM_VALUE_EXTENT.property, ySumExtent = _h[_k];
        if (direction === ChartAxisDirection.X) {
          if (keyDef.valueType === "category") {
            return keys;
          }
          var keysExtent = extent(keys) || [NaN, NaN];
          if (flipXY) {
            return [keysExtent[0] + -smallestX, keysExtent[1]];
          }
          return [keysExtent[0], keysExtent[1] + smallestX];
        } else if (this.getValueAxis() instanceof LogAxis) {
          return this.fixNumericExtent(yExtent);
        } else {
          return this.fixNumericExtent(ySumExtent);
        }
      };
      BarSeries2.prototype.getNodeClickEvent = function(event, datum) {
        return new CartesianSeriesNodeClickEvent(this.xKey, datum.yKey, event, datum, this);
      };
      BarSeries2.prototype.getNodeDoubleClickEvent = function(event, datum) {
        return new CartesianSeriesNodeDoubleClickEvent(this.xKey, datum.yKey, event, datum, this);
      };
      BarSeries2.prototype.getCategoryAxis = function() {
        return this.flipXY ? this.yAxis : this.xAxis;
      };
      BarSeries2.prototype.getValueAxis = function() {
        return this.flipXY ? this.xAxis : this.yAxis;
      };
      BarSeries2.prototype.calculateStep = function(range2) {
        var _a5;
        var smallestInterval = this.smallestDataInterval;
        var xAxis = this.getCategoryAxis();
        if (!xAxis) {
          return;
        }
        var domainLength = xAxis.dataDomain[1] - xAxis.dataDomain[0];
        var intervals = domainLength / ((_a5 = smallestInterval === null || smallestInterval === void 0 ? void 0 : smallestInterval.x) !== null && _a5 !== void 0 ? _a5 : 1) + 1;
        var maxBands = Math.floor(range2);
        var bands = Math.min(intervals, maxBands);
        var step = range2 / Math.max(1, bands);
        return step;
      };
      BarSeries2.prototype.createNodeData = function() {
        return __awaiter10(this, void 0, void 0, function() {
          var _a5, data, visible, xAxis, yAxis, xScale, yScale, _b2, groupScale, yKeys, xKey, cumYKeyCount, fills, strokes, strokeWidth, seriesItemEnabled, label, flipXY, seriesId, processedData, labelFontStyle, labelFontWeight, labelFontSize, labelFontFamily, labelColor, labelFormatter, labelPlacement, xBandWidth, availableRange, step, barWidth, contexts;
          var _this = this;
          return __generator10(this, function(_c2) {
            _a5 = this, data = _a5.data, visible = _a5.visible;
            xAxis = this.getCategoryAxis();
            yAxis = this.getValueAxis();
            if (!(data && visible && xAxis && yAxis)) {
              return [2, []];
            }
            xScale = xAxis.scale;
            yScale = yAxis.scale;
            _b2 = this, groupScale = _b2.groupScale, yKeys = _b2.yKeys, xKey = _b2.xKey, cumYKeyCount = _b2.cumYKeyCount, fills = _b2.fills, strokes = _b2.strokes, strokeWidth = _b2.strokeWidth, seriesItemEnabled = _b2.seriesItemEnabled, label = _b2.label, flipXY = _b2.flipXY, seriesId = _b2.id, processedData = _b2.processedData;
            labelFontStyle = label.fontStyle, labelFontWeight = label.fontWeight, labelFontSize = label.fontSize, labelFontFamily = label.fontFamily, labelColor = label.color, labelFormatter = label.formatter, labelPlacement = label.placement;
            xBandWidth = xScale.bandwidth;
            if (xScale instanceof ContinuousScale) {
              availableRange = Math.max(xAxis.range[0], xAxis.range[1]);
              step = this.calculateStep(availableRange);
              xBandWidth = step;
            }
            groupScale.range = [0, xBandWidth];
            if (xAxis instanceof CategoryAxis) {
              groupScale.padding = xAxis.groupPaddingInner;
            } else if (xAxis instanceof GroupedCategoryAxis) {
              groupScale.padding = 0.1;
            } else {
              groupScale.padding = 0;
            }
            if (groupScale.padding === 0) {
              groupScale.round = false;
            } else {
              groupScale.round = true;
            }
            barWidth = groupScale.bandwidth >= 1 ? (
              // Pixel-rounded value for low-volume bar charts.
              groupScale.bandwidth
            ) : (
              // Handle high-volume bar charts gracefully.
              groupScale.rawBandwidth
            );
            contexts = [];
            processedData === null || processedData === void 0 ? void 0 : processedData.data.forEach(function(_a6, dataIndex) {
              var _b3, _c3, _d2, _e, _f;
              var _g;
              var keys = _a6.keys, seriesDatum = _a6.datum, values = _a6.values;
              var x = xScale.convert(keys[0]);
              for (var stackIndex = 0; stackIndex < ((_b3 = yKeys === null || yKeys === void 0 ? void 0 : yKeys.length) !== null && _b3 !== void 0 ? _b3 : 0); stackIndex++) {
                var stackYKeys = (_c3 = yKeys === null || yKeys === void 0 ? void 0 : yKeys[stackIndex]) !== null && _c3 !== void 0 ? _c3 : [];
                (_d2 = contexts[stackIndex]) !== null && _d2 !== void 0 ? _d2 : contexts[stackIndex] = [];
                var prevMinY = 0;
                var prevMaxY = 0;
                for (var levelIndex = 0; levelIndex < stackYKeys.length; levelIndex++) {
                  var yKey = stackYKeys[levelIndex];
                  var yIndex = (_e = processedData === null || processedData === void 0 ? void 0 : processedData.indices.values[yKey]) !== null && _e !== void 0 ? _e : -1;
                  (_f = (_g = contexts[stackIndex])[levelIndex]) !== null && _f !== void 0 ? _f : _g[levelIndex] = {
                    itemId: yKey,
                    nodeData: [],
                    labelData: []
                  };
                  if (yIndex === void 0)
                    continue;
                  var yValue = values[0][yIndex];
                  var currY = +yValue;
                  var barX = x + groupScale.convert(String(stackIndex));
                  if (!xAxis.inRange(barX, barWidth)) {
                    continue;
                  }
                  if (isNaN(currY)) {
                    continue;
                  }
                  var prevY = currY < 0 ? prevMinY : prevMaxY;
                  var y = yScale.convert(prevY + currY, { strict: false });
                  var bottomY = yScale.convert(prevY, { strict: false });
                  var labelText = void 0;
                  if (labelFormatter) {
                    labelText = labelFormatter({
                      value: isNumber(yValue) ? yValue : void 0,
                      seriesId
                    });
                  } else {
                    labelText = isNumber(yValue) ? yValue.toFixed(2) : "";
                  }
                  var labelX = void 0;
                  var labelY = void 0;
                  if (flipXY) {
                    labelY = barX + barWidth / 2;
                    if (labelPlacement === "inside") {
                      labelX = y + (yValue >= 0 ? -1 : 1) * Math.abs(bottomY - y) / 2;
                    } else {
                      labelX = y + (yValue >= 0 ? 1 : -1) * 4;
                    }
                  } else {
                    labelX = barX + barWidth / 2;
                    if (labelPlacement === "inside") {
                      labelY = y + (yValue >= 0 ? 1 : -1) * Math.abs(bottomY - y) / 2;
                    } else {
                      labelY = y + (yValue >= 0 ? -3 : 4);
                    }
                  }
                  var labelTextAlign = void 0;
                  var labelTextBaseline = void 0;
                  if (labelPlacement === "inside") {
                    labelTextAlign = "center";
                    labelTextBaseline = "middle";
                  } else {
                    labelTextAlign = flipXY ? yValue >= 0 ? "start" : "end" : "center";
                    labelTextBaseline = flipXY ? "middle" : yValue >= 0 ? "bottom" : "top";
                  }
                  var colorIndex = cumYKeyCount[stackIndex] + levelIndex;
                  var rect = {
                    x: flipXY ? Math.min(y, bottomY) : barX,
                    y: flipXY ? barX : Math.min(y, bottomY),
                    width: flipXY ? Math.abs(bottomY - y) : barWidth,
                    height: flipXY ? barWidth : Math.abs(bottomY - y)
                  };
                  var nodeMidPoint = {
                    x: rect.x + rect.width / 2,
                    y: rect.y + rect.height / 2
                  };
                  var nodeData = {
                    index: dataIndex,
                    series: _this,
                    itemId: yKey,
                    datum: seriesDatum[0],
                    cumulativeValue: prevY + currY,
                    yValue,
                    yKey,
                    xKey,
                    x: rect.x,
                    y: rect.y,
                    width: rect.width,
                    height: rect.height,
                    nodeMidPoint,
                    colorIndex,
                    fill: fills[colorIndex % fills.length],
                    stroke: strokes[colorIndex % strokes.length],
                    strokeWidth,
                    label: seriesItemEnabled.get(yKey) && labelText ? {
                      text: labelText,
                      fontStyle: labelFontStyle,
                      fontWeight: labelFontWeight,
                      fontSize: labelFontSize,
                      fontFamily: labelFontFamily,
                      textAlign: labelTextAlign,
                      textBaseline: labelTextBaseline,
                      fill: labelColor,
                      x: labelX,
                      y: labelY
                    } : void 0
                  };
                  contexts[stackIndex][levelIndex].nodeData.push(nodeData);
                  contexts[stackIndex][levelIndex].labelData.push(nodeData);
                  if (currY < 0) {
                    prevMinY += currY;
                  } else {
                    prevMaxY += currY;
                  }
                }
              }
            });
            return [2, contexts.reduce(function(r, n) {
              return r.concat.apply(r, __spread20(n));
            }, [])];
          });
        });
      };
      BarSeries2.prototype.nodeFactory = function() {
        return new Rect();
      };
      BarSeries2.prototype.updateDatumSelection = function(opts2) {
        return __awaiter10(this, void 0, void 0, function() {
          var nodeData, datumSelection;
          return __generator10(this, function(_a5) {
            nodeData = opts2.nodeData, datumSelection = opts2.datumSelection;
            return [2, datumSelection.update(nodeData, function(rect) {
              return rect.tag = BarSeriesNodeTag.Bar;
            })];
          });
        });
      };
      BarSeries2.prototype.updateDatumNodes = function(opts2) {
        var _a5, _b2;
        return __awaiter10(this, void 0, void 0, function() {
          var datumSelection, isDatumHighlighted, _c2, fills, strokes, seriesFillOpacity, strokeOpacity, shadow, formatter, xKey, flipXY, _d2, highlightedFill, _e, highlightFillOpacity, highlightedStroke, highlightedDatumStrokeWidth, seriesId, _f, visibleMin, visibleMax, isZoomed, crisp;
          var _this = this;
          return __generator10(this, function(_g) {
            datumSelection = opts2.datumSelection, isDatumHighlighted = opts2.isHighlight;
            _c2 = this, fills = _c2.fills, strokes = _c2.strokes, seriesFillOpacity = _c2.fillOpacity, strokeOpacity = _c2.strokeOpacity, shadow = _c2.shadow, formatter = _c2.formatter, xKey = _c2.xKey, flipXY = _c2.flipXY, _d2 = _c2.highlightStyle.item, highlightedFill = _d2.fill, _e = _d2.fillOpacity, highlightFillOpacity = _e === void 0 ? seriesFillOpacity : _e, highlightedStroke = _d2.stroke, highlightedDatumStrokeWidth = _d2.strokeWidth, seriesId = _c2.id;
            _f = __read33((_b2 = (_a5 = this.xAxis) === null || _a5 === void 0 ? void 0 : _a5.visibleRange) !== null && _b2 !== void 0 ? _b2 : [], 2), visibleMin = _f[0], visibleMax = _f[1];
            isZoomed = visibleMin !== 0 || visibleMax !== 1;
            crisp = !isZoomed;
            datumSelection.each(function(rect, datum) {
              var colorIndex = datum.colorIndex;
              var fill = isDatumHighlighted && highlightedFill !== void 0 ? highlightedFill : fills[colorIndex % fills.length];
              var stroke = isDatumHighlighted && highlightedStroke !== void 0 ? highlightedStroke : strokes[colorIndex % fills.length];
              var strokeWidth = isDatumHighlighted && highlightedDatumStrokeWidth !== void 0 ? highlightedDatumStrokeWidth : _this.getStrokeWidth(_this.strokeWidth, datum);
              var fillOpacity = isDatumHighlighted ? highlightFillOpacity : seriesFillOpacity;
              var stackGroup = _this.getStackGroup(datum.yKey);
              var format2 = void 0;
              if (formatter) {
                format2 = formatter({
                  datum: datum.datum,
                  fill,
                  stroke,
                  strokeWidth,
                  highlighted: isDatumHighlighted,
                  xKey,
                  yKey: datum.yKey,
                  seriesId,
                  stackGroup
                });
              }
              rect.crisp = crisp;
              rect.x = datum.x;
              rect.y = datum.y;
              rect.width = datum.width;
              rect.height = datum.height;
              rect.fill = format2 && format2.fill || fill;
              rect.stroke = format2 && format2.stroke || stroke;
              rect.strokeWidth = format2 && format2.strokeWidth !== void 0 ? format2.strokeWidth : strokeWidth;
              rect.fillOpacity = fillOpacity;
              rect.strokeOpacity = strokeOpacity;
              rect.lineDash = _this.lineDash;
              rect.lineDashOffset = _this.lineDashOffset;
              rect.fillShadow = shadow;
              rect.visible = flipXY ? datum.width > 0 : datum.height > 0;
            });
            return [
              2
              /*return*/
            ];
          });
        });
      };
      BarSeries2.prototype.updateLabelSelection = function(opts2) {
        return __awaiter10(this, void 0, void 0, function() {
          var labelData, labelSelection, enabled, data;
          return __generator10(this, function(_a5) {
            labelData = opts2.labelData, labelSelection = opts2.labelSelection;
            enabled = this.label.enabled;
            data = enabled ? labelData : [];
            return [2, labelSelection.update(data, function(text) {
              text.tag = BarSeriesNodeTag.Label;
              text.pointerEvents = PointerEvents.None;
            })];
          });
        });
      };
      BarSeries2.prototype.updateLabelNodes = function(opts2) {
        return __awaiter10(this, void 0, void 0, function() {
          var labelSelection, _a5, labelEnabled, fontStyle, fontWeight, fontSize, fontFamily, color;
          return __generator10(this, function(_b2) {
            labelSelection = opts2.labelSelection;
            _a5 = this.label, labelEnabled = _a5.enabled, fontStyle = _a5.fontStyle, fontWeight = _a5.fontWeight, fontSize = _a5.fontSize, fontFamily = _a5.fontFamily, color = _a5.color;
            labelSelection.each(function(text, datum) {
              var label = datum.label;
              if (label && labelEnabled) {
                text.fontStyle = fontStyle;
                text.fontWeight = fontWeight;
                text.fontSize = fontSize;
                text.fontFamily = fontFamily;
                text.textAlign = label.textAlign;
                text.textBaseline = label.textBaseline;
                text.text = label.text;
                text.x = label.x;
                text.y = label.y;
                text.fill = color;
                text.visible = true;
              } else {
                text.visible = false;
              }
            });
            return [
              2
              /*return*/
            ];
          });
        });
      };
      BarSeries2.prototype.getTooltipHtml = function(nodeDatum) {
        var _a5 = this, xKey = _a5.xKey, yKeys = _a5.yKeys, processedData = _a5.processedData;
        var xAxis = this.getCategoryAxis();
        var yAxis = this.getValueAxis();
        var yKey = nodeDatum.yKey;
        if (!processedData || !xKey || !yKey || !xAxis || !yAxis) {
          return "";
        }
        var fillIndex = 0;
        var i = 0;
        var j = 0;
        for (; j < yKeys.length; j++) {
          var stack = yKeys[j];
          i = stack.indexOf(yKey);
          if (i >= 0) {
            fillIndex += i;
            break;
          }
          fillIndex += stack.length;
        }
        var _b2 = this, xName = _b2.xName, yNames = _b2.yNames, fills = _b2.fills, strokes = _b2.strokes, tooltip = _b2.tooltip, formatter = _b2.formatter, seriesId = _b2.id;
        var tooltipRenderer = tooltip.renderer;
        var datum = nodeDatum.datum;
        var yName = yNames[yKey];
        var stackGroup = this.getStackGroup(yKey);
        var fill = fills[fillIndex % fills.length];
        var stroke = strokes[fillIndex % fills.length];
        var strokeWidth = this.getStrokeWidth(this.strokeWidth);
        var xValue = datum[xKey];
        var yValue = datum[yKey];
        var xString = sanitizeHtml(xAxis.formatDatum(xValue));
        var yString = sanitizeHtml(yAxis.formatDatum(yValue));
        var title = sanitizeHtml(yName);
        var content = xString + ": " + yString;
        var format2 = void 0;
        if (formatter) {
          format2 = formatter({
            datum,
            fill,
            stroke,
            strokeWidth,
            highlighted: false,
            xKey,
            yKey,
            seriesId,
            stackGroup
          });
        }
        var color = format2 && format2.fill || fill;
        var defaults = {
          title,
          backgroundColor: color,
          content
        };
        if (tooltipRenderer) {
          return toTooltipHtml(tooltipRenderer({
            datum,
            xKey,
            xValue,
            xName,
            yKey,
            yValue,
            yName,
            color,
            title,
            seriesId,
            stackGroup
          }), defaults);
        }
        return toTooltipHtml(defaults);
      };
      BarSeries2.prototype.getLegendData = function() {
        var _a5 = this, id = _a5.id, data = _a5.data, xKey = _a5.xKey, yKeys = _a5.yKeys, yNames = _a5.yNames, cumYKeyCount = _a5.cumYKeyCount, seriesItemEnabled = _a5.seriesItemEnabled, hideInLegend = _a5.hideInLegend, fills = _a5.fills, strokes = _a5.strokes, fillOpacity = _a5.fillOpacity, strokeOpacity = _a5.strokeOpacity, flipXY = _a5.flipXY;
        if (!data || !data.length || !xKey || !yKeys.length) {
          return [];
        }
        var legendData = [];
        this.yKeys.forEach(function(stack, stackIndex) {
          var startLevel = flipXY ? 0 : stack.length - 1;
          var direction = flipXY ? 1 : -1;
          for (var levelIndex = startLevel, step = 0; step < stack.length; levelIndex += direction, step++) {
            var yKey = stack[levelIndex];
            if (hideInLegend.indexOf(yKey) >= 0) {
              return;
            }
            var colorIndex = cumYKeyCount[stackIndex] + levelIndex;
            legendData.push({
              id,
              itemId: yKey,
              seriesId: id,
              enabled: seriesItemEnabled.get(yKey) || false,
              label: {
                text: yNames[yKey] || yKey
              },
              marker: {
                fill: fills[colorIndex % fills.length],
                stroke: strokes[colorIndex % strokes.length],
                fillOpacity,
                strokeOpacity
              }
            });
          }
        });
        return legendData;
      };
      BarSeries2.prototype.toggleSeriesItem = function(itemId, enabled) {
        _super.prototype.toggleSeriesItem.call(this, itemId, enabled);
        var yKeys = this.yKeys.map(function(stack) {
          return stack.slice();
        });
        this.seriesItemEnabled.forEach(function(enabled2, yKey) {
          if (!enabled2) {
            yKeys.forEach(function(stack) {
              var index = stack.indexOf(yKey);
              if (index >= 0) {
                stack.splice(index, 1);
              }
            });
          }
        });
        var visibleStacks = [];
        yKeys.forEach(function(stack, index) {
          if (stack.length > 0) {
            visibleStacks.push(String(index));
          }
        });
        this.groupScale.domain = visibleStacks;
        this.nodeDataRefresh = true;
      };
      BarSeries2.prototype.isLabelEnabled = function() {
        return this.label.enabled;
      };
      BarSeries2.prototype.getBandScalePadding = function() {
        return { inner: 0.2, outer: 0.3 };
      };
      BarSeries2.className = "BarSeries";
      BarSeries2.type = "bar";
      __decorate32([
        Validate(BOOLEAN)
      ], BarSeries2.prototype, "flipXY", void 0);
      __decorate32([
        Validate(COLOR_STRING_ARRAY)
      ], BarSeries2.prototype, "fills", void 0);
      __decorate32([
        Validate(COLOR_STRING_ARRAY)
      ], BarSeries2.prototype, "strokes", void 0);
      __decorate32([
        Validate(NUMBER(0, 1))
      ], BarSeries2.prototype, "fillOpacity", void 0);
      __decorate32([
        Validate(NUMBER(0, 1))
      ], BarSeries2.prototype, "strokeOpacity", void 0);
      __decorate32([
        Validate(OPT_LINE_DASH)
      ], BarSeries2.prototype, "lineDash", void 0);
      __decorate32([
        Validate(NUMBER(0))
      ], BarSeries2.prototype, "lineDashOffset", void 0);
      __decorate32([
        Validate(OPT_FUNCTION)
      ], BarSeries2.prototype, "formatter", void 0);
      __decorate32([
        Validate(STRING)
      ], BarSeries2.prototype, "_xKey", void 0);
      __decorate32([
        Validate(STRING)
      ], BarSeries2.prototype, "xName", void 0);
      __decorate32([
        Validate(STRING_ARRAY)
      ], BarSeries2.prototype, "hideInLegend", void 0);
      __decorate32([
        Validate(BOOLEAN_ARRAY)
      ], BarSeries2.prototype, "visibles", void 0);
      __decorate32([
        Validate(BOOLEAN)
      ], BarSeries2.prototype, "_grouped", void 0);
      __decorate32([
        Validate(OPT_NUMBER())
      ], BarSeries2.prototype, "_normalizedTo", void 0);
      __decorate32([
        Validate(NUMBER(0))
      ], BarSeries2.prototype, "strokeWidth", void 0);
      return BarSeries2;
    }(CartesianSeries);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/series/cartesian/histogramSeries.js
var __extends43, __decorate33, __awaiter11, __generator11, __read34, __spread21, HISTOGRAM_AGGREGATIONS, HISTOGRAM_AGGREGATION, HistogramSeriesNodeTag, HistogramSeriesLabel, defaultBinCount, aggregationFunctions, HistogramBin, HistogramSeriesTooltip, HistogramSeries;
var init_histogramSeries = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/series/cartesian/histogramSeries.js"() {
    init_rect();
    init_series();
    init_label();
    init_node();
    init_cartesianSeries();
    init_chartAxisDirection();
    init_tooltip();
    init_array();
    init_ticks();
    init_sanitize();
    init_validation();
    __extends43 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate33 = function(decorators, target2, key2, desc) {
      var c = arguments.length, r = c < 3 ? target2 : desc === null ? desc = Object.getOwnPropertyDescriptor(target2, key2) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target2, key2, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target2, key2, r) : d(target2, key2)) || r;
      return c > 3 && r && Object.defineProperty(target2, key2, r), r;
    };
    __awaiter11 = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __generator11 = function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    __read34 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread21 = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read34(arguments[i]));
      return ar;
    };
    HISTOGRAM_AGGREGATIONS = ["count", "sum", "mean"];
    HISTOGRAM_AGGREGATION = predicateWithMessage(function(v) {
      return HISTOGRAM_AGGREGATIONS.includes(v);
    }, "expecting a histogram aggregation keyword such as 'count', 'sum' or 'mean");
    (function(HistogramSeriesNodeTag2) {
      HistogramSeriesNodeTag2[HistogramSeriesNodeTag2["Bin"] = 0] = "Bin";
      HistogramSeriesNodeTag2[HistogramSeriesNodeTag2["Label"] = 1] = "Label";
    })(HistogramSeriesNodeTag || (HistogramSeriesNodeTag = {}));
    HistogramSeriesLabel = /** @class */
    function(_super) {
      __extends43(HistogramSeriesLabel2, _super);
      function HistogramSeriesLabel2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.formatter = void 0;
        return _this;
      }
      __decorate33([
        Validate(OPT_FUNCTION)
      ], HistogramSeriesLabel2.prototype, "formatter", void 0);
      return HistogramSeriesLabel2;
    }(Label);
    defaultBinCount = 10;
    aggregationFunctions = {
      count: function(bin) {
        return bin.data.length;
      },
      sum: function(bin, yKey) {
        return bin.data.reduce(function(acc, datum) {
          return acc + datum[yKey];
        }, 0);
      },
      mean: function(bin, yKey) {
        return aggregationFunctions.sum(bin, yKey) / aggregationFunctions.count(bin, yKey);
      }
    };
    HistogramBin = /** @class */
    function() {
      function HistogramBin2(_a5) {
        var _b2 = __read34(_a5, 2), domainMin = _b2[0], domainMax = _b2[1];
        this.data = [];
        this.aggregatedValue = 0;
        this.frequency = 0;
        this.domain = [domainMin, domainMax];
      }
      HistogramBin2.prototype.addDatum = function(datum) {
        this.data.push(datum);
        this.frequency++;
      };
      Object.defineProperty(HistogramBin2.prototype, "domainWidth", {
        get: function() {
          var _a5 = __read34(this.domain, 2), domainMin = _a5[0], domainMax = _a5[1];
          return domainMax - domainMin;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(HistogramBin2.prototype, "relativeHeight", {
        get: function() {
          return this.aggregatedValue / this.domainWidth;
        },
        enumerable: false,
        configurable: true
      });
      HistogramBin2.prototype.calculateAggregatedValue = function(aggregationName, yKey) {
        if (!yKey) {
          aggregationName = "count";
        }
        var aggregationFunction = aggregationFunctions[aggregationName];
        this.aggregatedValue = aggregationFunction(this, yKey);
      };
      HistogramBin2.prototype.getY = function(areaPlot) {
        return areaPlot ? this.relativeHeight : this.aggregatedValue;
      };
      return HistogramBin2;
    }();
    HistogramSeriesTooltip = /** @class */
    function(_super) {
      __extends43(HistogramSeriesTooltip2, _super);
      function HistogramSeriesTooltip2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.renderer = void 0;
        return _this;
      }
      __decorate33([
        Validate(OPT_FUNCTION)
      ], HistogramSeriesTooltip2.prototype, "renderer", void 0);
      return HistogramSeriesTooltip2;
    }(SeriesTooltip);
    HistogramSeries = /** @class */
    function(_super) {
      __extends43(HistogramSeries2, _super);
      function HistogramSeries2() {
        var _this = _super.call(this, { pickModes: [SeriesNodePickMode.EXACT_SHAPE_MATCH] }) || this;
        _this.binnedData = [];
        _this.xDomain = [];
        _this.yDomain = [];
        _this.label = new HistogramSeriesLabel();
        _this.tooltip = new HistogramSeriesTooltip();
        _this.fill = void 0;
        _this.stroke = void 0;
        _this.fillOpacity = 1;
        _this.strokeOpacity = 1;
        _this.lineDash = [0];
        _this.lineDashOffset = 0;
        _this.xKey = "";
        _this.areaPlot = false;
        _this.bins = void 0;
        _this.aggregation = "count";
        _this.binCount = void 0;
        _this.xName = "";
        _this.yKey = "";
        _this.yName = "";
        _this.strokeWidth = 1;
        _this.shadow = void 0;
        _this.label.enabled = false;
        return _this;
      }
      HistogramSeries2.prototype.deriveBins = function() {
        var _this = this;
        var bins = this.bins;
        if (!this.data) {
          return [];
        }
        var xData = this.data.map(function(datum) {
          return datum[_this.xKey];
        });
        var xDomain = this.fixNumericExtent(extent(xData));
        if (this.binCount === void 0) {
          if (bins) {
            return bins;
          }
          var binStarts = ticks_default(xDomain[0], xDomain[1], defaultBinCount);
          var binSize_1 = tickStep(xDomain[0], xDomain[1], defaultBinCount);
          var firstBinEnd = binStarts[0];
          var expandStartToBin = function(n) {
            return [n, n + binSize_1];
          };
          return __spread21([[firstBinEnd - binSize_1, firstBinEnd]], binStarts.map(expandStartToBin));
        } else {
          return this.calculateNiceBins(xDomain, this.binCount);
        }
      };
      HistogramSeries2.prototype.calculateNiceBins = function(domain, binCount) {
        var startGuess = Math.floor(domain[0]);
        var stop = domain[1];
        var segments = binCount || 1;
        var _a5 = this.calculateNiceStart(startGuess, stop, segments), start = _a5.start, binSize = _a5.binSize;
        return this.getBins(start, stop, binSize, segments);
      };
      HistogramSeries2.prototype.getBins = function(start, stop, step, count) {
        var bins = [];
        for (var i = 0; i < count; i++) {
          var a = Math.round((start + i * step) * 10) / 10;
          var b = Math.round((start + (i + 1) * step) * 10) / 10;
          if (i === count - 1) {
            b = Math.max(b, stop);
          }
          bins[i] = [a, b];
        }
        return bins;
      };
      HistogramSeries2.prototype.calculateNiceStart = function(a, b, segments) {
        var binSize = Math.abs(b - a) / segments;
        var order = Math.floor(Math.log10(binSize));
        var magnitude = Math.pow(10, order);
        var start = Math.floor(a / magnitude) * magnitude;
        return {
          start,
          binSize
        };
      };
      HistogramSeries2.prototype.placeDataInBins = function(data) {
        var _this = this;
        var xKey = this.xKey;
        var derivedBins = this.deriveBins();
        this.bins = derivedBins;
        var sortedData = data.slice().sort(function(a, b) {
          if (a[xKey] < b[xKey]) {
            return -1;
          }
          if (a[xKey] > b[xKey]) {
            return 1;
          }
          return 0;
        });
        var bins = [new HistogramBin(derivedBins[0])];
        var currentBin = 0;
        for (var i = 0; i < sortedData.length && currentBin < derivedBins.length; i++) {
          var datum = sortedData[i];
          while (datum[xKey] > derivedBins[currentBin][1] && currentBin < derivedBins.length) {
            currentBin++;
            bins.push(new HistogramBin(derivedBins[currentBin]));
          }
          if (currentBin < derivedBins.length) {
            bins[currentBin].addDatum(datum);
          }
        }
        bins.forEach(function(b) {
          return b.calculateAggregatedValue(_this.aggregation, _this.yKey);
        });
        return bins;
      };
      Object.defineProperty(HistogramSeries2.prototype, "xMax", {
        get: function() {
          var _this = this;
          return this.data && this.data.reduce(function(acc, datum) {
            return Math.max(acc, datum[_this.xKey]);
          }, Number.NEGATIVE_INFINITY);
        },
        enumerable: false,
        configurable: true
      });
      HistogramSeries2.prototype.processData = function() {
        return __awaiter11(this, void 0, void 0, function() {
          var _a5, xKey, data, yData, yMinMax, firstBin, lastBin, xMin, xMax;
          var _this = this;
          return __generator11(this, function(_b2) {
            _a5 = this, xKey = _a5.xKey, data = _a5.data;
            this.binnedData = this.placeDataInBins(xKey && data ? data : []);
            yData = this.binnedData.map(function(b) {
              return b.getY(_this.areaPlot);
            });
            yMinMax = extent(yData);
            this.yDomain = this.fixNumericExtent([0, yMinMax ? yMinMax[1] : 1]);
            firstBin = this.binnedData[0];
            lastBin = this.binnedData[this.binnedData.length - 1];
            xMin = firstBin.domain[0];
            xMax = lastBin.domain[1];
            this.xDomain = [xMin, xMax];
            return [
              2
              /*return*/
            ];
          });
        });
      };
      HistogramSeries2.prototype.getDomain = function(direction) {
        if (direction === ChartAxisDirection.X) {
          return this.xDomain;
        } else {
          return this.yDomain;
        }
      };
      HistogramSeries2.prototype.getNodeClickEvent = function(event, datum) {
        return new CartesianSeriesNodeClickEvent(this.xKey, this.yKey, event, datum, this);
      };
      HistogramSeries2.prototype.getNodeDoubleClickEvent = function(event, datum) {
        return new CartesianSeriesNodeDoubleClickEvent(this.xKey, this.yKey, event, datum, this);
      };
      HistogramSeries2.prototype.createNodeData = function() {
        return __awaiter11(this, void 0, void 0, function() {
          var _a5, xAxis, yAxis, xScale, yScale, _b2, fill, stroke, strokeWidth, seriesId, yKey, xKey, nodeData, defaultLabelFormatter, _c2, _d2, labelFormatter, labelFontStyle, labelFontWeight, labelFontSize, labelFontFamily, labelColor;
          var _this = this;
          return __generator11(this, function(_e) {
            _a5 = this, xAxis = _a5.xAxis, yAxis = _a5.yAxis;
            if (!this.seriesItemEnabled || !xAxis || !yAxis) {
              return [2, []];
            }
            xScale = xAxis.scale;
            yScale = yAxis.scale;
            _b2 = this, fill = _b2.fill, stroke = _b2.stroke, strokeWidth = _b2.strokeWidth, seriesId = _b2.id, yKey = _b2.yKey, xKey = _b2.xKey;
            nodeData = [];
            defaultLabelFormatter = function(params) {
              return String(params.value);
            };
            _c2 = this.label, _d2 = _c2.formatter, labelFormatter = _d2 === void 0 ? defaultLabelFormatter : _d2, labelFontStyle = _c2.fontStyle, labelFontWeight = _c2.fontWeight, labelFontSize = _c2.fontSize, labelFontFamily = _c2.fontFamily, labelColor = _c2.color;
            this.binnedData.forEach(function(binOfData) {
              var total = binOfData.aggregatedValue, frequency = binOfData.frequency, _a6 = __read34(binOfData.domain, 2), xDomainMin = _a6[0], xDomainMax = _a6[1], relativeHeight = binOfData.relativeHeight;
              var xMinPx = xScale.convert(xDomainMin), xMaxPx = xScale.convert(xDomainMax), y = _this.areaPlot ? relativeHeight : yKey ? total : frequency, yZeroPx = yScale.convert(0), yMaxPx = yScale.convert(y), w = xMaxPx - xMinPx, h = Math.abs(yMaxPx - yZeroPx);
              var selectionDatumLabel = y !== 0 ? {
                text: labelFormatter({ value: binOfData.aggregatedValue, seriesId }),
                fontStyle: labelFontStyle,
                fontWeight: labelFontWeight,
                fontSize: labelFontSize,
                fontFamily: labelFontFamily,
                fill: labelColor,
                x: xMinPx + w / 2,
                y: yMaxPx + h / 2
              } : void 0;
              var nodeMidPoint = {
                x: xMinPx + w / 2,
                y: yMaxPx + h / 2
              };
              nodeData.push({
                series: _this,
                datum: binOfData,
                // since each selection is an aggregation of multiple data.
                aggregatedValue: binOfData.aggregatedValue,
                domain: binOfData.domain,
                yKey,
                xKey,
                x: xMinPx,
                y: yMaxPx,
                width: w,
                height: h,
                nodeMidPoint,
                fill,
                stroke,
                strokeWidth,
                label: selectionDatumLabel
              });
            });
            return [2, [{ itemId: this.yKey, nodeData, labelData: nodeData }]];
          });
        });
      };
      HistogramSeries2.prototype.nodeFactory = function() {
        return new Rect();
      };
      HistogramSeries2.prototype.updateDatumSelection = function(opts2) {
        return __awaiter11(this, void 0, void 0, function() {
          var nodeData, datumSelection;
          return __generator11(this, function(_a5) {
            nodeData = opts2.nodeData, datumSelection = opts2.datumSelection;
            return [2, datumSelection.update(nodeData, function(rect) {
              rect.tag = HistogramSeriesNodeTag.Bin;
              rect.crisp = true;
            })];
          });
        });
      };
      HistogramSeries2.prototype.updateDatumNodes = function(opts2) {
        return __awaiter11(this, void 0, void 0, function() {
          var datumSelection, isDatumHighlighted, _a5, seriesFillOpacity, strokeOpacity, shadow, _b2, highlightedFill, _c2, highlightFillOpacity, highlightedStroke, highlightedDatumStrokeWidth;
          var _this = this;
          return __generator11(this, function(_d2) {
            datumSelection = opts2.datumSelection, isDatumHighlighted = opts2.isHighlight;
            _a5 = this, seriesFillOpacity = _a5.fillOpacity, strokeOpacity = _a5.strokeOpacity, shadow = _a5.shadow, _b2 = _a5.highlightStyle.item, highlightedFill = _b2.fill, _c2 = _b2.fillOpacity, highlightFillOpacity = _c2 === void 0 ? seriesFillOpacity : _c2, highlightedStroke = _b2.stroke, highlightedDatumStrokeWidth = _b2.strokeWidth;
            datumSelection.each(function(rect, datum, index) {
              var strokeWidth = isDatumHighlighted && highlightedDatumStrokeWidth !== void 0 ? highlightedDatumStrokeWidth : datum.strokeWidth;
              var fillOpacity = isDatumHighlighted ? highlightFillOpacity : seriesFillOpacity;
              rect.x = datum.x;
              rect.y = datum.y;
              rect.width = datum.width;
              rect.height = datum.height;
              rect.fill = isDatumHighlighted && highlightedFill !== void 0 ? highlightedFill : datum.fill;
              rect.stroke = isDatumHighlighted && highlightedStroke !== void 0 ? highlightedStroke : datum.stroke;
              rect.fillOpacity = fillOpacity;
              rect.strokeOpacity = strokeOpacity;
              rect.strokeWidth = strokeWidth;
              rect.lineDash = _this.lineDash;
              rect.lineDashOffset = _this.lineDashOffset;
              rect.fillShadow = shadow;
              rect.zIndex = isDatumHighlighted ? Series.highlightedZIndex : index;
              rect.visible = datum.height > 0;
            });
            return [
              2
              /*return*/
            ];
          });
        });
      };
      HistogramSeries2.prototype.updateLabelSelection = function(opts2) {
        return __awaiter11(this, void 0, void 0, function() {
          var labelData, labelSelection;
          return __generator11(this, function(_a5) {
            labelData = opts2.labelData, labelSelection = opts2.labelSelection;
            return [2, labelSelection.update(labelData, function(text) {
              text.tag = HistogramSeriesNodeTag.Label;
              text.pointerEvents = PointerEvents.None;
              text.textAlign = "center";
              text.textBaseline = "middle";
            })];
          });
        });
      };
      HistogramSeries2.prototype.updateLabelNodes = function(opts2) {
        return __awaiter11(this, void 0, void 0, function() {
          var labelSelection, labelEnabled;
          return __generator11(this, function(_a5) {
            labelSelection = opts2.labelSelection;
            labelEnabled = this.label.enabled;
            labelSelection.each(function(text, datum) {
              var label = datum.label;
              if (label && labelEnabled) {
                text.text = label.text;
                text.x = label.x;
                text.y = label.y;
                text.fontStyle = label.fontStyle;
                text.fontWeight = label.fontWeight;
                text.fontSize = label.fontSize;
                text.fontFamily = label.fontFamily;
                text.fill = label.fill;
                text.visible = true;
              } else {
                text.visible = false;
              }
            });
            return [
              2
              /*return*/
            ];
          });
        });
      };
      HistogramSeries2.prototype.getTooltipHtml = function(nodeDatum) {
        var _a5 = this, xKey = _a5.xKey, yKey = _a5.yKey, xAxis = _a5.xAxis, yAxis = _a5.yAxis;
        if (!xKey || !xAxis || !yAxis) {
          return "";
        }
        var _b2 = this, xName = _b2.xName, yName = _b2.yName, color = _b2.fill, tooltip = _b2.tooltip, aggregation = _b2.aggregation, seriesId = _b2.id;
        var tooltipRenderer = tooltip.renderer;
        var bin = nodeDatum.datum;
        var aggregatedValue = bin.aggregatedValue, frequency = bin.frequency, _c2 = __read34(bin.domain, 2), rangeMin = _c2[0], rangeMax = _c2[1];
        var title = sanitizeHtml(xName || xKey) + ": " + xAxis.formatDatum(rangeMin) + " - " + xAxis.formatDatum(rangeMax);
        var content = yKey ? "<b>" + sanitizeHtml(yName || yKey) + " (" + aggregation + ")</b>: " + yAxis.formatDatum(aggregatedValue) + "<br>" : "";
        content += "<b>Frequency</b>: " + frequency;
        var defaults = {
          title,
          backgroundColor: color,
          content
        };
        if (tooltipRenderer) {
          return toTooltipHtml(tooltipRenderer({
            datum: bin,
            xKey,
            xValue: bin.domain,
            xName,
            yKey,
            yValue: bin.aggregatedValue,
            yName,
            color,
            title,
            seriesId
          }), defaults);
        }
        return toTooltipHtml(defaults);
      };
      HistogramSeries2.prototype.getLegendData = function() {
        var _a5 = this, id = _a5.id, data = _a5.data, xKey = _a5.xKey, yName = _a5.yName, visible = _a5.visible, fill = _a5.fill, stroke = _a5.stroke, fillOpacity = _a5.fillOpacity, strokeOpacity = _a5.strokeOpacity;
        if (!data || data.length === 0) {
          return [];
        }
        return [
          {
            id,
            itemId: xKey,
            seriesId: id,
            enabled: visible,
            label: {
              text: yName || xKey || "Frequency"
            },
            marker: {
              fill: fill || "rgba(0, 0, 0, 0)",
              stroke: stroke || "rgba(0, 0, 0, 0)",
              fillOpacity,
              strokeOpacity
            }
          }
        ];
      };
      HistogramSeries2.prototype.isLabelEnabled = function() {
        return this.label.enabled;
      };
      HistogramSeries2.className = "HistogramSeries";
      HistogramSeries2.type = "histogram";
      __decorate33([
        Validate(OPT_COLOR_STRING)
      ], HistogramSeries2.prototype, "fill", void 0);
      __decorate33([
        Validate(OPT_COLOR_STRING)
      ], HistogramSeries2.prototype, "stroke", void 0);
      __decorate33([
        Validate(NUMBER(0, 1))
      ], HistogramSeries2.prototype, "fillOpacity", void 0);
      __decorate33([
        Validate(NUMBER(0, 1))
      ], HistogramSeries2.prototype, "strokeOpacity", void 0);
      __decorate33([
        Validate(OPT_LINE_DASH)
      ], HistogramSeries2.prototype, "lineDash", void 0);
      __decorate33([
        Validate(NUMBER(0))
      ], HistogramSeries2.prototype, "lineDashOffset", void 0);
      __decorate33([
        Validate(STRING)
      ], HistogramSeries2.prototype, "xKey", void 0);
      __decorate33([
        Validate(BOOLEAN)
      ], HistogramSeries2.prototype, "areaPlot", void 0);
      __decorate33([
        Validate(OPT_ARRAY())
      ], HistogramSeries2.prototype, "bins", void 0);
      __decorate33([
        Validate(HISTOGRAM_AGGREGATION)
      ], HistogramSeries2.prototype, "aggregation", void 0);
      __decorate33([
        Validate(OPT_NUMBER(0))
      ], HistogramSeries2.prototype, "binCount", void 0);
      __decorate33([
        Validate(STRING)
      ], HistogramSeries2.prototype, "xName", void 0);
      __decorate33([
        Validate(STRING)
      ], HistogramSeries2.prototype, "yKey", void 0);
      __decorate33([
        Validate(STRING)
      ], HistogramSeries2.prototype, "yName", void 0);
      __decorate33([
        Validate(NUMBER(0))
      ], HistogramSeries2.prototype, "strokeWidth", void 0);
      return HistogramSeries2;
    }(CartesianSeries);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/series/cartesian/lineSeries.js
var __extends44, __decorate34, __awaiter12, __generator12, __values25, __read35, LineSeriesLabel, LineSeriesTooltip, LineSeries;
var init_lineSeries = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/series/cartesian/lineSeries.js"() {
    init_continuousScale();
    init_series();
    init_array();
    init_node();
    init_cartesianSeries();
    init_chartAxisDirection();
    init_util();
    init_tooltip();
    init_string();
    init_label();
    init_sanitize();
    init_value();
    init_validation();
    __extends44 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate34 = function(decorators, target2, key2, desc) {
      var c = arguments.length, r = c < 3 ? target2 : desc === null ? desc = Object.getOwnPropertyDescriptor(target2, key2) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target2, key2, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target2, key2, r) : d(target2, key2)) || r;
      return c > 3 && r && Object.defineProperty(target2, key2, r), r;
    };
    __awaiter12 = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __generator12 = function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    __values25 = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read35 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    LineSeriesLabel = /** @class */
    function(_super) {
      __extends44(LineSeriesLabel2, _super);
      function LineSeriesLabel2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.formatter = void 0;
        return _this;
      }
      __decorate34([
        Validate(OPT_FUNCTION)
      ], LineSeriesLabel2.prototype, "formatter", void 0);
      return LineSeriesLabel2;
    }(Label);
    LineSeriesTooltip = /** @class */
    function(_super) {
      __extends44(LineSeriesTooltip2, _super);
      function LineSeriesTooltip2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.renderer = void 0;
        _this.format = void 0;
        return _this;
      }
      __decorate34([
        Validate(OPT_FUNCTION)
      ], LineSeriesTooltip2.prototype, "renderer", void 0);
      __decorate34([
        Validate(OPT_STRING)
      ], LineSeriesTooltip2.prototype, "format", void 0);
      return LineSeriesTooltip2;
    }(SeriesTooltip);
    LineSeries = /** @class */
    function(_super) {
      __extends44(LineSeries2, _super);
      function LineSeries2() {
        var _this = _super.call(this, {
          hasMarkers: true,
          pickModes: [
            SeriesNodePickMode.NEAREST_BY_MAIN_CATEGORY_AXIS_FIRST,
            SeriesNodePickMode.NEAREST_NODE,
            SeriesNodePickMode.EXACT_SHAPE_MATCH
          ]
        }) || this;
        _this.xDomain = [];
        _this.yDomain = [];
        _this.pointsData = [];
        _this.marker = new CartesianSeriesMarker();
        _this.label = new LineSeriesLabel();
        _this.title = void 0;
        _this.stroke = "#874349";
        _this.lineDash = [0];
        _this.lineDashOffset = 0;
        _this.strokeWidth = 2;
        _this.strokeOpacity = 1;
        _this.tooltip = new LineSeriesTooltip();
        _this._xKey = "";
        _this.xName = "";
        _this._yKey = "";
        _this.yName = "";
        var _a5 = _this, marker = _a5.marker, label = _a5.label;
        marker.fill = "#c16068";
        marker.stroke = "#874349";
        label.enabled = false;
        return _this;
      }
      Object.defineProperty(LineSeries2.prototype, "xKey", {
        get: function() {
          return this._xKey;
        },
        set: function(value) {
          this._xKey = value;
          this.pointsData.splice(0);
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(LineSeries2.prototype, "yKey", {
        get: function() {
          return this._yKey;
        },
        set: function(value) {
          this._yKey = value;
          this.pointsData.splice(0);
        },
        enumerable: false,
        configurable: true
      });
      LineSeries2.prototype.getDomain = function(direction) {
        if (direction === ChartAxisDirection.X) {
          return this.xDomain;
        }
        return this.yDomain;
      };
      LineSeries2.prototype.processData = function() {
        return __awaiter12(this, void 0, void 0, function() {
          var _a5, xAxis, yAxis, xKey, yKey, pointsData, data, isContinuousX, isContinuousY, xData, yData, data_1, data_1_1, datum, x, y, xDatum, yDatum;
          var e_1, _b2;
          return __generator12(this, function(_c2) {
            _a5 = this, xAxis = _a5.xAxis, yAxis = _a5.yAxis, xKey = _a5.xKey, yKey = _a5.yKey, pointsData = _a5.pointsData;
            data = xKey && yKey && this.data ? this.data : [];
            if (!xAxis || !yAxis) {
              return [
                2
                /*return*/
              ];
            }
            isContinuousX = xAxis.scale instanceof ContinuousScale;
            isContinuousY = yAxis.scale instanceof ContinuousScale;
            xData = [];
            yData = [];
            pointsData.splice(0);
            try {
              for (data_1 = __values25(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
                datum = data_1_1.value;
                x = datum[xKey];
                y = datum[yKey];
                xDatum = checkDatum(x, isContinuousX);
                if (isContinuousX && xDatum === void 0) {
                  continue;
                }
                yDatum = checkDatum(y, isContinuousY);
                xData.push(xDatum);
                yData.push(yDatum);
                pointsData.push({
                  xDatum,
                  yDatum,
                  datum
                });
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (data_1_1 && !data_1_1.done && (_b2 = data_1.return))
                  _b2.call(data_1);
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
            this.validateXYData(this.xKey, this.yKey, data, xAxis, yAxis, xData, yData, 1);
            this.xDomain = isContinuousX ? this.fixNumericExtent(extent(xData), xAxis) : xData;
            this.yDomain = isContinuousY ? this.fixNumericExtent(extent(yData), yAxis) : yData;
            return [
              2
              /*return*/
            ];
          });
        });
      };
      LineSeries2.prototype.createNodeData = function() {
        var _a5;
        return __awaiter12(this, void 0, void 0, function() {
          var _b2, data, xAxis, yAxis, _c2, markerEnabled, markerSize, strokeWidth, _d2, pointsData, label, yKey, xKey, seriesId, xScale, yScale, xOffset, yOffset, nodeData, size, moveTo, prevXInRange, nextPoint, actualLength, i, point, xDatum, yDatum, datum, x, tolerance, xInRange, nextXInRange, y, labelText;
          return __generator12(this, function(_e) {
            _b2 = this, data = _b2.data, xAxis = _b2.xAxis, yAxis = _b2.yAxis, _c2 = _b2.marker, markerEnabled = _c2.enabled, markerSize = _c2.size, strokeWidth = _c2.strokeWidth;
            if (!data || !xAxis || !yAxis) {
              return [2, []];
            }
            _d2 = this, pointsData = _d2.pointsData, label = _d2.label, yKey = _d2.yKey, xKey = _d2.xKey, seriesId = _d2.id;
            xScale = xAxis.scale;
            yScale = yAxis.scale;
            xOffset = (xScale.bandwidth || 0) / 2;
            yOffset = (yScale.bandwidth || 0) / 2;
            nodeData = new Array(data.length);
            size = markerEnabled ? markerSize : 0;
            moveTo = true;
            prevXInRange = void 0;
            nextPoint = void 0;
            actualLength = 0;
            for (i = 0; i < pointsData.length; i++) {
              point = nextPoint || pointsData[i];
              if (point.yDatum === void 0) {
                prevXInRange = void 0;
                moveTo = true;
              } else {
                xDatum = point.xDatum, yDatum = point.yDatum, datum = point.datum;
                x = xScale.convert(xDatum) + xOffset;
                if (isNaN(x)) {
                  prevXInRange = void 0;
                  moveTo = true;
                  continue;
                }
                tolerance = (xScale.bandwidth || markerSize * 0.5 + (strokeWidth || 0)) + 1;
                nextPoint = ((_a5 = pointsData[i + 1]) === null || _a5 === void 0 ? void 0 : _a5.yDatum) === void 0 ? void 0 : pointsData[i + 1];
                xInRange = xAxis.inRangeEx(x, 0, tolerance);
                nextXInRange = nextPoint && xAxis.inRangeEx(xScale.convert(nextPoint.xDatum) + xOffset, 0, tolerance);
                if (xInRange === -1 && nextXInRange === -1) {
                  moveTo = true;
                  continue;
                }
                if (xInRange === 1 && prevXInRange === 1) {
                  moveTo = true;
                  continue;
                }
                prevXInRange = xInRange;
                y = yScale.convert(yDatum) + yOffset;
                labelText = void 0;
                if (label.formatter) {
                  labelText = label.formatter({ value: yDatum, seriesId });
                } else {
                  labelText = typeof yDatum === "number" && isFinite(yDatum) ? yDatum.toFixed(2) : yDatum ? String(yDatum) : "";
                }
                nodeData[actualLength++] = {
                  series: this,
                  datum,
                  yKey,
                  xKey,
                  point: { x, y, moveTo, size },
                  nodeMidPoint: { x, y },
                  label: labelText ? {
                    text: labelText,
                    fontStyle: label.fontStyle,
                    fontWeight: label.fontWeight,
                    fontSize: label.fontSize,
                    fontFamily: label.fontFamily,
                    textAlign: "center",
                    textBaseline: "bottom",
                    fill: label.color
                  } : void 0
                };
                moveTo = false;
              }
            }
            nodeData.length = actualLength;
            return [2, [{ itemId: yKey, nodeData, labelData: nodeData }]];
          });
        });
      };
      LineSeries2.prototype.isPathOrSelectionDirty = function() {
        return this.marker.isDirty();
      };
      LineSeries2.prototype.updatePaths = function(opts2) {
        return __awaiter12(this, void 0, void 0, function() {
          var nodeData, _a5, lineNode, linePath, nodeData_1, nodeData_1_1, data;
          var e_2, _b2;
          return __generator12(this, function(_c2) {
            nodeData = opts2.contextData.nodeData, _a5 = __read35(opts2.paths, 1), lineNode = _a5[0];
            linePath = lineNode.path;
            lineNode.fill = void 0;
            lineNode.lineJoin = "round";
            lineNode.pointerEvents = PointerEvents.None;
            linePath.clear({ trackChanges: true });
            try {
              for (nodeData_1 = __values25(nodeData), nodeData_1_1 = nodeData_1.next(); !nodeData_1_1.done; nodeData_1_1 = nodeData_1.next()) {
                data = nodeData_1_1.value;
                if (data.point.moveTo) {
                  linePath.moveTo(data.point.x, data.point.y);
                } else {
                  linePath.lineTo(data.point.x, data.point.y);
                }
              }
            } catch (e_2_1) {
              e_2 = { error: e_2_1 };
            } finally {
              try {
                if (nodeData_1_1 && !nodeData_1_1.done && (_b2 = nodeData_1.return))
                  _b2.call(nodeData_1);
              } finally {
                if (e_2)
                  throw e_2.error;
              }
            }
            lineNode.checkPathDirty();
            return [
              2
              /*return*/
            ];
          });
        });
      };
      LineSeries2.prototype.updatePathNodes = function(opts2) {
        return __awaiter12(this, void 0, void 0, function() {
          var _a5, lineNode;
          return __generator12(this, function(_b2) {
            _a5 = __read35(opts2.paths, 1), lineNode = _a5[0];
            lineNode.stroke = this.stroke;
            lineNode.strokeWidth = this.getStrokeWidth(this.strokeWidth);
            lineNode.strokeOpacity = this.strokeOpacity;
            lineNode.lineDash = this.lineDash;
            lineNode.lineDashOffset = this.lineDashOffset;
            return [
              2
              /*return*/
            ];
          });
        });
      };
      LineSeries2.prototype.markerFactory = function() {
        var shape = this.marker.shape;
        var MarkerShape = getMarker(shape);
        return new MarkerShape();
      };
      LineSeries2.prototype.updateMarkerSelection = function(opts2) {
        return __awaiter12(this, void 0, void 0, function() {
          var nodeData, markerSelection, _a5, shape, enabled;
          return __generator12(this, function(_b2) {
            nodeData = opts2.nodeData;
            markerSelection = opts2.markerSelection;
            _a5 = this.marker, shape = _a5.shape, enabled = _a5.enabled;
            nodeData = shape && enabled ? nodeData : [];
            if (this.marker.isDirty()) {
              markerSelection.clear();
            }
            return [2, markerSelection.update(nodeData)];
          });
        });
      };
      LineSeries2.prototype.updateMarkerNodes = function(opts2) {
        return __awaiter12(this, void 0, void 0, function() {
          var markerSelection, isDatumHighlighted, _a5, marker, markerFillOpacity, xKey, yKey, lineStroke, strokeOpacity, _b2, highlightedFill, _c2, highlightFillOpacity, highlightedStroke, highlightedDatumStrokeWidth, seriesId, size, formatter, markerStrokeWidth, customMarker;
          return __generator12(this, function(_d2) {
            markerSelection = opts2.markerSelection, isDatumHighlighted = opts2.isHighlight;
            _a5 = this, marker = _a5.marker, markerFillOpacity = _a5.marker.fillOpacity, xKey = _a5.xKey, yKey = _a5.yKey, lineStroke = _a5.stroke, strokeOpacity = _a5.strokeOpacity, _b2 = _a5.highlightStyle.item, highlightedFill = _b2.fill, _c2 = _b2.fillOpacity, highlightFillOpacity = _c2 === void 0 ? markerFillOpacity : _c2, highlightedStroke = _b2.stroke, highlightedDatumStrokeWidth = _b2.strokeWidth, seriesId = _a5.id;
            size = marker.size, formatter = marker.formatter;
            markerStrokeWidth = marker.strokeWidth !== void 0 ? marker.strokeWidth : this.strokeWidth;
            customMarker = typeof marker.shape === "function";
            markerSelection.each(function(node, datum) {
              var _a6, _b3;
              var fill = isDatumHighlighted && highlightedFill !== void 0 ? highlightedFill : marker.fill;
              var fillOpacity = isDatumHighlighted ? highlightFillOpacity : markerFillOpacity;
              var stroke = isDatumHighlighted && highlightedStroke !== void 0 ? highlightedStroke : marker.stroke || lineStroke;
              var strokeWidth = isDatumHighlighted && highlightedDatumStrokeWidth !== void 0 ? highlightedDatumStrokeWidth : markerStrokeWidth;
              var format2 = void 0;
              if (formatter) {
                format2 = formatter({
                  datum: datum.datum,
                  xKey,
                  yKey,
                  fill,
                  stroke,
                  strokeWidth,
                  size,
                  highlighted: isDatumHighlighted,
                  seriesId
                });
              }
              node.fill = format2 && format2.fill || fill;
              node.stroke = format2 && format2.stroke || stroke;
              node.strokeWidth = format2 && format2.strokeWidth !== void 0 ? format2.strokeWidth : strokeWidth;
              node.fillOpacity = fillOpacity !== null && fillOpacity !== void 0 ? fillOpacity : 1;
              node.strokeOpacity = (_b3 = (_a6 = marker.strokeOpacity) !== null && _a6 !== void 0 ? _a6 : strokeOpacity) !== null && _b3 !== void 0 ? _b3 : 1;
              node.size = format2 && format2.size !== void 0 ? format2.size : size;
              node.translationX = datum.point.x;
              node.translationY = datum.point.y;
              node.visible = node.size > 0 && !isNaN(datum.point.x) && !isNaN(datum.point.y);
              if (!customMarker || node.dirtyPath) {
                return;
              }
              node.path.clear({ trackChanges: true });
              node.updatePath();
              node.checkPathDirty();
            });
            if (!isDatumHighlighted) {
              this.marker.markClean();
            }
            return [
              2
              /*return*/
            ];
          });
        });
      };
      LineSeries2.prototype.updateLabelSelection = function(opts2) {
        return __awaiter12(this, void 0, void 0, function() {
          var labelData, labelSelection, _a5, shape, enabled;
          return __generator12(this, function(_b2) {
            labelData = opts2.labelData;
            labelSelection = opts2.labelSelection;
            _a5 = this.marker, shape = _a5.shape, enabled = _a5.enabled;
            labelData = shape && enabled ? labelData : [];
            return [2, labelSelection.update(labelData)];
          });
        });
      };
      LineSeries2.prototype.updateLabelNodes = function(opts2) {
        return __awaiter12(this, void 0, void 0, function() {
          var labelSelection, _a5, labelEnabled, fontStyle, fontWeight, fontSize, fontFamily, color;
          return __generator12(this, function(_b2) {
            labelSelection = opts2.labelSelection;
            _a5 = this.label, labelEnabled = _a5.enabled, fontStyle = _a5.fontStyle, fontWeight = _a5.fontWeight, fontSize = _a5.fontSize, fontFamily = _a5.fontFamily, color = _a5.color;
            labelSelection.each(function(text, datum) {
              var point = datum.point, label = datum.label;
              if (datum && label && labelEnabled) {
                text.fontStyle = fontStyle;
                text.fontWeight = fontWeight;
                text.fontSize = fontSize;
                text.fontFamily = fontFamily;
                text.textAlign = label.textAlign;
                text.textBaseline = label.textBaseline;
                text.text = label.text;
                text.x = point.x;
                text.y = point.y - 10;
                text.fill = color;
                text.visible = true;
              } else {
                text.visible = false;
              }
            });
            return [
              2
              /*return*/
            ];
          });
        });
      };
      LineSeries2.prototype.getNodeClickEvent = function(event, datum) {
        return new CartesianSeriesNodeClickEvent(this.xKey, this.yKey, event, datum, this);
      };
      LineSeries2.prototype.getNodeDoubleClickEvent = function(event, datum) {
        return new CartesianSeriesNodeDoubleClickEvent(this.xKey, this.yKey, event, datum, this);
      };
      LineSeries2.prototype.getTooltipHtml = function(nodeDatum) {
        var _a5 = this, xKey = _a5.xKey, yKey = _a5.yKey, xAxis = _a5.xAxis, yAxis = _a5.yAxis;
        if (!xKey || !yKey || !xAxis || !yAxis) {
          return "";
        }
        var _b2 = this, xName = _b2.xName, yName = _b2.yName, tooltip = _b2.tooltip, marker = _b2.marker, seriesId = _b2.id;
        var tooltipRenderer = tooltip.renderer, tooltipFormat = tooltip.format;
        var datum = nodeDatum.datum;
        var xValue = datum[xKey];
        var yValue = datum[yKey];
        var xString = xAxis.formatDatum(xValue);
        var yString = yAxis.formatDatum(yValue);
        var title = sanitizeHtml(this.title || yName);
        var content = sanitizeHtml(xString + ": " + yString);
        var markerFormatter = marker.formatter, fill = marker.fill, stroke = marker.stroke, markerStrokeWidth = marker.strokeWidth, size = marker.size;
        var strokeWidth = markerStrokeWidth !== void 0 ? markerStrokeWidth : this.strokeWidth;
        var format2 = void 0;
        if (markerFormatter) {
          format2 = markerFormatter({
            datum,
            xKey,
            yKey,
            fill,
            stroke,
            strokeWidth,
            size,
            highlighted: false,
            seriesId
          });
        }
        var color = format2 && format2.fill || fill;
        var defaults = {
          title,
          backgroundColor: color,
          content
        };
        if (tooltipFormat || tooltipRenderer) {
          var params = {
            datum,
            xKey,
            xValue,
            xName,
            yKey,
            yValue,
            yName,
            title,
            color,
            seriesId
          };
          if (tooltipFormat) {
            return toTooltipHtml({
              content: interpolate(tooltipFormat, params)
            }, defaults);
          }
          if (tooltipRenderer) {
            return toTooltipHtml(tooltipRenderer(params), defaults);
          }
        }
        return toTooltipHtml(defaults);
      };
      LineSeries2.prototype.getLegendData = function() {
        var _a5, _b2, _c2;
        var _d2 = this, id = _d2.id, data = _d2.data, xKey = _d2.xKey, yKey = _d2.yKey, yName = _d2.yName, visible = _d2.visible, title = _d2.title, marker = _d2.marker, stroke = _d2.stroke, strokeOpacity = _d2.strokeOpacity;
        if (!(data && data.length && xKey && yKey)) {
          return [];
        }
        return [
          {
            id,
            itemId: yKey,
            seriesId: id,
            enabled: visible,
            label: {
              text: title || yName || yKey
            },
            marker: {
              shape: marker.shape,
              fill: marker.fill || "rgba(0, 0, 0, 0)",
              stroke: marker.stroke || stroke || "rgba(0, 0, 0, 0)",
              fillOpacity: (_a5 = marker.fillOpacity) !== null && _a5 !== void 0 ? _a5 : 1,
              strokeOpacity: (_c2 = (_b2 = marker.strokeOpacity) !== null && _b2 !== void 0 ? _b2 : strokeOpacity) !== null && _c2 !== void 0 ? _c2 : 1
            }
          }
        ];
      };
      LineSeries2.prototype.isLabelEnabled = function() {
        return this.label.enabled;
      };
      LineSeries2.className = "LineSeries";
      LineSeries2.type = "line";
      __decorate34([
        Validate(OPT_STRING)
      ], LineSeries2.prototype, "title", void 0);
      __decorate34([
        Validate(OPT_COLOR_STRING)
      ], LineSeries2.prototype, "stroke", void 0);
      __decorate34([
        Validate(OPT_LINE_DASH)
      ], LineSeries2.prototype, "lineDash", void 0);
      __decorate34([
        Validate(NUMBER(0))
      ], LineSeries2.prototype, "lineDashOffset", void 0);
      __decorate34([
        Validate(NUMBER(0))
      ], LineSeries2.prototype, "strokeWidth", void 0);
      __decorate34([
        Validate(NUMBER(0, 1))
      ], LineSeries2.prototype, "strokeOpacity", void 0);
      __decorate34([
        Validate(STRING)
      ], LineSeries2.prototype, "_xKey", void 0);
      __decorate34([
        Validate(STRING)
      ], LineSeries2.prototype, "xName", void 0);
      __decorate34([
        Validate(STRING)
      ], LineSeries2.prototype, "_yKey", void 0);
      __decorate34([
        Validate(STRING)
      ], LineSeries2.prototype, "yName", void 0);
      return LineSeries2;
    }(CartesianSeries);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/series/cartesian/scatterSeries.js
var __extends45, __assign13, __decorate35, __awaiter13, __generator13, __read36, __spread22, __values26, ScatterSeriesNodeBaseClickEvent, ScatterSeriesNodeClickEvent, ScatterSeriesNodeDoubleClickEvent, ScatterSeriesTooltip, ScatterSeries;
var init_scatterSeries = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/series/cartesian/scatterSeries.js"() {
    init_series();
    init_linearScale();
    init_cartesianSeries();
    init_chartAxisDirection();
    init_util();
    init_tooltip();
    init_continuousScale();
    init_sanitize();
    init_label();
    init_hdpiCanvas();
    init_validation();
    init_dataModel();
    __extends45 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __assign13 = function() {
      __assign13 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign13.apply(this, arguments);
    };
    __decorate35 = function(decorators, target2, key2, desc) {
      var c = arguments.length, r = c < 3 ? target2 : desc === null ? desc = Object.getOwnPropertyDescriptor(target2, key2) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target2, key2, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target2, key2, r) : d(target2, key2)) || r;
      return c > 3 && r && Object.defineProperty(target2, key2, r), r;
    };
    __awaiter13 = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __generator13 = function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    __read36 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread22 = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read36(arguments[i]));
      return ar;
    };
    __values26 = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    ScatterSeriesNodeBaseClickEvent = /** @class */
    function(_super) {
      __extends45(ScatterSeriesNodeBaseClickEvent2, _super);
      function ScatterSeriesNodeBaseClickEvent2(sizeKey, xKey, yKey, nativeEvent, datum, series) {
        var _this = _super.call(this, xKey, yKey, nativeEvent, datum, series) || this;
        _this.sizeKey = sizeKey;
        return _this;
      }
      return ScatterSeriesNodeBaseClickEvent2;
    }(CartesianSeriesNodeBaseClickEvent);
    ScatterSeriesNodeClickEvent = /** @class */
    function(_super) {
      __extends45(ScatterSeriesNodeClickEvent2, _super);
      function ScatterSeriesNodeClickEvent2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "nodeClick";
        return _this;
      }
      return ScatterSeriesNodeClickEvent2;
    }(ScatterSeriesNodeBaseClickEvent);
    ScatterSeriesNodeDoubleClickEvent = /** @class */
    function(_super) {
      __extends45(ScatterSeriesNodeDoubleClickEvent2, _super);
      function ScatterSeriesNodeDoubleClickEvent2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "nodeDoubleClick";
        return _this;
      }
      return ScatterSeriesNodeDoubleClickEvent2;
    }(ScatterSeriesNodeBaseClickEvent);
    ScatterSeriesTooltip = /** @class */
    function(_super) {
      __extends45(ScatterSeriesTooltip2, _super);
      function ScatterSeriesTooltip2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.renderer = void 0;
        return _this;
      }
      __decorate35([
        Validate(OPT_FUNCTION)
      ], ScatterSeriesTooltip2.prototype, "renderer", void 0);
      return ScatterSeriesTooltip2;
    }(SeriesTooltip);
    ScatterSeries = /** @class */
    function(_super) {
      __extends45(ScatterSeries2, _super);
      function ScatterSeries2() {
        var _this = _super.call(this, {
          pickModes: [
            SeriesNodePickMode.NEAREST_BY_MAIN_CATEGORY_AXIS_FIRST,
            SeriesNodePickMode.NEAREST_NODE,
            SeriesNodePickMode.EXACT_SHAPE_MATCH
          ],
          pathsPerSeries: 0,
          hasMarkers: true
        }) || this;
        _this.sizeScale = new LinearScale();
        _this.marker = new CartesianSeriesMarker();
        _this.label = new Label();
        _this.title = void 0;
        _this.labelKey = void 0;
        _this.xName = "";
        _this.yName = "";
        _this.sizeName = "Size";
        _this.labelName = "Label";
        _this._xKey = "";
        _this._yKey = "";
        _this._sizeKey = void 0;
        _this.tooltip = new ScatterSeriesTooltip();
        var label = _this.label;
        label.enabled = false;
        return _this;
      }
      Object.defineProperty(ScatterSeries2.prototype, "xKey", {
        get: function() {
          return this._xKey;
        },
        set: function(value) {
          this._xKey = value;
          this.processedData = void 0;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(ScatterSeries2.prototype, "yKey", {
        get: function() {
          return this._yKey;
        },
        set: function(value) {
          this._yKey = value;
          this.processedData = void 0;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(ScatterSeries2.prototype, "sizeKey", {
        get: function() {
          return this._sizeKey;
        },
        set: function(value) {
          this._sizeKey = value;
          this.processedData = void 0;
        },
        enumerable: false,
        configurable: true
      });
      ScatterSeries2.prototype.processData = function() {
        var _a5, _b2, _c2, _d2;
        return __awaiter13(this, void 0, void 0, function() {
          var _e, xKey, yKey, sizeKey, xAxis, yAxis, marker, data, isContinuousX, isContinuousY, sizeKeyIdx, processedSize;
          return __generator13(this, function(_f) {
            _e = this, xKey = _e.xKey, yKey = _e.yKey, sizeKey = _e.sizeKey, xAxis = _e.xAxis, yAxis = _e.yAxis, marker = _e.marker, data = _e.data;
            isContinuousX = (xAxis === null || xAxis === void 0 ? void 0 : xAxis.scale) instanceof ContinuousScale;
            isContinuousY = (yAxis === null || yAxis === void 0 ? void 0 : yAxis.scale) instanceof ContinuousScale;
            this.dataModel = new DataModel({
              props: __spread22([
                valueProperty(xKey, isContinuousX),
                valueProperty(yKey, isContinuousY)
              ], sizeKey ? [valueProperty(sizeKey, true)] : []),
              dataVisible: this.visible
            });
            this.processedData = this.dataModel.processData(data !== null && data !== void 0 ? data : []);
            if (sizeKey) {
              sizeKeyIdx = (_b2 = (_a5 = this.dataModel.resolveProcessedDataIndex(sizeKey)) === null || _a5 === void 0 ? void 0 : _a5.index) !== null && _b2 !== void 0 ? _b2 : -1;
              processedSize = (_d2 = (_c2 = this.processedData) === null || _c2 === void 0 ? void 0 : _c2.domain.values[sizeKeyIdx]) !== null && _d2 !== void 0 ? _d2 : [];
              this.sizeScale.domain = marker.domain ? marker.domain : processedSize;
            }
            return [
              2
              /*return*/
            ];
          });
        });
      };
      ScatterSeries2.prototype.getDomain = function(direction) {
        var _a5, _b2, _c2, _d2, _e, _f;
        var xDataIdx = (_a5 = this.dataModel) === null || _a5 === void 0 ? void 0 : _a5.resolveProcessedDataIndex(this.xKey);
        var yDataIdx = (_b2 = this.dataModel) === null || _b2 === void 0 ? void 0 : _b2.resolveProcessedDataIndex(this.yKey);
        if (!xDataIdx || !yDataIdx) {
          return [];
        }
        if (direction === ChartAxisDirection.X) {
          return (_d2 = (_c2 = this.processedData) === null || _c2 === void 0 ? void 0 : _c2.domain.values[0]) !== null && _d2 !== void 0 ? _d2 : [];
        } else {
          return (_f = (_e = this.processedData) === null || _e === void 0 ? void 0 : _e.domain.values[1]) !== null && _f !== void 0 ? _f : [];
        }
      };
      ScatterSeries2.prototype.getNodeClickEvent = function(event, datum) {
        return new ScatterSeriesNodeClickEvent(this.sizeKey, this.xKey, this.yKey, event, datum, this);
      };
      ScatterSeries2.prototype.getNodeDoubleClickEvent = function(event, datum) {
        return new ScatterSeriesNodeDoubleClickEvent(this.sizeKey, this.xKey, this.yKey, event, datum, this);
      };
      ScatterSeries2.prototype.createNodeData = function() {
        var _a5, _b2, _c2, _d2, _e, _f;
        return __awaiter13(this, void 0, void 0, function() {
          var _g, visible, xAxis, yAxis, yKey, xKey, label, labelKey, xDataIdx, yDataIdx, xScale, yScale, xOffset, yOffset, _h, sizeScale, marker, nodeData, font, actualLength, _j, _k, _l, values, datum, x, y, text, size, markerSize;
          var e_1, _m;
          return __generator13(this, function(_o) {
            _g = this, visible = _g.visible, xAxis = _g.xAxis, yAxis = _g.yAxis, yKey = _g.yKey, xKey = _g.xKey, label = _g.label, labelKey = _g.labelKey;
            xDataIdx = (_a5 = this.dataModel) === null || _a5 === void 0 ? void 0 : _a5.resolveProcessedDataIndex(xKey);
            yDataIdx = (_b2 = this.dataModel) === null || _b2 === void 0 ? void 0 : _b2.resolveProcessedDataIndex(yKey);
            if (!(xDataIdx && yDataIdx && visible && xAxis && yAxis)) {
              return [2, []];
            }
            xScale = xAxis.scale;
            yScale = yAxis.scale;
            xOffset = (xScale.bandwidth || 0) / 2;
            yOffset = (yScale.bandwidth || 0) / 2;
            _h = this, sizeScale = _h.sizeScale, marker = _h.marker;
            nodeData = new Array((_d2 = (_c2 = this.processedData) === null || _c2 === void 0 ? void 0 : _c2.data.length) !== null && _d2 !== void 0 ? _d2 : 0);
            sizeScale.range = [marker.size, marker.maxSize];
            font = label.getFont();
            actualLength = 0;
            try {
              for (_j = __values26((_f = (_e = this.processedData) === null || _e === void 0 ? void 0 : _e.data) !== null && _f !== void 0 ? _f : []), _k = _j.next(); !_k.done; _k = _j.next()) {
                _l = _k.value, values = _l.values, datum = _l.datum;
                x = xScale.convert(values[xDataIdx.index]) + xOffset;
                y = yScale.convert(values[yDataIdx.index]) + yOffset;
                if (!this.checkRangeXY(x, y, xAxis, yAxis)) {
                  continue;
                }
                text = labelKey ? String(datum[labelKey]) : "";
                size = HdpiCanvas.getTextSize(text, font);
                markerSize = values.length > 2 ? sizeScale.convert(values[2]) : marker.size;
                nodeData[actualLength++] = {
                  series: this,
                  itemId: yKey,
                  yKey,
                  xKey,
                  datum,
                  point: { x, y, size: markerSize },
                  nodeMidPoint: { x, y },
                  label: __assign13({ text }, size)
                };
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_k && !_k.done && (_m = _j.return))
                  _m.call(_j);
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
            nodeData.length = actualLength;
            return [2, [{ itemId: this.yKey, nodeData, labelData: nodeData }]];
          });
        });
      };
      ScatterSeries2.prototype.isPathOrSelectionDirty = function() {
        return this.marker.isDirty();
      };
      ScatterSeries2.prototype.getLabelData = function() {
        var _a5;
        return (_a5 = this.contextNodeData) === null || _a5 === void 0 ? void 0 : _a5.reduce(function(r, n) {
          return r.concat(n.labelData);
        }, []);
      };
      ScatterSeries2.prototype.markerFactory = function() {
        var shape = this.marker.shape;
        var MarkerShape = getMarker(shape);
        return new MarkerShape();
      };
      ScatterSeries2.prototype.updateMarkerSelection = function(opts2) {
        return __awaiter13(this, void 0, void 0, function() {
          var nodeData, markerSelection, enabled, data;
          return __generator13(this, function(_a5) {
            nodeData = opts2.nodeData, markerSelection = opts2.markerSelection;
            enabled = this.marker.enabled;
            if (this.marker.isDirty()) {
              markerSelection.clear();
            }
            data = enabled ? nodeData : [];
            return [2, markerSelection.update(data)];
          });
        });
      };
      ScatterSeries2.prototype.updateMarkerNodes = function(opts2) {
        return __awaiter13(this, void 0, void 0, function() {
          var markerSelection, isDatumHighlighted, _a5, marker, xKey, yKey, sizeScale, _b2, markerFillOpacity, markerStrokeOpacity, markerStrokeWidth, _c2, highlightedFill, _d2, highlightFillOpacity, highlightedStroke, highlightedDatumStrokeWidth, seriesId, formatter, customMarker;
          return __generator13(this, function(_e) {
            markerSelection = opts2.markerSelection, isDatumHighlighted = opts2.isHighlight;
            _a5 = this, marker = _a5.marker, xKey = _a5.xKey, yKey = _a5.yKey, sizeScale = _a5.sizeScale, _b2 = _a5.marker, markerFillOpacity = _b2.fillOpacity, markerStrokeOpacity = _b2.strokeOpacity, markerStrokeWidth = _b2.strokeWidth, _c2 = _a5.highlightStyle.item, highlightedFill = _c2.fill, _d2 = _c2.fillOpacity, highlightFillOpacity = _d2 === void 0 ? markerFillOpacity : _d2, highlightedStroke = _c2.stroke, highlightedDatumStrokeWidth = _c2.strokeWidth, seriesId = _a5.id;
            formatter = marker.formatter;
            sizeScale.range = [marker.size, marker.maxSize];
            customMarker = typeof marker.shape === "function";
            markerSelection.each(function(node, datum) {
              var _a6, _b3, _c3, _d3, _e2, _f, _g;
              var fill = isDatumHighlighted && highlightedFill !== void 0 ? highlightedFill : marker.fill;
              var fillOpacity = isDatumHighlighted ? highlightFillOpacity : markerFillOpacity;
              var stroke = isDatumHighlighted && highlightedStroke !== void 0 ? highlightedStroke : marker.stroke;
              var strokeOpacity = markerStrokeOpacity;
              var strokeWidth = isDatumHighlighted && highlightedDatumStrokeWidth !== void 0 ? highlightedDatumStrokeWidth : markerStrokeWidth !== null && markerStrokeWidth !== void 0 ? markerStrokeWidth : 1;
              var size = (_b3 = (_a6 = datum.point) === null || _a6 === void 0 ? void 0 : _a6.size) !== null && _b3 !== void 0 ? _b3 : 0;
              var format2 = void 0;
              if (formatter) {
                format2 = formatter({
                  datum: datum.datum,
                  xKey,
                  yKey,
                  fill,
                  stroke,
                  strokeWidth,
                  size,
                  highlighted: isDatumHighlighted,
                  seriesId
                });
              }
              node.fill = format2 && format2.fill || fill;
              node.stroke = format2 && format2.stroke || stroke;
              node.strokeWidth = (_c3 = format2 === null || format2 === void 0 ? void 0 : format2.strokeWidth) !== null && _c3 !== void 0 ? _c3 : strokeWidth;
              node.size = format2 && format2.size !== void 0 ? format2.size : size;
              node.fillOpacity = fillOpacity !== null && fillOpacity !== void 0 ? fillOpacity : 1;
              node.strokeOpacity = strokeOpacity !== null && strokeOpacity !== void 0 ? strokeOpacity : 1;
              node.translationX = (_e2 = (_d3 = datum.point) === null || _d3 === void 0 ? void 0 : _d3.x) !== null && _e2 !== void 0 ? _e2 : 0;
              node.translationY = (_g = (_f = datum.point) === null || _f === void 0 ? void 0 : _f.y) !== null && _g !== void 0 ? _g : 0;
              node.visible = node.size > 0;
              if (!customMarker || node.dirtyPath) {
                return;
              }
              node.path.clear({ trackChanges: true });
              node.updatePath();
              node.checkPathDirty();
            });
            if (!isDatumHighlighted) {
              this.marker.markClean();
            }
            return [
              2
              /*return*/
            ];
          });
        });
      };
      ScatterSeries2.prototype.updateLabelSelection = function(opts2) {
        var _a5, _b2;
        return __awaiter13(this, void 0, void 0, function() {
          var labelSelection, enabled, placedLabels, placedNodeDatum;
          return __generator13(this, function(_c2) {
            labelSelection = opts2.labelSelection;
            enabled = this.label.enabled;
            placedLabels = enabled ? (_b2 = (_a5 = this.chart) === null || _a5 === void 0 ? void 0 : _a5.placeLabels().get(this)) !== null && _b2 !== void 0 ? _b2 : [] : [];
            placedNodeDatum = placedLabels.map(function(v) {
              return __assign13(__assign13({}, v.datum), { point: {
                x: v.x,
                y: v.y,
                size: v.datum.point.size
              } });
            });
            return [2, labelSelection.update(placedNodeDatum)];
          });
        });
      };
      ScatterSeries2.prototype.updateLabelNodes = function(opts2) {
        return __awaiter13(this, void 0, void 0, function() {
          var labelSelection, label;
          return __generator13(this, function(_a5) {
            labelSelection = opts2.labelSelection;
            label = this.label;
            labelSelection.each(function(text, datum) {
              var _a6, _b2, _c2, _d2;
              text.text = datum.label.text;
              text.fill = label.color;
              text.x = (_b2 = (_a6 = datum.point) === null || _a6 === void 0 ? void 0 : _a6.x) !== null && _b2 !== void 0 ? _b2 : 0;
              text.y = (_d2 = (_c2 = datum.point) === null || _c2 === void 0 ? void 0 : _c2.y) !== null && _d2 !== void 0 ? _d2 : 0;
              text.fontStyle = label.fontStyle;
              text.fontWeight = label.fontWeight;
              text.fontSize = label.fontSize;
              text.fontFamily = label.fontFamily;
              text.textAlign = "left";
              text.textBaseline = "top";
            });
            return [
              2
              /*return*/
            ];
          });
        });
      };
      ScatterSeries2.prototype.getTooltipHtml = function(nodeDatum) {
        var _a5, _b2, _c2;
        var _d2 = this, xKey = _d2.xKey, yKey = _d2.yKey, xAxis = _d2.xAxis, yAxis = _d2.yAxis;
        if (!xKey || !yKey || !xAxis || !yAxis) {
          return "";
        }
        var _e = this, marker = _e.marker, tooltip = _e.tooltip, xName = _e.xName, yName = _e.yName, sizeKey = _e.sizeKey, sizeName = _e.sizeName, labelKey = _e.labelKey, labelName = _e.labelName, seriesId = _e.id;
        var fill = marker.fill, stroke = marker.stroke;
        var strokeWidth = this.getStrokeWidth((_a5 = marker.strokeWidth) !== null && _a5 !== void 0 ? _a5 : 1);
        var formatter = this.marker.formatter;
        var format2 = void 0;
        if (formatter) {
          format2 = formatter({
            datum: nodeDatum,
            xKey,
            yKey,
            fill,
            stroke,
            strokeWidth,
            size: (_c2 = (_b2 = nodeDatum.point) === null || _b2 === void 0 ? void 0 : _b2.size) !== null && _c2 !== void 0 ? _c2 : 0,
            highlighted: false,
            seriesId
          });
        }
        var color = format2 && format2.fill || fill || "gray";
        var title = this.title || yName;
        var datum = nodeDatum.datum;
        var xValue = datum[xKey];
        var yValue = datum[yKey];
        var xString = sanitizeHtml(xAxis.formatDatum(xValue));
        var yString = sanitizeHtml(yAxis.formatDatum(yValue));
        var content = "<b>" + sanitizeHtml(xName || xKey) + "</b>: " + xString + "<br>" + ("<b>" + sanitizeHtml(yName || yKey) + "</b>: " + yString);
        if (sizeKey) {
          content += "<br><b>" + sanitizeHtml(sizeName || sizeKey) + "</b>: " + sanitizeHtml(datum[sizeKey]);
        }
        if (labelKey) {
          content = "<b>" + sanitizeHtml(labelName || labelKey) + "</b>: " + sanitizeHtml(datum[labelKey]) + "<br>" + content;
        }
        var defaults = {
          title,
          backgroundColor: color,
          content
        };
        var tooltipRenderer = tooltip.renderer;
        if (tooltipRenderer) {
          return toTooltipHtml(tooltipRenderer({
            datum,
            xKey,
            xValue,
            xName,
            yKey,
            yValue,
            yName,
            sizeKey,
            sizeName,
            labelKey,
            labelName,
            title,
            color,
            seriesId
          }), defaults);
        }
        return toTooltipHtml(defaults);
      };
      ScatterSeries2.prototype.getLegendData = function() {
        var _a5 = this, id = _a5.id, data = _a5.data, xKey = _a5.xKey, yKey = _a5.yKey, yName = _a5.yName, title = _a5.title, visible = _a5.visible, marker = _a5.marker;
        var fill = marker.fill, stroke = marker.stroke, fillOpacity = marker.fillOpacity, strokeOpacity = marker.strokeOpacity;
        if (!(data && data.length && xKey && yKey)) {
          return [];
        }
        return [
          {
            id,
            itemId: yKey,
            seriesId: id,
            enabled: visible,
            label: {
              text: title || yName || yKey
            },
            marker: {
              shape: marker.shape,
              fill: marker.fill || fill || "rgba(0, 0, 0, 0)",
              stroke: marker.stroke || stroke || "rgba(0, 0, 0, 0)",
              fillOpacity: fillOpacity !== null && fillOpacity !== void 0 ? fillOpacity : 1,
              strokeOpacity: strokeOpacity !== null && strokeOpacity !== void 0 ? strokeOpacity : 1
            }
          }
        ];
      };
      ScatterSeries2.prototype.isLabelEnabled = function() {
        return this.label.enabled;
      };
      ScatterSeries2.className = "ScatterSeries";
      ScatterSeries2.type = "scatter";
      __decorate35([
        Validate(OPT_STRING)
      ], ScatterSeries2.prototype, "title", void 0);
      __decorate35([
        Validate(OPT_STRING)
      ], ScatterSeries2.prototype, "labelKey", void 0);
      __decorate35([
        Validate(STRING)
      ], ScatterSeries2.prototype, "xName", void 0);
      __decorate35([
        Validate(STRING)
      ], ScatterSeries2.prototype, "yName", void 0);
      __decorate35([
        Validate(OPT_STRING)
      ], ScatterSeries2.prototype, "sizeName", void 0);
      __decorate35([
        Validate(OPT_STRING)
      ], ScatterSeries2.prototype, "labelName", void 0);
      __decorate35([
        Validate(STRING)
      ], ScatterSeries2.prototype, "_xKey", void 0);
      __decorate35([
        Validate(STRING)
      ], ScatterSeries2.prototype, "_yKey", void 0);
      __decorate35([
        Validate(OPT_STRING)
      ], ScatterSeries2.prototype, "_sizeKey", void 0);
      return ScatterSeries2;
    }(CartesianSeries);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/util/sector.js
function isPointInSector(x, y, sector) {
  var radius = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));
  var innerRadius = sector.innerRadius, outerRadius = sector.outerRadius;
  if (radius < Math.min(innerRadius, outerRadius) || radius > Math.max(innerRadius, outerRadius)) {
    return false;
  }
  var angle = Math.atan2(y, x);
  if (angle < -Math.PI / 2) {
    angle += 2 * Math.PI;
  }
  var startAngle = sector.startAngle, endAngle = sector.endAngle;
  if (endAngle === -Math.PI / 2) {
    return angle < startAngle;
  }
  if (startAngle === 3 * Math.PI / 2) {
    return angle > endAngle;
  }
  return angle >= endAngle && angle <= startAngle;
}
function lineCollidesSector(line, sector) {
  var startAngle = sector.startAngle, endAngle = sector.endAngle, innerRadius = sector.innerRadius, outerRadius = sector.outerRadius;
  var outerStart = { x: outerRadius * Math.cos(startAngle), y: outerRadius * Math.sin(startAngle) };
  var outerEnd = { x: outerRadius * Math.cos(endAngle), y: outerRadius * Math.sin(endAngle) };
  var innerStart = innerRadius === 0 ? { x: 0, y: 0 } : { x: innerRadius * Math.cos(startAngle), y: innerRadius * Math.sin(startAngle) };
  var innerEnd = innerRadius === 0 ? { x: 0, y: 0 } : { x: innerRadius * Math.cos(endAngle), y: innerRadius * Math.sin(endAngle) };
  return segmentIntersection(line.start.x, line.start.y, line.end.x, line.end.y, outerStart.x, outerStart.y, innerStart.x, innerStart.y) != null || segmentIntersection(line.start.x, line.start.y, line.end.x, line.end.y, outerEnd.x, outerEnd.y, innerEnd.x, innerEnd.y) != null || arcIntersections(0, 0, outerRadius, startAngle, endAngle, true, line.start.x, line.start.y, line.end.x, line.end.y).length > 0;
}
function boxCollidesSector(box, sector) {
  var topLeft = { x: box.x, y: box.y };
  var topRight = { x: box.x + box.width, y: box.y };
  var bottomLeft = { x: box.x, y: box.y + box.height };
  var bottomRight = { x: box.x + box.width, y: box.y + box.height };
  return lineCollidesSector({ start: topLeft, end: topRight }, sector) || lineCollidesSector({ start: bottomLeft, end: bottomRight }, sector);
}
var init_sector = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/util/sector.js"() {
    init_intersection();
  }
});

// node_modules/ag-charts-community/dist/esm/es5/scene/shape/sector.js
var __extends46, __decorate36, Sector;
var init_sector2 = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/scene/shape/sector.js"() {
    init_path();
    init_angle();
    init_number();
    init_sector();
    init_bbox();
    __extends46 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate36 = function(decorators, target2, key2, desc) {
      var c = arguments.length, r = c < 3 ? target2 : desc === null ? desc = Object.getOwnPropertyDescriptor(target2, key2) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target2, key2, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target2, key2, r) : d(target2, key2)) || r;
      return c > 3 && r && Object.defineProperty(target2, key2, r), r;
    };
    Sector = /** @class */
    function(_super) {
      __extends46(Sector2, _super);
      function Sector2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.centerX = 0;
        _this.centerY = 0;
        _this.innerRadius = 10;
        _this.outerRadius = 20;
        _this.startAngle = 0;
        _this.endAngle = Math.PI * 2;
        _this.angleOffset = 0;
        return _this;
      }
      Sector2.prototype.computeBBox = function() {
        var radius = this.outerRadius;
        return new BBox(this.centerX - radius, this.centerY - radius, radius * 2, radius * 2);
      };
      Sector2.prototype.updatePath = function() {
        var path = this.path;
        var angleOffset = this.angleOffset;
        var startAngle = Math.min(this.startAngle, this.endAngle) + angleOffset;
        var endAngle = Math.max(this.startAngle, this.endAngle) + angleOffset;
        var innerRadius = Math.min(this.innerRadius, this.outerRadius);
        var outerRadius = Math.max(this.innerRadius, this.outerRadius);
        var fullPie = isEqual(normalizeAngle360(this.startAngle), normalizeAngle360(this.endAngle));
        var centerX = this.centerX;
        var centerY = this.centerY;
        path.clear();
        if (fullPie) {
          path.arc(centerX, centerY, outerRadius, startAngle, endAngle);
          if (innerRadius > 0) {
            path.moveTo(centerX + innerRadius * Math.cos(endAngle), centerY + innerRadius * Math.sin(endAngle));
            path.arc(centerX, centerY, innerRadius, endAngle, startAngle, true);
          }
        } else {
          path.moveTo(centerX + innerRadius * Math.cos(startAngle), centerY + innerRadius * Math.sin(startAngle));
          path.arc(centerX, centerY, outerRadius, startAngle, endAngle);
          if (innerRadius > 0) {
            path.arc(centerX, centerY, innerRadius, endAngle, startAngle, true);
          } else {
            path.lineTo(centerX, centerY);
          }
        }
        path.closePath();
        this.dirtyPath = false;
      };
      Sector2.prototype.isPointInPath = function(x, y) {
        var angleOffset = this.angleOffset;
        var startAngle = this.startAngle + angleOffset;
        var endAngle = this.endAngle + angleOffset;
        var innerRadius = Math.min(this.innerRadius, this.outerRadius);
        var outerRadius = Math.max(this.innerRadius, this.outerRadius);
        var point = this.transformPoint(x, y);
        return isPointInSector(point.x, point.y, { startAngle, endAngle, innerRadius, outerRadius });
      };
      Sector2.className = "Sector";
      __decorate36([
        ScenePathChangeDetection()
      ], Sector2.prototype, "centerX", void 0);
      __decorate36([
        ScenePathChangeDetection()
      ], Sector2.prototype, "centerY", void 0);
      __decorate36([
        ScenePathChangeDetection()
      ], Sector2.prototype, "innerRadius", void 0);
      __decorate36([
        ScenePathChangeDetection()
      ], Sector2.prototype, "outerRadius", void 0);
      __decorate36([
        ScenePathChangeDetection()
      ], Sector2.prototype, "startAngle", void 0);
      __decorate36([
        ScenePathChangeDetection()
      ], Sector2.prototype, "endAngle", void 0);
      __decorate36([
        ScenePathChangeDetection()
      ], Sector2.prototype, "angleOffset", void 0);
      return Sector2;
    }(Path);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/series/polar/pieSeries.js
var __extends47, __assign14, __decorate37, __awaiter14, __generator14, __read37, __spread23, PieSeriesNodeBaseClickEvent, PieSeriesNodeClickEvent, PieSeriesNodeDoubleClickEvent, PieNodeTag, PieSeriesCalloutLabel, PieSeriesSectorLabel, PieSeriesCalloutLine, PieSeriesTooltip, PieTitle, DoughnutInnerLabel, DoughnutInnerCircle, PieSeries;
var init_pieSeries = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/series/polar/pieSeries.js"() {
    init_group();
    init_line();
    init_text();
    init_circle();
    init_selection();
    init_linearScale();
    init_sector2();
    init_bbox();
    init_series();
    init_label();
    init_node();
    init_angle();
    init_number();
    init_layers();
    init_caption();
    init_polarSeries();
    init_chartAxisDirection();
    init_tooltip();
    init_sector();
    init_deprecation();
    init_validation();
    init_logger();
    __extends47 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __assign14 = function() {
      __assign14 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign14.apply(this, arguments);
    };
    __decorate37 = function(decorators, target2, key2, desc) {
      var c = arguments.length, r = c < 3 ? target2 : desc === null ? desc = Object.getOwnPropertyDescriptor(target2, key2) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target2, key2, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target2, key2, r) : d(target2, key2)) || r;
      return c > 3 && r && Object.defineProperty(target2, key2, r), r;
    };
    __awaiter14 = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __generator14 = function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    __read37 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread23 = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read37(arguments[i]));
      return ar;
    };
    PieSeriesNodeBaseClickEvent = /** @class */
    function(_super) {
      __extends47(PieSeriesNodeBaseClickEvent2, _super);
      function PieSeriesNodeBaseClickEvent2(angleKey, calloutLabelKey, sectorLabelKey, radiusKey, nativeEvent, datum, series) {
        var _this = _super.call(this, nativeEvent, datum, series) || this;
        _this.angleKey = angleKey;
        _this.calloutLabelKey = calloutLabelKey;
        _this.sectorLabelKey = sectorLabelKey;
        _this.radiusKey = radiusKey;
        return _this;
      }
      __decorate37([
        DeprecatedAndRenamedTo("calloutLabelKey")
      ], PieSeriesNodeBaseClickEvent2.prototype, "labelKey", void 0);
      return PieSeriesNodeBaseClickEvent2;
    }(SeriesNodeBaseClickEvent);
    PieSeriesNodeClickEvent = /** @class */
    function(_super) {
      __extends47(PieSeriesNodeClickEvent2, _super);
      function PieSeriesNodeClickEvent2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "nodeClick";
        return _this;
      }
      return PieSeriesNodeClickEvent2;
    }(PieSeriesNodeBaseClickEvent);
    PieSeriesNodeDoubleClickEvent = /** @class */
    function(_super) {
      __extends47(PieSeriesNodeDoubleClickEvent2, _super);
      function PieSeriesNodeDoubleClickEvent2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "nodeDoubleClick";
        return _this;
      }
      return PieSeriesNodeDoubleClickEvent2;
    }(PieSeriesNodeBaseClickEvent);
    (function(PieNodeTag2) {
      PieNodeTag2[PieNodeTag2["Sector"] = 0] = "Sector";
      PieNodeTag2[PieNodeTag2["Callout"] = 1] = "Callout";
      PieNodeTag2[PieNodeTag2["Label"] = 2] = "Label";
    })(PieNodeTag || (PieNodeTag = {}));
    PieSeriesCalloutLabel = /** @class */
    function(_super) {
      __extends47(PieSeriesCalloutLabel2, _super);
      function PieSeriesCalloutLabel2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.offset = 3;
        _this.minAngle = 0;
        _this.formatter = void 0;
        _this.minSpacing = 4;
        _this.maxCollisionOffset = 50;
        return _this;
      }
      __decorate37([
        Validate(NUMBER(0))
      ], PieSeriesCalloutLabel2.prototype, "offset", void 0);
      __decorate37([
        Validate(NUMBER(0))
      ], PieSeriesCalloutLabel2.prototype, "minAngle", void 0);
      __decorate37([
        Validate(OPT_FUNCTION)
      ], PieSeriesCalloutLabel2.prototype, "formatter", void 0);
      __decorate37([
        Validate(NUMBER(0))
      ], PieSeriesCalloutLabel2.prototype, "minSpacing", void 0);
      __decorate37([
        Validate(NUMBER(0))
      ], PieSeriesCalloutLabel2.prototype, "maxCollisionOffset", void 0);
      return PieSeriesCalloutLabel2;
    }(Label);
    PieSeriesSectorLabel = /** @class */
    function(_super) {
      __extends47(PieSeriesSectorLabel2, _super);
      function PieSeriesSectorLabel2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.positionOffset = 0;
        _this.positionRatio = 0.5;
        _this.formatter = void 0;
        return _this;
      }
      __decorate37([
        Validate(NUMBER())
      ], PieSeriesSectorLabel2.prototype, "positionOffset", void 0);
      __decorate37([
        Validate(NUMBER(0, 1))
      ], PieSeriesSectorLabel2.prototype, "positionRatio", void 0);
      __decorate37([
        Validate(OPT_FUNCTION)
      ], PieSeriesSectorLabel2.prototype, "formatter", void 0);
      return PieSeriesSectorLabel2;
    }(Label);
    PieSeriesCalloutLine = /** @class */
    function() {
      function PieSeriesCalloutLine2() {
        this.colors = void 0;
        this.length = 10;
        this.strokeWidth = 1;
      }
      __decorate37([
        Validate(OPT_COLOR_STRING_ARRAY)
      ], PieSeriesCalloutLine2.prototype, "colors", void 0);
      __decorate37([
        Validate(NUMBER(0))
      ], PieSeriesCalloutLine2.prototype, "length", void 0);
      __decorate37([
        Validate(NUMBER(0))
      ], PieSeriesCalloutLine2.prototype, "strokeWidth", void 0);
      return PieSeriesCalloutLine2;
    }();
    PieSeriesTooltip = /** @class */
    function(_super) {
      __extends47(PieSeriesTooltip2, _super);
      function PieSeriesTooltip2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.renderer = void 0;
        return _this;
      }
      __decorate37([
        Validate(OPT_FUNCTION)
      ], PieSeriesTooltip2.prototype, "renderer", void 0);
      return PieSeriesTooltip2;
    }(SeriesTooltip);
    PieTitle = /** @class */
    function(_super) {
      __extends47(PieTitle2, _super);
      function PieTitle2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.showInLegend = false;
        return _this;
      }
      __decorate37([
        Validate(BOOLEAN)
      ], PieTitle2.prototype, "showInLegend", void 0);
      return PieTitle2;
    }(Caption);
    DoughnutInnerLabel = /** @class */
    function(_super) {
      __extends47(DoughnutInnerLabel2, _super);
      function DoughnutInnerLabel2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.text = "";
        _this.margin = 2;
        return _this;
      }
      __decorate37([
        Validate(STRING)
      ], DoughnutInnerLabel2.prototype, "text", void 0);
      __decorate37([
        Validate(NUMBER())
      ], DoughnutInnerLabel2.prototype, "margin", void 0);
      return DoughnutInnerLabel2;
    }(Label);
    DoughnutInnerCircle = /** @class */
    function() {
      function DoughnutInnerCircle2() {
        this.fill = "transparent";
        this.fillOpacity = 1;
      }
      __decorate37([
        Validate(COLOR_STRING)
      ], DoughnutInnerCircle2.prototype, "fill", void 0);
      __decorate37([
        Validate(OPT_NUMBER(0, 1))
      ], DoughnutInnerCircle2.prototype, "fillOpacity", void 0);
      return DoughnutInnerCircle2;
    }();
    PieSeries = /** @class */
    function(_super) {
      __extends47(PieSeries2, _super);
      function PieSeries2() {
        var _this = _super.call(this, { useLabelLayer: true }) || this;
        _this.radiusScale = new LinearScale();
        _this.groupSelection = Selection.select(_this.contentGroup, Group);
        _this.highlightSelection = Selection.select(_this.highlightGroup, Group);
        _this.groupSelectionData = [];
        _this.sectorFormatData = [];
        _this.angleScale = function() {
          var scale = new LinearScale();
          scale.domain = [0, 1];
          scale.range = [-Math.PI, Math.PI].map(function(angle) {
            return angle + Math.PI / 2;
          });
          return scale;
        }();
        _this.seriesItemEnabled = [];
        _this.calloutLabel = new PieSeriesCalloutLabel();
        _this.label = _this.calloutLabel;
        _this.sectorLabel = new PieSeriesSectorLabel();
        _this.calloutLine = new PieSeriesCalloutLine();
        _this.callout = _this.calloutLine;
        _this.tooltip = new PieSeriesTooltip();
        _this.angleKey = "";
        _this.angleName = "";
        _this.innerLabels = [];
        _this.radiusKey = void 0;
        _this.radiusName = void 0;
        _this.radiusMin = void 0;
        _this.radiusMax = void 0;
        _this.calloutLabelKey = void 0;
        _this.calloutLabelName = void 0;
        _this.labelKey = void 0;
        _this.labelName = void 0;
        _this.sectorLabelKey = void 0;
        _this.sectorLabelName = void 0;
        _this.legendItemKey = void 0;
        _this.fills = ["#c16068", "#a2bf8a", "#ebcc87", "#80a0c3", "#b58dae", "#85c0d1"];
        _this.strokes = ["#874349", "#718661", "#a48f5f", "#5a7088", "#7f637a", "#5d8692"];
        _this.fillOpacity = 1;
        _this.strokeOpacity = 1;
        _this.lineDash = [0];
        _this.lineDashOffset = 0;
        _this.formatter = void 0;
        _this.rotation = 0;
        _this.outerRadiusOffset = 0;
        _this.outerRadiusRatio = 1;
        _this.innerRadiusOffset = 0;
        _this.innerRadiusRatio = 1;
        _this.strokeWidth = 1;
        _this.shadow = void 0;
        _this.highlightStyle = new HighlightStyle();
        _this.datumSectorRefs = /* @__PURE__ */ new WeakMap();
        _this.backgroundGroup = _this.rootGroup.appendChild(new Group({
          name: _this.id + "-background",
          layer: true,
          zIndex: Layers.SERIES_BACKGROUND_ZINDEX
        }));
        var pieCalloutLabels = new Group({ name: "pieCalloutLabels" });
        var pieSectorLabels = new Group({ name: "pieSectorLabels" });
        var innerLabels = new Group({ name: "innerLabels" });
        _this.labelGroup.append(pieCalloutLabels);
        _this.labelGroup.append(pieSectorLabels);
        _this.labelGroup.append(innerLabels);
        _this.calloutLabelSelection = Selection.select(pieCalloutLabels, Group);
        _this.sectorLabelSelection = Selection.select(pieSectorLabels, Text);
        _this.innerLabelsSelection = Selection.select(innerLabels, Text);
        return _this;
      }
      Object.defineProperty(PieSeries2.prototype, "title", {
        get: function() {
          return this._title;
        },
        set: function(value) {
          var _a5, _b2;
          var oldTitle = this._title;
          if (oldTitle !== value) {
            if (oldTitle) {
              (_a5 = this.labelGroup) === null || _a5 === void 0 ? void 0 : _a5.removeChild(oldTitle.node);
            }
            if (value) {
              value.node.textBaseline = "bottom";
              (_b2 = this.labelGroup) === null || _b2 === void 0 ? void 0 : _b2.appendChild(value.node);
            }
            this._title = value;
          }
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(PieSeries2.prototype, "data", {
        get: function() {
          return this._data;
        },
        set: function(input) {
          this._data = input;
          this.processSeriesItemEnabled();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(PieSeries2.prototype, "innerCircle", {
        get: function() {
          return this._innerCircleConfig;
        },
        set: function(value) {
          var _a5;
          var oldCircleCfg = this._innerCircleConfig;
          if (oldCircleCfg !== value) {
            var oldNode = this._innerCircleNode;
            var circle = void 0;
            if (oldNode) {
              this.backgroundGroup.removeChild(oldNode);
            }
            if (value) {
              circle = new Circle();
              circle.fill = value.fill;
              circle.fillOpacity = (_a5 = value.fillOpacity) !== null && _a5 !== void 0 ? _a5 : 1;
              this.backgroundGroup.appendChild(circle);
            }
            this._innerCircleConfig = value;
            this._innerCircleNode = circle;
          }
        },
        enumerable: false,
        configurable: true
      });
      PieSeries2.prototype.visibleChanged = function() {
        this.processSeriesItemEnabled();
      };
      PieSeries2.prototype.processSeriesItemEnabled = function() {
        var _a5 = this, data = _a5.data, visible = _a5.visible;
        this.seriesItemEnabled = (data === null || data === void 0 ? void 0 : data.map(function() {
          return visible;
        })) || [];
      };
      PieSeries2.prototype.getDomain = function(direction) {
        if (direction === ChartAxisDirection.X) {
          return this.angleScale.domain;
        } else {
          return this.radiusScale.domain;
        }
      };
      PieSeries2.prototype.processData = function() {
        return __awaiter14(this, void 0, void 0, function() {
          var _a5, angleKey, radiusKey, seriesItemEnabled, angleScale, groupSelectionData, sectorFormatData, calloutLabel, sectorLabel, seriesId, data, angleData, angleDataTotal, angleDataRatios, labelFormatter, labelKey, sectorLabelKey, labelData, sectorLabelData, radiusData, getLabelFormatterParams, showValueDeprecationWarning_1, sectorLabelFormatter, _b2, radiusMin, radiusMax, radii, min_1, max, delta_1, rotation, halfPi, datumIndex, quadrantTextOpts, end;
          var _this = this;
          return __generator14(this, function(_c2) {
            _a5 = this, angleKey = _a5.angleKey, radiusKey = _a5.radiusKey, seriesItemEnabled = _a5.seriesItemEnabled, angleScale = _a5.angleScale, groupSelectionData = _a5.groupSelectionData, sectorFormatData = _a5.sectorFormatData, calloutLabel = _a5.calloutLabel, sectorLabel = _a5.sectorLabel, seriesId = _a5.id;
            data = angleKey && this.data ? this.data : [];
            angleData = data.map(function(datum, index) {
              return seriesItemEnabled[index] && Math.abs(+datum[angleKey]) || 0;
            });
            angleDataTotal = angleData.reduce(function(a, b) {
              return a + b;
            }, 0);
            angleDataRatios = function() {
              var sum = 0;
              return angleData.map(function(datum) {
                return sum += datum / angleDataTotal;
              });
            }();
            labelFormatter = calloutLabel.formatter;
            labelKey = calloutLabel.enabled ? this.calloutLabelKey : void 0;
            sectorLabelKey = sectorLabel.enabled ? this.sectorLabelKey : void 0;
            labelData = [];
            sectorLabelData = [];
            radiusData = [];
            getLabelFormatterParams = function(datum) {
              return {
                datum,
                angleKey,
                angleValue: datum[angleKey],
                angleName: _this.angleName,
                radiusKey,
                radiusValue: radiusKey ? datum[radiusKey] : void 0,
                radiusName: _this.radiusName,
                labelKey,
                labelValue: labelKey ? datum[labelKey] : void 0,
                labelName: _this.calloutLabelName,
                calloutLabelKey: labelKey,
                calloutLabelValue: labelKey ? datum[labelKey] : void 0,
                calloutLabelName: _this.calloutLabelName,
                sectorLabelKey,
                sectorLabelValue: sectorLabelKey ? datum[sectorLabelKey] : void 0,
                sectorLabelName: _this.sectorLabelName,
                seriesId
              };
            };
            if (labelKey) {
              if (labelFormatter) {
                showValueDeprecationWarning_1 = function() {
                  return Logger.warnOnce("the use of { value } in the pie chart label formatter function is deprecated. Please use { datum, labelKey, ... } instead.");
                };
                labelData = data.map(function(datum) {
                  var deprecatedValue = datum[labelKey];
                  var formatterParams = __assign14(__assign14({}, getLabelFormatterParams(datum)), {
                    get value() {
                      showValueDeprecationWarning_1();
                      return deprecatedValue;
                    },
                    set value(v) {
                      showValueDeprecationWarning_1();
                      deprecatedValue = v;
                    }
                  });
                  return labelFormatter(formatterParams);
                });
              } else {
                labelData = data.map(function(datum) {
                  return String(datum[labelKey]);
                });
              }
            }
            sectorLabelFormatter = sectorLabel.formatter;
            if (sectorLabelKey) {
              if (sectorLabelFormatter) {
                sectorLabelData = data.map(function(datum) {
                  var formatterParams = getLabelFormatterParams(datum);
                  return sectorLabelFormatter(formatterParams);
                });
              } else {
                sectorLabelData = data.map(function(datum) {
                  return String(datum[sectorLabelKey]);
                });
              }
            }
            if (radiusKey) {
              _b2 = this, radiusMin = _b2.radiusMin, radiusMax = _b2.radiusMax;
              radii = data.map(function(datum) {
                return Math.abs(datum[radiusKey]);
              });
              min_1 = radiusMin !== null && radiusMin !== void 0 ? radiusMin : 0;
              max = radiusMax ? radiusMax : Math.max.apply(Math, __spread23(radii));
              delta_1 = max - min_1;
              radiusData = radii.map(function(value) {
                return delta_1 ? (value - min_1) / delta_1 : 1;
              });
            }
            groupSelectionData.length = 0;
            sectorFormatData.length = 0;
            sectorFormatData.push.apply(sectorFormatData, __spread23(data.map(function(datum, datumIdx) {
              return _this.getSectorFormat(datum, datumIdx, datumIdx, false);
            })));
            rotation = toRadians(this.rotation);
            halfPi = Math.PI / 2;
            datumIndex = 0;
            quadrantTextOpts = [
              { textAlign: "center", textBaseline: "bottom" },
              { textAlign: "left", textBaseline: "middle" },
              { textAlign: "center", textBaseline: "hanging" },
              { textAlign: "right", textBaseline: "middle" }
            ];
            end = 0;
            angleDataRatios.forEach(function(start) {
              if (isNaN(start)) {
                return;
              }
              var radius = radiusKey ? radiusData[datumIndex] : 1;
              var startAngle = angleScale.convert(start) + rotation;
              var endAngle = angleScale.convert(end) + rotation;
              var midAngle = (startAngle + endAngle) / 2;
              var span = Math.abs(endAngle - startAngle);
              var midCos = Math.cos(midAngle);
              var midSin = Math.sin(midAngle);
              var labelMinAngle = toRadians(calloutLabel.minAngle);
              var labelVisible = labelKey && span > labelMinAngle;
              var midAngle180 = normalizeAngle180(midAngle);
              var quadrantStart = -3 * Math.PI / 4;
              var quadrantOffset = midAngle180 - quadrantStart;
              var quadrant = Math.floor(quadrantOffset / halfPi);
              var quadrantIndex = mod(quadrant, quadrantTextOpts.length);
              var _a6 = quadrantTextOpts[quadrantIndex], textAlign = _a6.textAlign, textBaseline = _a6.textBaseline;
              var datum = data[datumIndex];
              var itemId = datumIndex;
              groupSelectionData.push({
                series: _this,
                datum,
                itemId,
                index: datumIndex,
                radius,
                startAngle,
                endAngle,
                midAngle,
                midCos,
                midSin,
                calloutLabel: labelVisible ? {
                  text: labelData[datumIndex],
                  textAlign,
                  textBaseline,
                  hidden: false,
                  collisionTextAlign: void 0,
                  collisionOffsetY: 0,
                  box: void 0
                } : void 0,
                sectorLabel: sectorLabelKey ? {
                  text: sectorLabelData[datumIndex]
                } : void 0,
                sectorFormat: sectorFormatData[datumIndex]
              });
              datumIndex++;
              end = start;
            });
            return [
              2
              /*return*/
            ];
          });
        });
      };
      PieSeries2.prototype.getSectorFormat = function(datum, itemId, index, highlight) {
        var _a5, _b2, _c2, _d2, _e;
        var _f = this, angleKey = _f.angleKey, radiusKey = _f.radiusKey, fills = _f.fills, strokes = _f.strokes, seriesFillOpacity = _f.fillOpacity, formatter = _f.formatter, seriesId = _f.id;
        var highlightedDatum = (_a5 = this.highlightManager) === null || _a5 === void 0 ? void 0 : _a5.getActiveHighlight();
        var isDatumHighlighted = highlight && (highlightedDatum === null || highlightedDatum === void 0 ? void 0 : highlightedDatum.series) === this && itemId === highlightedDatum.itemId;
        var highlightedStyle = isDatumHighlighted ? this.highlightStyle.item : null;
        var fill = (highlightedStyle === null || highlightedStyle === void 0 ? void 0 : highlightedStyle.fill) || fills[index % fills.length];
        var fillOpacity = (_b2 = highlightedStyle === null || highlightedStyle === void 0 ? void 0 : highlightedStyle.fillOpacity) !== null && _b2 !== void 0 ? _b2 : seriesFillOpacity;
        var stroke = (highlightedStyle === null || highlightedStyle === void 0 ? void 0 : highlightedStyle.stroke) || strokes[index % strokes.length];
        var strokeWidth = (_c2 = highlightedStyle === null || highlightedStyle === void 0 ? void 0 : highlightedStyle.strokeWidth) !== null && _c2 !== void 0 ? _c2 : this.getStrokeWidth(this.strokeWidth);
        var format2;
        if (formatter) {
          format2 = formatter({
            datum,
            angleKey,
            radiusKey,
            fill,
            stroke,
            strokeWidth,
            highlighted: isDatumHighlighted,
            seriesId
          });
        }
        return {
          fill: (format2 === null || format2 === void 0 ? void 0 : format2.fill) || fill,
          fillOpacity: (_d2 = format2 === null || format2 === void 0 ? void 0 : format2.fillOpacity) !== null && _d2 !== void 0 ? _d2 : fillOpacity,
          stroke: (format2 === null || format2 === void 0 ? void 0 : format2.stroke) || stroke,
          strokeWidth: (_e = format2 === null || format2 === void 0 ? void 0 : format2.strokeWidth) !== null && _e !== void 0 ? _e : strokeWidth
        };
      };
      PieSeries2.prototype.createNodeData = function() {
        return __awaiter14(this, void 0, void 0, function() {
          return __generator14(this, function(_a5) {
            return [2, []];
          });
        });
      };
      PieSeries2.prototype.getInnerRadius = function() {
        var _a5 = this, radius = _a5.radius, innerRadiusRatio = _a5.innerRadiusRatio, innerRadiusOffset = _a5.innerRadiusOffset;
        var innerRadius = radius * (innerRadiusRatio !== null && innerRadiusRatio !== void 0 ? innerRadiusRatio : 1) + (innerRadiusOffset ? innerRadiusOffset : 0);
        if (innerRadius === radius || innerRadius < 0) {
          return 0;
        }
        return innerRadius;
      };
      PieSeries2.prototype.getOuterRadius = function() {
        var _a5 = this, radius = _a5.radius, outerRadiusRatio = _a5.outerRadiusRatio, outerRadiusOffset = _a5.outerRadiusOffset;
        var outerRadius = radius * (outerRadiusRatio !== null && outerRadiusRatio !== void 0 ? outerRadiusRatio : 1) + (outerRadiusOffset ? outerRadiusOffset : 0);
        if (outerRadius < 0) {
          return 0;
        }
        return outerRadius;
      };
      PieSeries2.prototype.updateRadiusScale = function() {
        var innerRadius = this.getInnerRadius();
        var outerRadius = this.getOuterRadius();
        this.radiusScale.range = [innerRadius, outerRadius];
      };
      PieSeries2.prototype.getTitleTranslationY = function() {
        var _a5, _b2;
        var outerRadius = Math.max(0, this.radiusScale.range[1]);
        if (outerRadius === 0) {
          return NaN;
        }
        var spacing = (_b2 = (_a5 = this.title) === null || _a5 === void 0 ? void 0 : _a5.spacing) !== null && _b2 !== void 0 ? _b2 : 0;
        var titleOffset = 2 + spacing;
        var minLabelY = Math.min.apply(Math, __spread23([0], this.groupSelectionData.map(function(d) {
          var _a6, _b3;
          return ((_b3 = (_a6 = d.calloutLabel) === null || _a6 === void 0 ? void 0 : _a6.box) === null || _b3 === void 0 ? void 0 : _b3.y) || 0;
        })));
        var dy = Math.max(0, -outerRadius - minLabelY);
        return -outerRadius - titleOffset - dy;
      };
      PieSeries2.prototype.update = function() {
        return __awaiter14(this, void 0, void 0, function() {
          var title, dy;
          return __generator14(this, function(_a5) {
            switch (_a5.label) {
              case 0:
                title = this.title;
                this.updateRadiusScale();
                this.rootGroup.translationX = this.centerX;
                this.rootGroup.translationY = this.centerY;
                if (title) {
                  dy = this.getTitleTranslationY();
                  if (isFinite(dy)) {
                    title.node.visible = title.enabled;
                    title.node.translationY = dy;
                  } else {
                    title.node.visible = false;
                  }
                }
                this.updateNodeMidPoint();
                return [4, this.updateSelections()];
              case 1:
                _a5.sent();
                return [4, this.updateNodes()];
              case 2:
                _a5.sent();
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      PieSeries2.prototype.updateNodeMidPoint = function() {
        var _this = this;
        this.groupSelectionData.forEach(function(d) {
          var radius = _this.radiusScale.convert(d.radius);
          d.nodeMidPoint = {
            x: d.midCos * Math.max(0, radius / 2),
            y: d.midSin * Math.max(0, radius / 2)
          };
        });
      };
      PieSeries2.prototype.updateSelections = function() {
        return __awaiter14(this, void 0, void 0, function() {
          return __generator14(this, function(_a5) {
            switch (_a5.label) {
              case 0:
                return [4, this.updateGroupSelection()];
              case 1:
                _a5.sent();
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      PieSeries2.prototype.updateGroupSelection = function() {
        return __awaiter14(this, void 0, void 0, function() {
          var _a5, groupSelection, highlightSelection, calloutLabelSelection, sectorLabelSelection, innerLabelsSelection, update;
          var _this = this;
          return __generator14(this, function(_b2) {
            _a5 = this, groupSelection = _a5.groupSelection, highlightSelection = _a5.highlightSelection, calloutLabelSelection = _a5.calloutLabelSelection, sectorLabelSelection = _a5.sectorLabelSelection, innerLabelsSelection = _a5.innerLabelsSelection;
            update = function(selection) {
              return selection.update(_this.groupSelectionData, function(group2) {
                var sector = new Sector();
                sector.tag = PieNodeTag.Sector;
                group2.appendChild(sector);
              });
            };
            this.groupSelection = update(groupSelection);
            this.highlightSelection = update(highlightSelection);
            calloutLabelSelection.update(this.groupSelectionData, function(group2) {
              var line = new Line();
              line.tag = PieNodeTag.Callout;
              line.pointerEvents = PointerEvents.None;
              group2.appendChild(line);
              var text = new Text();
              text.tag = PieNodeTag.Label;
              text.pointerEvents = PointerEvents.None;
              group2.appendChild(text);
            });
            sectorLabelSelection.update(this.groupSelectionData, function(node) {
              node.pointerEvents = PointerEvents.None;
            });
            innerLabelsSelection.update(this.innerLabels, function(node) {
              node.pointerEvents = PointerEvents.None;
            });
            return [
              2
              /*return*/
            ];
          });
        });
      };
      PieSeries2.prototype.updateNodes = function() {
        var _a5;
        return __awaiter14(this, void 0, void 0, function() {
          var highlightedDatum, isVisible, radiusScale, innerRadius, updateSectorFn;
          var _this = this;
          return __generator14(this, function(_b2) {
            highlightedDatum = (_a5 = this.highlightManager) === null || _a5 === void 0 ? void 0 : _a5.getActiveHighlight();
            isVisible = this.seriesItemEnabled.indexOf(true) >= 0;
            this.rootGroup.visible = isVisible;
            this.backgroundGroup.visible = isVisible;
            this.contentGroup.visible = isVisible;
            this.highlightGroup.visible = isVisible && (highlightedDatum === null || highlightedDatum === void 0 ? void 0 : highlightedDatum.series) === this;
            this.labelGroup.visible = isVisible;
            this.contentGroup.opacity = this.getOpacity();
            this.updateInnerCircle();
            radiusScale = this.radiusScale;
            innerRadius = radiusScale.convert(0);
            updateSectorFn = function(sector, datum, index, isDatumHighlighted) {
              var radius = radiusScale.convert(datum.radius);
              var sectorParent = sector.parent;
              var sectorGrandParent = sectorParent === null || sectorParent === void 0 ? void 0 : sectorParent.parent;
              if (isDatumHighlighted && sectorParent && sectorGrandParent) {
                sectorGrandParent.removeChild(sectorParent);
                sectorGrandParent.appendChild(sectorParent);
              }
              sector.innerRadius = Math.max(0, innerRadius);
              sector.outerRadius = Math.max(0, radius);
              sector.startAngle = datum.startAngle;
              sector.endAngle = datum.endAngle;
              var format2 = _this.getSectorFormat(datum.datum, datum.itemId, index, isDatumHighlighted);
              sector.fill = format2.fill;
              sector.stroke = format2.stroke;
              sector.strokeWidth = format2.strokeWidth;
              sector.fillOpacity = format2.fillOpacity;
              sector.strokeOpacity = _this.strokeOpacity;
              sector.lineDash = _this.lineDash;
              sector.lineDashOffset = _this.lineDashOffset;
              sector.fillShadow = _this.shadow;
              sector.lineJoin = "round";
              sector.visible = _this.seriesItemEnabled[index];
              _this.datumSectorRefs.set(datum, sector);
            };
            this.groupSelection.selectByTag(PieNodeTag.Sector).forEach(function(node, index) {
              return updateSectorFn(node, node.datum, index, false);
            });
            this.highlightSelection.selectByTag(PieNodeTag.Sector).forEach(function(node, index) {
              var isDatumHighlighted = (highlightedDatum === null || highlightedDatum === void 0 ? void 0 : highlightedDatum.series) === _this && node.datum.itemId === highlightedDatum.itemId;
              node.visible = isDatumHighlighted;
              if (node.visible) {
                updateSectorFn(node, node.datum, index, isDatumHighlighted);
              }
            });
            this.updateCalloutLineNodes();
            this.updateCalloutLabelNodes();
            this.updateSectorLabelNodes();
            this.updateInnerLabelNodes();
            return [
              2
              /*return*/
            ];
          });
        });
      };
      PieSeries2.prototype.updateCalloutLineNodes = function() {
        var _a5 = this, radiusScale = _a5.radiusScale, calloutLine = _a5.calloutLine;
        var calloutLength = calloutLine.length;
        var calloutStrokeWidth = calloutLine.strokeWidth;
        var calloutColors = calloutLine.colors || this.strokes;
        var offset4 = this.calloutLabel.offset;
        this.calloutLabelSelection.selectByTag(PieNodeTag.Callout).forEach(function(line, index) {
          var datum = line.datum;
          var radius = radiusScale.convert(datum.radius);
          var outerRadius = Math.max(0, radius);
          var label = datum.calloutLabel;
          if (label && label.text && !label.hidden && outerRadius !== 0) {
            line.visible = true;
            line.strokeWidth = calloutStrokeWidth;
            line.stroke = calloutColors[index % calloutColors.length];
            line.fill = void 0;
            var x1 = datum.midCos * outerRadius;
            var y1 = datum.midSin * outerRadius;
            var x2 = datum.midCos * (outerRadius + calloutLength);
            var y2 = datum.midSin * (outerRadius + calloutLength);
            if (label.collisionTextAlign || label.collisionOffsetY !== 0) {
              var box = label.box;
              var cx = x2 < box.x ? box.x : x2 > box.x + box.width ? box.x + box.width : x2;
              var cy = y2 < box.y ? box.y : y2 > box.y + box.height ? box.y + box.height : y2;
              var dx = cx - x2;
              var dy = cy - y2;
              var length_1 = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));
              var paddedLength = length_1 - offset4;
              if (paddedLength > 0) {
                x2 = x2 + dx * paddedLength / length_1;
                y2 = y2 + dy * paddedLength / length_1;
              }
            }
            line.x1 = x1;
            line.y1 = y1;
            line.x2 = x2;
            line.y2 = y2;
          } else {
            line.visible = false;
          }
        });
      };
      PieSeries2.prototype.getLabelOverflow = function(text, box) {
        var seriesBox = this.chart.getSeriesRect();
        var seriesLeft = seriesBox.x - this.centerX;
        var seriesRight = seriesBox.x + seriesBox.width - this.centerX;
        var seriesTop = seriesBox.y - this.centerY;
        var seriesBottom = seriesBox.y + seriesBox.height - this.centerY;
        var errPx = 1;
        var visibleTextPart = 1;
        if (box.x + errPx < seriesLeft) {
          visibleTextPart = (box.x + box.width - seriesLeft) / box.width;
        } else if (box.x + box.width - errPx > seriesRight) {
          visibleTextPart = (seriesRight - box.x) / box.width;
        }
        var hasVerticalOverflow = box.y + errPx < seriesTop || box.y + box.height - errPx > seriesBottom;
        var textLength = Math.floor(text.length * visibleTextPart) - 1;
        return { visibleTextPart, textLength, hasVerticalOverflow };
      };
      PieSeries2.prototype.computeCalloutLabelCollisionOffsets = function() {
        var _this = this;
        var _a5 = this, radiusScale = _a5.radiusScale, calloutLabel = _a5.calloutLabel, calloutLine = _a5.calloutLine;
        var offset4 = calloutLabel.offset, minSpacing = calloutLabel.minSpacing;
        var innerRadius = radiusScale.convert(0);
        var shouldSkip = function(datum) {
          var label = datum.calloutLabel;
          var radius = radiusScale.convert(datum.radius);
          var outerRadius = Math.max(0, radius);
          return !label || outerRadius === 0;
        };
        var fullData = this.groupSelectionData;
        var data = this.groupSelectionData.filter(function(text) {
          return !shouldSkip(text);
        });
        data.forEach(function(datum) {
          var label = datum.calloutLabel;
          label.hidden = false;
          label.collisionTextAlign = void 0;
          label.collisionOffsetY = 0;
        });
        if (data.length <= 1) {
          return;
        }
        var leftLabels = data.filter(function(d) {
          return d.midCos < 0;
        }).sort(function(a, b) {
          return a.midSin - b.midSin;
        });
        var rightLabels = data.filter(function(d) {
          return d.midCos >= 0;
        }).sort(function(a, b) {
          return a.midSin - b.midSin;
        });
        var topLabels = data.filter(function(d) {
          return d.midSin < 0 && d.calloutLabel.textAlign === "center";
        }).sort(function(a, b) {
          return a.midCos - b.midCos;
        });
        var bottomLabels = data.filter(function(d) {
          return d.midSin >= 0 && d.calloutLabel.textAlign === "center";
        }).sort(function(a, b) {
          return a.midCos - b.midCos;
        });
        var tempTextNode = new Text();
        var getTextBBox = function(datum) {
          var label = datum.calloutLabel;
          var radius = radiusScale.convert(datum.radius);
          var outerRadius = Math.max(0, radius);
          var labelRadius = outerRadius + calloutLine.length + offset4;
          var x = datum.midCos * labelRadius;
          var y = datum.midSin * labelRadius + label.collisionOffsetY;
          _this.setTextDimensionalProps(tempTextNode, x, y, _this.calloutLabel, label);
          return tempTextNode.computeBBox();
        };
        var avoidNeighbourYCollision = function(label, next, direction) {
          var box = getTextBBox(label).grow(minSpacing / 2);
          var other = getTextBBox(next).grow(minSpacing / 2);
          var collidesOrBehind = box.x < other.x + other.width && box.x + box.width > other.x && (direction === "to-top" ? box.y < other.y + other.height : box.y + box.height > other.y);
          if (collidesOrBehind) {
            var dy = direction === "to-top" ? box.y - other.y - other.height : box.y + box.height - other.y;
            next.calloutLabel.collisionOffsetY = dy;
          }
        };
        var avoidYCollisions = function(labels) {
          var midLabel = labels.slice().sort(function(a, b) {
            return Math.abs(a.midSin) - Math.abs(b.midSin);
          })[0];
          var midIndex = labels.indexOf(midLabel);
          for (var i = midIndex - 1; i >= 0; i--) {
            var prev = labels[i + 1];
            var next = labels[i];
            avoidNeighbourYCollision(prev, next, "to-top");
          }
          for (var i = midIndex + 1; i < labels.length; i++) {
            var prev = labels[i - 1];
            var next = labels[i];
            avoidNeighbourYCollision(prev, next, "to-bottom");
          }
        };
        var avoidXCollisions = function(labels) {
          var labelsCollideLabelsByY = data.some(function(datum) {
            return datum.calloutLabel.collisionOffsetY !== 0;
          });
          var boxes = labels.map(function(label) {
            return getTextBBox(label);
          });
          var paddedBoxes = boxes.map(function(box2) {
            return box2.clone().grow(minSpacing / 2);
          });
          var labelsCollideLabelsByX = false;
          loop:
            for (var i = 0; i < paddedBoxes.length; i++) {
              var box = paddedBoxes[i];
              for (var j = i + 1; j < labels.length; j++) {
                var other = paddedBoxes[j];
                if (box.collidesBBox(other)) {
                  labelsCollideLabelsByX = true;
                  break loop;
                }
              }
            }
          var sectors = fullData.map(function(datum) {
            var startAngle = datum.startAngle, endAngle = datum.endAngle;
            var radius = radiusScale.convert(datum.radius);
            var outerRadius = Math.max(0, radius);
            return { startAngle, endAngle, innerRadius, outerRadius };
          });
          var labelsCollideSectors = boxes.some(function(box2) {
            return sectors.some(function(sector) {
              return boxCollidesSector(box2, sector);
            });
          });
          if (!labelsCollideLabelsByX && !labelsCollideLabelsByY && !labelsCollideSectors) {
            return;
          }
          labels.filter(function(datum) {
            return datum.calloutLabel.textAlign === "center";
          }).forEach(function(datum) {
            var label = datum.calloutLabel;
            label.collisionTextAlign = datum.midCos < 0 ? "right" : datum.midCos > 0 ? "left" : "center";
          });
        };
        avoidYCollisions(leftLabels);
        avoidYCollisions(rightLabels);
        avoidXCollisions(topLabels);
        avoidXCollisions(bottomLabels);
      };
      PieSeries2.prototype.updateCalloutLabelNodes = function() {
        var _this = this;
        var _a5 = this, radiusScale = _a5.radiusScale, calloutLabel = _a5.calloutLabel, calloutLine = _a5.calloutLine;
        var calloutLength = calloutLine.length;
        var offset4 = calloutLabel.offset, color = calloutLabel.color;
        var tempTextNode = new Text();
        this.calloutLabelSelection.selectByTag(PieNodeTag.Label).forEach(function(text) {
          var datum = text.datum;
          var label = datum.calloutLabel;
          var radius = radiusScale.convert(datum.radius);
          var outerRadius = Math.max(0, radius);
          if (!label || !label.text || outerRadius === 0 || label.hidden) {
            text.visible = false;
            return;
          }
          var labelRadius = outerRadius + calloutLength + offset4;
          var x = datum.midCos * labelRadius;
          var y = datum.midSin * labelRadius + label.collisionOffsetY;
          _this.setTextDimensionalProps(tempTextNode, x, y, _this.calloutLabel, label);
          var box = tempTextNode.computeBBox();
          var _a6 = _this.getLabelOverflow(label.text, box), visibleTextPart = _a6.visibleTextPart, textLength = _a6.textLength, hasVerticalOverflow = _a6.hasVerticalOverflow;
          var displayText = visibleTextPart === 1 ? label.text : label.text.substring(0, textLength) + "…";
          _this.setTextDimensionalProps(text, x, y, _this.calloutLabel, __assign14(__assign14({}, label), { text: displayText }));
          text.fill = color;
          text.visible = !hasVerticalOverflow;
        });
      };
      PieSeries2.prototype.computeLabelsBBox = function(options) {
        var _this = this;
        var _a5 = this, radiusScale = _a5.radiusScale, calloutLabel = _a5.calloutLabel, calloutLine = _a5.calloutLine;
        var calloutLength = calloutLine.length;
        var offset4 = calloutLabel.offset, maxCollisionOffset = calloutLabel.maxCollisionOffset;
        this.updateRadiusScale();
        this.computeCalloutLabelCollisionOffsets();
        var text = new Text();
        var textBoxes = this.groupSelectionData.map(function(datum) {
          var label = datum.calloutLabel;
          var radius = radiusScale.convert(datum.radius);
          var outerRadius = Math.max(0, radius);
          if (!label || outerRadius === 0) {
            return null;
          }
          var labelRadius = outerRadius + calloutLength + offset4;
          var x = datum.midCos * labelRadius;
          var y = datum.midSin * labelRadius + label.collisionOffsetY;
          _this.setTextDimensionalProps(text, x, y, _this.calloutLabel, label);
          var box2 = text.computeBBox();
          label.box = box2;
          if (Math.abs(label.collisionOffsetY) > maxCollisionOffset) {
            label.hidden = true;
            return null;
          }
          if (options.hideWhenNecessary) {
            var _a6 = _this.getLabelOverflow(label.text, box2), textLength = _a6.textLength, hasVerticalOverflow = _a6.hasVerticalOverflow;
            var isTooShort = label.text.length > 2 && textLength < 2;
            if (hasVerticalOverflow || isTooShort) {
              label.hidden = true;
              return null;
            }
          }
          label.hidden = false;
          return box2;
        }).filter(function(box2) {
          return box2 != null;
        });
        if (this.title && this.title.text) {
          var dy = this.getTitleTranslationY();
          if (isFinite(dy)) {
            this.setTextDimensionalProps(text, 0, dy, this.title, {
              text: this.title.text,
              textBaseline: "bottom",
              textAlign: "center",
              hidden: false,
              collisionTextAlign: void 0,
              collisionOffsetY: 0
            });
            var box = text.computeBBox();
            textBoxes.push(box);
          }
        }
        if (textBoxes.length === 0) {
          return null;
        }
        return BBox.merge(textBoxes);
      };
      PieSeries2.prototype.setTextDimensionalProps = function(textNode, x, y, style, label) {
        var fontStyle = style.fontStyle, fontWeight = style.fontWeight, fontSize = style.fontSize, fontFamily = style.fontFamily;
        textNode.fontStyle = fontStyle;
        textNode.fontWeight = fontWeight;
        textNode.fontSize = fontSize;
        textNode.fontFamily = fontFamily;
        textNode.text = label.text;
        textNode.x = x;
        textNode.y = y;
        textNode.textAlign = label.collisionTextAlign || label.textAlign;
        textNode.textBaseline = label.textBaseline;
      };
      PieSeries2.prototype.updateSectorLabelNodes = function() {
        var _this = this;
        var radiusScale = this.radiusScale;
        var innerRadius = radiusScale.convert(0);
        var _a5 = this.sectorLabel, fontSize = _a5.fontSize, fontStyle = _a5.fontStyle, fontWeight = _a5.fontWeight, fontFamily = _a5.fontFamily, positionOffset = _a5.positionOffset, positionRatio = _a5.positionRatio, color = _a5.color;
        var isDoughnut = innerRadius > 0;
        var singleVisibleSector = this.seriesItemEnabled.filter(Boolean).length === 1;
        this.sectorLabelSelection.each(function(text, datum) {
          var sectorLabel = datum.sectorLabel;
          var radius = radiusScale.convert(datum.radius);
          var outerRadius = Math.max(0, radius);
          var isTextVisible = false;
          if (sectorLabel && outerRadius !== 0) {
            var labelRadius = innerRadius * (1 - positionRatio) + radius * positionRatio + positionOffset;
            text.fill = color;
            text.fontStyle = fontStyle;
            text.fontWeight = fontWeight;
            text.fontSize = fontSize;
            text.fontFamily = fontFamily;
            text.text = sectorLabel.text;
            var shouldPutTextInCenter = !isDoughnut && singleVisibleSector;
            if (shouldPutTextInCenter) {
              text.x = 0;
              text.y = 0;
            } else {
              text.x = datum.midCos * labelRadius;
              text.y = datum.midSin * labelRadius;
            }
            text.textAlign = "center";
            text.textBaseline = "middle";
            var sector = _this.datumSectorRefs.get(datum);
            if (sector) {
              var bbox = text.computeBBox();
              var corners = [
                [bbox.x, bbox.y],
                [bbox.x + bbox.width, bbox.y],
                [bbox.x + bbox.width, bbox.y + bbox.height],
                [bbox.x, bbox.y + bbox.height]
              ];
              var startAngle = datum.startAngle, endAngle = datum.endAngle;
              var sectorBounds_1 = { startAngle, endAngle, innerRadius, outerRadius };
              if (corners.every(function(_a6) {
                var _b2 = __read37(_a6, 2), x = _b2[0], y = _b2[1];
                return isPointInSector(x, y, sectorBounds_1);
              })) {
                isTextVisible = true;
              }
            }
          }
          text.visible = isTextVisible;
        });
      };
      PieSeries2.prototype.updateInnerCircle = function() {
        var circle = this._innerCircleNode;
        if (!circle) {
          return;
        }
        var innerRadius = this.getInnerRadius();
        if (innerRadius === 0) {
          circle.size = 0;
        } else {
          var circleRadius = Math.min(innerRadius, this.getOuterRadius());
          var antiAliasingPadding = 1;
          circle.size = Math.ceil(circleRadius * 2 + antiAliasingPadding);
        }
      };
      PieSeries2.prototype.updateInnerLabelNodes = function() {
        var textBBoxes = [];
        var margins = [];
        this.innerLabelsSelection.each(function(text, datum) {
          var fontStyle = datum.fontStyle, fontWeight = datum.fontWeight, fontSize = datum.fontSize, fontFamily = datum.fontFamily, color = datum.color;
          text.fontStyle = fontStyle;
          text.fontWeight = fontWeight;
          text.fontSize = fontSize;
          text.fontFamily = fontFamily;
          text.text = datum.text;
          text.x = 0;
          text.y = 0;
          text.fill = color;
          text.textAlign = "center";
          text.textBaseline = "alphabetic";
          textBBoxes.push(text.computeBBox());
          margins.push(datum.margin);
        });
        var getMarginTop = function(index) {
          return index === 0 ? 0 : margins[index];
        };
        var getMarginBottom = function(index) {
          return index === margins.length - 1 ? 0 : margins[index];
        };
        var totalHeight = textBBoxes.reduce(function(sum, bbox2, i2) {
          return sum + bbox2.height + getMarginTop(i2) + getMarginBottom(i2);
        }, 0);
        var totalWidth = Math.max.apply(Math, __spread23(textBBoxes.map(function(bbox2) {
          return bbox2.width;
        })));
        var innerRadius = this.getInnerRadius();
        var labelRadius = Math.sqrt(Math.pow(totalWidth / 2, 2) + Math.pow(totalHeight / 2, 2));
        var labelsVisible = labelRadius <= (innerRadius > 0 ? innerRadius : this.getOuterRadius());
        var textBottoms = [];
        for (var i = 0, prev = -totalHeight / 2; i < textBBoxes.length; i++) {
          var bbox = textBBoxes[i];
          var bottom = bbox.height + prev + getMarginTop(i);
          textBottoms.push(bottom);
          prev = bottom + getMarginBottom(i);
        }
        this.innerLabelsSelection.each(function(text, _datum, index) {
          text.y = textBottoms[index];
          text.visible = labelsVisible;
        });
      };
      PieSeries2.prototype.getNodeClickEvent = function(event, datum) {
        return new PieSeriesNodeClickEvent(this.angleKey, this.calloutLabelKey, this.sectorLabelKey, this.radiusKey, event, datum, this);
      };
      PieSeries2.prototype.getNodeDoubleClickEvent = function(event, datum) {
        return new PieSeriesNodeDoubleClickEvent(this.angleKey, this.calloutLabelKey, this.sectorLabelKey, this.radiusKey, event, datum, this);
      };
      PieSeries2.prototype.getTooltipHtml = function(nodeDatum) {
        var angleKey = this.angleKey;
        if (!angleKey) {
          return "";
        }
        var _a5 = this, tooltip = _a5.tooltip, angleName = _a5.angleName, radiusKey = _a5.radiusKey, radiusName = _a5.radiusName, calloutLabelKey = _a5.calloutLabelKey, sectorLabelKey = _a5.sectorLabelKey, calloutLabelName = _a5.calloutLabelName, sectorLabelName = _a5.sectorLabelName, seriesId = _a5.id;
        var tooltipRenderer = tooltip.renderer;
        var color = nodeDatum.sectorFormat.fill;
        var datum = nodeDatum.datum;
        var label = calloutLabelKey ? datum[calloutLabelKey] + ": " : "";
        var angleValue = datum[angleKey];
        var formattedAngleValue = typeof angleValue === "number" ? toFixed(angleValue) : angleValue.toString();
        var title = this.title ? this.title.text : void 0;
        var content = label + formattedAngleValue;
        var defaults = {
          title,
          backgroundColor: color,
          content
        };
        if (tooltipRenderer) {
          return toTooltipHtml(tooltipRenderer({
            datum,
            angleKey,
            angleValue,
            angleName,
            radiusKey,
            radiusValue: radiusKey ? datum[radiusKey] : void 0,
            radiusName,
            labelKey: calloutLabelKey,
            labelName: calloutLabelName,
            calloutLabelKey,
            calloutLabelName,
            sectorLabelKey,
            sectorLabelName,
            title,
            color,
            seriesId
          }), defaults);
        }
        return toTooltipHtml(defaults);
      };
      PieSeries2.prototype.getLegendData = function() {
        var _this = this;
        var _a5 = this, calloutLabelKey = _a5.calloutLabelKey, legendItemKey = _a5.legendItemKey, data = _a5.data, id = _a5.id, sectorFormatData = _a5.sectorFormatData;
        if (!data || data.length === 0 || !legendItemKey && !calloutLabelKey)
          return [];
        var titleText = this.title && this.title.showInLegend && this.title.text;
        var legendData = data.map(function(datum, index) {
          var labelParts = [];
          titleText && labelParts.push(titleText);
          if (legendItemKey) {
            labelParts.push(String(datum[legendItemKey]));
          } else if (calloutLabelKey) {
            labelParts.push(String(datum[calloutLabelKey]));
          }
          return {
            id,
            itemId: index,
            seriesId: id,
            enabled: _this.seriesItemEnabled[index],
            label: {
              text: labelParts.join(" - ")
            },
            marker: {
              fill: sectorFormatData[index].fill,
              stroke: sectorFormatData[index].stroke,
              fillOpacity: _this.fillOpacity,
              strokeOpacity: _this.strokeOpacity
            }
          };
        });
        return legendData;
      };
      PieSeries2.prototype.toggleSeriesItem = function(itemId, enabled) {
        this.seriesItemEnabled[itemId] = enabled;
        this.nodeDataRefresh = true;
      };
      PieSeries2.prototype.toggleOtherSeriesItems = function(seriesToggled, datumToggled, enabled, suggestedEnabled) {
        var _this = this;
        var _a5, _b2;
        var legendItemKey = this.legendItemKey;
        if (seriesToggled.type !== "pie")
          return;
        if (legendItemKey === void 0)
          return;
        var pieSeriesToggled = seriesToggled;
        var datumToggledLegendItemValue = datumToggled && pieSeriesToggled.legendItemKey && ((_a5 = pieSeriesToggled.data) === null || _a5 === void 0 ? void 0 : _a5.find(function(_, index) {
          return index === datumToggled.itemId;
        })[pieSeriesToggled.legendItemKey]);
        if (!datumToggledLegendItemValue)
          return;
        (_b2 = this.data) === null || _b2 === void 0 ? void 0 : _b2.forEach(function(d, itemId) {
          if (enabled !== void 0 && d[legendItemKey] === datumToggledLegendItemValue) {
            _this.toggleSeriesItem(itemId, enabled);
          } else if (suggestedEnabled !== void 0) {
            _this.toggleSeriesItem(itemId, suggestedEnabled || d[legendItemKey] === datumToggledLegendItemValue);
          }
        });
      };
      PieSeries2.className = "PieSeries";
      PieSeries2.type = "pie";
      __decorate37([
        DeprecatedAndRenamedTo("calloutLabel")
      ], PieSeries2.prototype, "label", void 0);
      __decorate37([
        DeprecatedAndRenamedTo("calloutLine")
      ], PieSeries2.prototype, "callout", void 0);
      __decorate37([
        Validate(STRING)
      ], PieSeries2.prototype, "angleKey", void 0);
      __decorate37([
        Validate(STRING)
      ], PieSeries2.prototype, "angleName", void 0);
      __decorate37([
        Validate(OPT_STRING)
      ], PieSeries2.prototype, "radiusKey", void 0);
      __decorate37([
        Validate(OPT_STRING)
      ], PieSeries2.prototype, "radiusName", void 0);
      __decorate37([
        Validate(OPT_NUMBER(0))
      ], PieSeries2.prototype, "radiusMin", void 0);
      __decorate37([
        Validate(OPT_NUMBER(0))
      ], PieSeries2.prototype, "radiusMax", void 0);
      __decorate37([
        Validate(OPT_STRING)
      ], PieSeries2.prototype, "calloutLabelKey", void 0);
      __decorate37([
        Validate(OPT_STRING)
      ], PieSeries2.prototype, "calloutLabelName", void 0);
      __decorate37([
        DeprecatedAndRenamedTo("calloutLabelKey")
      ], PieSeries2.prototype, "labelKey", void 0);
      __decorate37([
        DeprecatedAndRenamedTo("calloutLabelName")
      ], PieSeries2.prototype, "labelName", void 0);
      __decorate37([
        Validate(OPT_STRING)
      ], PieSeries2.prototype, "sectorLabelKey", void 0);
      __decorate37([
        Validate(OPT_STRING)
      ], PieSeries2.prototype, "sectorLabelName", void 0);
      __decorate37([
        Validate(OPT_STRING)
      ], PieSeries2.prototype, "legendItemKey", void 0);
      __decorate37([
        Validate(COLOR_STRING_ARRAY)
      ], PieSeries2.prototype, "fills", void 0);
      __decorate37([
        Validate(COLOR_STRING_ARRAY)
      ], PieSeries2.prototype, "strokes", void 0);
      __decorate37([
        Validate(NUMBER(0, 1))
      ], PieSeries2.prototype, "fillOpacity", void 0);
      __decorate37([
        Validate(NUMBER(0, 1))
      ], PieSeries2.prototype, "strokeOpacity", void 0);
      __decorate37([
        Validate(OPT_LINE_DASH)
      ], PieSeries2.prototype, "lineDash", void 0);
      __decorate37([
        Validate(NUMBER(0))
      ], PieSeries2.prototype, "lineDashOffset", void 0);
      __decorate37([
        Validate(OPT_FUNCTION)
      ], PieSeries2.prototype, "formatter", void 0);
      __decorate37([
        Validate(NUMBER(-360, 360))
      ], PieSeries2.prototype, "rotation", void 0);
      __decorate37([
        Validate(NUMBER())
      ], PieSeries2.prototype, "outerRadiusOffset", void 0);
      __decorate37([
        Validate(NUMBER(0))
      ], PieSeries2.prototype, "outerRadiusRatio", void 0);
      __decorate37([
        Validate(NUMBER())
      ], PieSeries2.prototype, "innerRadiusOffset", void 0);
      __decorate37([
        Validate(NUMBER(0))
      ], PieSeries2.prototype, "innerRadiusRatio", void 0);
      __decorate37([
        Validate(NUMBER(0))
      ], PieSeries2.prototype, "strokeWidth", void 0);
      return PieSeries2;
    }(PolarSeries);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/series/hierarchy/hierarchySeries.js
var __extends48, HierarchySeries;
var init_hierarchySeries = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/series/hierarchy/hierarchySeries.js"() {
    init_series();
    __extends48 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    HierarchySeries = /** @class */
    function(_super) {
      __extends48(HierarchySeries2, _super);
      function HierarchySeries2() {
        return _super.call(this, { pickModes: [SeriesNodePickMode.EXACT_SHAPE_MATCH] }) || this;
      }
      HierarchySeries2.prototype.getLabelData = function() {
        return [];
      };
      return HierarchySeries2;
    }(Series);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/scene/dropShadow.js
var __extends49, __decorate38, DropShadow;
var init_dropShadow = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/scene/dropShadow.js"() {
    init_validation();
    init_changeDetectable();
    init_node();
    __extends49 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate38 = function(decorators, target2, key2, desc) {
      var c = arguments.length, r = c < 3 ? target2 : desc === null ? desc = Object.getOwnPropertyDescriptor(target2, key2) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target2, key2, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target2, key2, r) : d(target2, key2)) || r;
      return c > 3 && r && Object.defineProperty(target2, key2, r), r;
    };
    DropShadow = /** @class */
    function(_super) {
      __extends49(DropShadow2, _super);
      function DropShadow2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.enabled = true;
        _this.color = "rgba(0, 0, 0, 0.5)";
        _this.xOffset = 0;
        _this.yOffset = 0;
        _this.blur = 5;
        return _this;
      }
      __decorate38([
        Validate(BOOLEAN),
        SceneChangeDetection({ redraw: RedrawType.MAJOR })
      ], DropShadow2.prototype, "enabled", void 0);
      __decorate38([
        Validate(COLOR_STRING),
        SceneChangeDetection({ redraw: RedrawType.MAJOR })
      ], DropShadow2.prototype, "color", void 0);
      __decorate38([
        Validate(NUMBER()),
        SceneChangeDetection({ redraw: RedrawType.MAJOR })
      ], DropShadow2.prototype, "xOffset", void 0);
      __decorate38([
        Validate(NUMBER()),
        SceneChangeDetection({ redraw: RedrawType.MAJOR })
      ], DropShadow2.prototype, "yOffset", void 0);
      __decorate38([
        Validate(NUMBER(0)),
        SceneChangeDetection({ redraw: RedrawType.MAJOR })
      ], DropShadow2.prototype, "blur", void 0);
      return DropShadow2;
    }(ChangeDetectable);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/interpolate/number.js
function number_default(a, b) {
  a = +a;
  b = +b;
  return function(t) {
    return a * (1 - t) + b * t;
  };
}
var init_number2 = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/interpolate/number.js"() {
  }
});

// node_modules/ag-charts-community/dist/esm/es5/interpolate/color.js
function color_default(a, b) {
  if (typeof a === "string") {
    try {
      a = Color.fromString(a);
    } catch (e) {
      a = Color.fromArray([0, 0, 0]);
    }
  }
  if (typeof b === "string") {
    try {
      b = Color.fromString(b);
    } catch (e) {
      b = Color.fromArray([0, 0, 0]);
    }
  }
  var red = number_default(a.r, b.r);
  var green = number_default(a.g, b.g);
  var blue = number_default(a.b, b.b);
  var alpha = number_default(a.a, b.a);
  return function(t) {
    return Color.fromArray([red(t), green(t), blue(t), alpha(t)]).toRgbaString();
  };
}
var init_color2 = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/interpolate/color.js"() {
    init_number2();
    init_color();
  }
});

// node_modules/ag-charts-community/dist/esm/es5/scale/colorScale.js
var ColorScale;
var init_colorScale = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/scale/colorScale.js"() {
    init_color();
    init_color2();
    ColorScale = /** @class */
    function() {
      function ColorScale2() {
        this.domain = [0, 1];
        this._range = ["red", "green"];
        this.parsedRange = this._range.map(function(v) {
          return Color.fromString(v);
        });
      }
      Object.defineProperty(ColorScale2.prototype, "range", {
        get: function() {
          return this._range;
        },
        set: function(values) {
          this._range = values;
          this.parsedRange = values.map(function(v) {
            return Color.fromString(v);
          });
        },
        enumerable: false,
        configurable: true
      });
      ColorScale2.prototype.convert = function(x) {
        var _a5 = this, domain = _a5.domain, range2 = _a5.range, parsedRange = _a5.parsedRange;
        var d0 = domain[0];
        var d1 = domain[domain.length - 1];
        var r0 = range2[0];
        var r1 = range2[range2.length - 1];
        if (x <= d0) {
          return r0;
        }
        if (x >= d1) {
          return r1;
        }
        var index;
        var q;
        if (domain.length === 2) {
          var t = (x - d0) / (d1 - d0);
          var step = 1 / (range2.length - 1);
          index = range2.length <= 2 ? 0 : Math.min(Math.floor(t * (range2.length - 1)), range2.length - 2);
          q = (t - index * step) / step;
        } else {
          for (index = 0; index < domain.length - 2; index++) {
            if (x < domain[index + 1]) {
              break;
            }
          }
          var a = domain[index];
          var b = domain[index + 1];
          q = (x - a) / (b - a);
        }
        var c0 = parsedRange[index];
        var c1 = parsedRange[index + 1];
        return color_default(c0, c1)(q);
      };
      return ColorScale2;
    }();
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/series/hierarchy/treemapSeries.js
function getTextSize(text, style) {
  return HdpiCanvas.getTextSize(text, [style.fontWeight, style.fontSize + "px", style.fontFamily].join(" "));
}
function validateColor(color) {
  if (typeof color === "string" && !Color.validColorString(color)) {
    var fallbackColor = "black";
    Logger.warnOnce('invalid Treemap tile colour string "' + color + '". Affected treemap tiles will be coloured ' + fallbackColor + ".");
    return "black";
  }
  return color;
}
var __extends50, __assign15, __decorate39, __awaiter15, __generator15, TreemapSeriesTooltip, TreemapSeriesNodeBaseClickEvent, TreemapSeriesNodeClickEvent, TreemapSeriesNodeDoubleClickEvent, TreemapSeriesLabel, TreemapValueLabel, TextNodeTag, TreemapTextHighlightStyle, TreemapHighlightStyle, TreemapSeries;
var init_treemapSeries = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/series/hierarchy/treemapSeries.js"() {
    init_selection();
    init_hdpiCanvas();
    init_label();
    init_series();
    init_hierarchySeries();
    init_tooltip();
    init_group();
    init_text();
    init_rect();
    init_dropShadow();
    init_colorScale();
    init_number();
    init_path2D();
    init_bbox();
    init_color();
    init_validation();
    init_logger();
    __extends50 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __assign15 = function() {
      __assign15 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign15.apply(this, arguments);
    };
    __decorate39 = function(decorators, target2, key2, desc) {
      var c = arguments.length, r = c < 3 ? target2 : desc === null ? desc = Object.getOwnPropertyDescriptor(target2, key2) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target2, key2, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target2, key2, r) : d(target2, key2)) || r;
      return c > 3 && r && Object.defineProperty(target2, key2, r), r;
    };
    __awaiter15 = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __generator15 = function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    TreemapSeriesTooltip = /** @class */
    function(_super) {
      __extends50(TreemapSeriesTooltip2, _super);
      function TreemapSeriesTooltip2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.renderer = void 0;
        return _this;
      }
      __decorate39([
        Validate(OPT_FUNCTION)
      ], TreemapSeriesTooltip2.prototype, "renderer", void 0);
      return TreemapSeriesTooltip2;
    }(SeriesTooltip);
    TreemapSeriesNodeBaseClickEvent = /** @class */
    function(_super) {
      __extends50(TreemapSeriesNodeBaseClickEvent2, _super);
      function TreemapSeriesNodeBaseClickEvent2(labelKey, sizeKey, colorKey, nativeEvent, datum, series) {
        var _this = _super.call(this, nativeEvent, datum, series) || this;
        _this.labelKey = labelKey;
        _this.sizeKey = sizeKey;
        _this.colorKey = colorKey;
        return _this;
      }
      return TreemapSeriesNodeBaseClickEvent2;
    }(SeriesNodeBaseClickEvent);
    TreemapSeriesNodeClickEvent = /** @class */
    function(_super) {
      __extends50(TreemapSeriesNodeClickEvent2, _super);
      function TreemapSeriesNodeClickEvent2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "nodeClick";
        return _this;
      }
      return TreemapSeriesNodeClickEvent2;
    }(TreemapSeriesNodeBaseClickEvent);
    TreemapSeriesNodeDoubleClickEvent = /** @class */
    function(_super) {
      __extends50(TreemapSeriesNodeDoubleClickEvent2, _super);
      function TreemapSeriesNodeDoubleClickEvent2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "nodeDoubleClick";
        return _this;
      }
      return TreemapSeriesNodeDoubleClickEvent2;
    }(TreemapSeriesNodeBaseClickEvent);
    TreemapSeriesLabel = /** @class */
    function(_super) {
      __extends50(TreemapSeriesLabel2, _super);
      function TreemapSeriesLabel2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.padding = 10;
        return _this;
      }
      __decorate39([
        Validate(NUMBER(0))
      ], TreemapSeriesLabel2.prototype, "padding", void 0);
      return TreemapSeriesLabel2;
    }(Label);
    TreemapValueLabel = /** @class */
    function() {
      function TreemapValueLabel2() {
        this.style = function() {
          var label = new Label();
          label.color = "white";
          return label;
        }();
      }
      __decorate39([
        Validate(OPT_STRING)
      ], TreemapValueLabel2.prototype, "key", void 0);
      __decorate39([
        Validate(OPT_STRING)
      ], TreemapValueLabel2.prototype, "name", void 0);
      __decorate39([
        Validate(OPT_FUNCTION)
      ], TreemapValueLabel2.prototype, "formatter", void 0);
      return TreemapValueLabel2;
    }();
    (function(TextNodeTag2) {
      TextNodeTag2[TextNodeTag2["Name"] = 0] = "Name";
      TextNodeTag2[TextNodeTag2["Value"] = 1] = "Value";
    })(TextNodeTag || (TextNodeTag = {}));
    TreemapTextHighlightStyle = /** @class */
    function() {
      function TreemapTextHighlightStyle2() {
        this.color = "black";
      }
      __decorate39([
        Validate(OPT_COLOR_STRING)
      ], TreemapTextHighlightStyle2.prototype, "color", void 0);
      return TreemapTextHighlightStyle2;
    }();
    TreemapHighlightStyle = /** @class */
    function(_super) {
      __extends50(TreemapHighlightStyle2, _super);
      function TreemapHighlightStyle2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.text = new TreemapTextHighlightStyle();
        return _this;
      }
      return TreemapHighlightStyle2;
    }(HighlightStyle);
    TreemapSeries = /** @class */
    function(_super) {
      __extends50(TreemapSeries2, _super);
      function TreemapSeries2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.groupSelection = Selection.select(_this.contentGroup, Group);
        _this.highlightSelection = Selection.select(_this.highlightGroup, Group);
        _this.title = function() {
          var label = new TreemapSeriesLabel();
          label.color = "white";
          label.fontWeight = "bold";
          label.fontSize = 12;
          label.fontFamily = "Verdana, sans-serif";
          label.padding = 15;
          return label;
        }();
        _this.subtitle = function() {
          var label = new TreemapSeriesLabel();
          label.color = "white";
          label.fontSize = 9;
          label.fontFamily = "Verdana, sans-serif";
          label.padding = 13;
          return label;
        }();
        _this.labels = {
          large: function() {
            var label = new Label();
            label.color = "white";
            label.fontWeight = "bold";
            label.fontSize = 18;
            return label;
          }(),
          medium: function() {
            var label = new Label();
            label.color = "white";
            label.fontWeight = "bold";
            label.fontSize = 14;
            return label;
          }(),
          small: function() {
            var label = new Label();
            label.color = "white";
            label.fontWeight = "bold";
            label.fontSize = 10;
            return label;
          }(),
          value: new TreemapValueLabel()
        };
        _this.nodePadding = 2;
        _this.labelKey = "label";
        _this.sizeKey = "size";
        _this.colorKey = "color";
        _this.colorDomain = [-5, 5];
        _this.colorRange = ["#cb4b3f", "#6acb64"];
        _this.groupFill = "#272931";
        _this.groupStroke = "black";
        _this.groupStrokeWidth = 1;
        _this.tileStroke = "black";
        _this.tileStrokeWidth = 1;
        _this.gradient = true;
        _this.formatter = void 0;
        _this.colorName = "Change";
        _this.rootName = "Root";
        _this.highlightGroups = true;
        _this.tileShadow = new DropShadow();
        _this.labelShadow = new DropShadow();
        _this.tooltip = new TreemapSeriesTooltip();
        _this.highlightStyle = new TreemapHighlightStyle();
        return _this;
      }
      TreemapSeries2.prototype.getNodePaddingTop = function(nodeDatum, bbox) {
        var _a5 = this, title = _a5.title, subtitle = _a5.subtitle, nodePadding = _a5.nodePadding;
        var label = nodeDatum.label;
        if (nodeDatum.isLeaf || !label || nodeDatum.depth === 0) {
          return nodePadding;
        }
        var font = nodeDatum.depth > 1 ? subtitle : title;
        var textSize = getTextSize(label, font);
        var heightRatioThreshold = 3;
        if (font.fontSize > bbox.width / heightRatioThreshold || font.fontSize > bbox.height / heightRatioThreshold) {
          return nodePadding;
        }
        if (textSize.height >= bbox.height) {
          return nodePadding;
        }
        return textSize.height + nodePadding * 2;
      };
      TreemapSeries2.prototype.getNodePadding = function(nodeDatum, bbox) {
        var nodePadding = this.nodePadding;
        var top = this.getNodePaddingTop(nodeDatum, bbox);
        return {
          top,
          right: nodePadding,
          bottom: nodePadding,
          left: nodePadding
        };
      };
      TreemapSeries2.prototype.squarify = function(nodeDatum, bbox, outputNodesBoxes) {
        if (outputNodesBoxes === void 0) {
          outputNodesBoxes = /* @__PURE__ */ new Map();
        }
        var targetTileAspectRatio = 1;
        var padding = this.getNodePadding(nodeDatum, bbox);
        outputNodesBoxes.set(nodeDatum, bbox);
        var width = bbox.width - padding.left - padding.right;
        var height = bbox.height - padding.top - padding.bottom;
        if (width <= 0 || height <= 0 || nodeDatum.value <= 0) {
          return outputNodesBoxes;
        }
        var stackSum = 0;
        var startIndex = 0;
        var minRatioDiff = Infinity;
        var partitionSum = nodeDatum.value;
        var children = nodeDatum.children;
        var partition = new BBox(bbox.x + padding.left, bbox.y + padding.top, width, height);
        for (var i = 0; i < children.length; i++) {
          var value = children[i].value;
          var firstValue = children[startIndex].value;
          var isVertical_1 = partition.width < partition.height;
          stackSum += value;
          var partThickness = isVertical_1 ? partition.height : partition.width;
          var partLength = isVertical_1 ? partition.width : partition.height;
          var firstTileLength = partLength * firstValue / stackSum;
          var stackThickness = partThickness * stackSum / partitionSum;
          var ratio = Math.max(firstTileLength, stackThickness) / Math.min(firstTileLength, stackThickness);
          var diff = Math.abs(targetTileAspectRatio - ratio);
          if (diff < minRatioDiff) {
            minRatioDiff = diff;
            continue;
          }
          stackSum -= value;
          stackThickness = partThickness * stackSum / partitionSum;
          var start_1 = isVertical_1 ? partition.x : partition.y;
          for (var j = startIndex; j < i; j++) {
            var child = children[j];
            var x = isVertical_1 ? start_1 : partition.x;
            var y = isVertical_1 ? partition.y : start_1;
            var length_1 = partLength * child.value / stackSum;
            var width_1 = isVertical_1 ? length_1 : stackThickness;
            var height_1 = isVertical_1 ? stackThickness : length_1;
            var childBox = new BBox(x, y, width_1, height_1);
            this.squarify(child, childBox, outputNodesBoxes);
            partitionSum -= child.value;
            start_1 += length_1;
          }
          if (isVertical_1) {
            partition.y += stackThickness;
            partition.height -= stackThickness;
          } else {
            partition.x += stackThickness;
            partition.width -= stackThickness;
          }
          startIndex = i;
          stackSum = 0;
          minRatioDiff = Infinity;
          i--;
        }
        var isVertical = partition.width < partition.height;
        var start = isVertical ? partition.x : partition.y;
        for (var i = startIndex; i < children.length; i++) {
          var x = isVertical ? start : partition.x;
          var y = isVertical ? partition.y : start;
          var part = children[i].value / partitionSum;
          var width_2 = partition.width * (isVertical ? part : 1);
          var height_2 = partition.height * (isVertical ? 1 : part);
          var childBox = new BBox(x, y, width_2, height_2);
          this.squarify(children[i], childBox, outputNodesBoxes);
          start += isVertical ? width_2 : height_2;
        }
        return outputNodesBoxes;
      };
      TreemapSeries2.prototype.processData = function() {
        return __awaiter15(this, void 0, void 0, function() {
          var _a5, data, sizeKey, labelKey, colorKey, colorDomain, colorRange, groupFill, colorScale, createTreeNodeDatum;
          var _this = this;
          return __generator15(this, function(_b2) {
            if (!this.data) {
              return [
                2
                /*return*/
              ];
            }
            _a5 = this, data = _a5.data, sizeKey = _a5.sizeKey, labelKey = _a5.labelKey, colorKey = _a5.colorKey, colorDomain = _a5.colorDomain, colorRange = _a5.colorRange, groupFill = _a5.groupFill;
            colorScale = new ColorScale();
            colorScale.domain = colorDomain;
            colorScale.range = colorRange;
            createTreeNodeDatum = function(datum, depth, parent) {
              var _a6, _b3;
              if (depth === void 0) {
                depth = 0;
              }
              var label = labelKey && datum[labelKey] || "";
              var colorScaleValue = colorKey ? (_a6 = datum[colorKey]) !== null && _a6 !== void 0 ? _a6 : depth : depth;
              colorScaleValue = validateColor(colorScaleValue);
              var isLeaf = !datum.children;
              var fill = typeof colorScaleValue === "string" ? colorScaleValue : isLeaf || !groupFill ? colorScale.convert(colorScaleValue) : groupFill;
              var nodeDatum = {
                datum,
                depth,
                parent,
                value: 0,
                label,
                fill,
                series: _this,
                isLeaf,
                children: []
              };
              if (isLeaf) {
                nodeDatum.value = sizeKey ? (_b3 = datum[sizeKey]) !== null && _b3 !== void 0 ? _b3 : 1 : 1;
              } else {
                datum.children.forEach(function(child) {
                  var childNodeDatum = createTreeNodeDatum(child, depth + 1, nodeDatum);
                  var value = childNodeDatum.value;
                  if (isNaN(value) || !isFinite(value) || value === 0) {
                    return;
                  }
                  nodeDatum.value += value;
                  nodeDatum.children.push(childNodeDatum);
                });
                nodeDatum.children.sort(function(a, b) {
                  return b.value - a.value;
                });
              }
              return nodeDatum;
            };
            this.dataRoot = createTreeNodeDatum(data);
            return [
              2
              /*return*/
            ];
          });
        });
      };
      TreemapSeries2.prototype.createNodeData = function() {
        return __awaiter15(this, void 0, void 0, function() {
          return __generator15(this, function(_a5) {
            return [2, []];
          });
        });
      };
      TreemapSeries2.prototype.update = function() {
        return __awaiter15(this, void 0, void 0, function() {
          return __generator15(this, function(_a5) {
            switch (_a5.label) {
              case 0:
                return [4, this.updateSelections()];
              case 1:
                _a5.sent();
                return [4, this.updateNodes()];
              case 2:
                _a5.sent();
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      TreemapSeries2.prototype.updateSelections = function() {
        return __awaiter15(this, void 0, void 0, function() {
          var _a5, chart, dataRoot, seriesRect, descendants, traverse, _b2, groupSelection, highlightSelection, update;
          return __generator15(this, function(_c2) {
            if (!this.nodeDataRefresh) {
              return [
                2
                /*return*/
              ];
            }
            this.nodeDataRefresh = false;
            _a5 = this, chart = _a5.chart, dataRoot = _a5.dataRoot;
            if (!chart || !dataRoot) {
              return [
                2
                /*return*/
              ];
            }
            seriesRect = chart.getSeriesRect();
            if (!seriesRect) {
              return [
                2
                /*return*/
              ];
            }
            descendants = [];
            traverse = function(datum) {
              var _a6;
              descendants.push(datum);
              (_a6 = datum.children) === null || _a6 === void 0 ? void 0 : _a6.forEach(traverse);
            };
            traverse(this.dataRoot);
            _b2 = this, groupSelection = _b2.groupSelection, highlightSelection = _b2.highlightSelection;
            update = function(selection) {
              return selection.update(descendants, function(group2) {
                var rect = new Rect();
                var nameLabel = new Text();
                nameLabel.tag = TextNodeTag.Name;
                var valueLabel = new Text();
                valueLabel.tag = TextNodeTag.Value;
                group2.append([rect, nameLabel, valueLabel]);
              });
            };
            this.groupSelection = update(groupSelection);
            this.highlightSelection = update(highlightSelection);
            return [
              2
              /*return*/
            ];
          });
        });
      };
      TreemapSeries2.prototype.isDatumHighlighted = function(datum) {
        var _a5;
        var highlightedDatum = (_a5 = this.highlightManager) === null || _a5 === void 0 ? void 0 : _a5.getActiveHighlight();
        return datum === highlightedDatum && (datum.isLeaf || this.highlightGroups);
      };
      TreemapSeries2.prototype.getTileFormat = function(datum, isHighlighted) {
        var _a5;
        var formatter = this.formatter;
        if (!formatter) {
          return {};
        }
        var _b2 = this, gradient = _b2.gradient, colorKey = _b2.colorKey, labelKey = _b2.labelKey, sizeKey = _b2.sizeKey, tileStroke = _b2.tileStroke, tileStrokeWidth = _b2.tileStrokeWidth, groupStroke = _b2.groupStroke, groupStrokeWidth = _b2.groupStrokeWidth;
        var stroke = datum.isLeaf ? tileStroke : groupStroke;
        var strokeWidth = datum.isLeaf ? tileStrokeWidth : groupStrokeWidth;
        return formatter({
          seriesId: this.id,
          datum: datum.datum,
          depth: datum.depth,
          parent: (_a5 = datum.parent) === null || _a5 === void 0 ? void 0 : _a5.datum,
          colorKey,
          sizeKey,
          labelKey,
          fill: datum.fill,
          stroke,
          strokeWidth,
          gradient,
          highlighted: isHighlighted
        });
      };
      TreemapSeries2.prototype.updateNodes = function() {
        return __awaiter15(this, void 0, void 0, function() {
          var _a5, gradient, _b2, _c2, highlightedFill, highlightedFillOpacity, highlightedStroke, highlightedDatumStrokeWidth, highlightedTextColor, tileStroke, tileStrokeWidth, groupStroke, groupStrokeWidth, tileShadow, labelShadow, seriesRect, boxes, labelMeta, updateRectFn, updateLabelFn;
          var _this = this;
          return __generator15(this, function(_d2) {
            if (!this.chart) {
              return [
                2
                /*return*/
              ];
            }
            _a5 = this, gradient = _a5.gradient, _b2 = _a5.highlightStyle, _c2 = _b2.item, highlightedFill = _c2.fill, highlightedFillOpacity = _c2.fillOpacity, highlightedStroke = _c2.stroke, highlightedDatumStrokeWidth = _c2.strokeWidth, highlightedTextColor = _b2.text.color, tileStroke = _a5.tileStroke, tileStrokeWidth = _a5.tileStrokeWidth, groupStroke = _a5.groupStroke, groupStrokeWidth = _a5.groupStrokeWidth, tileShadow = _a5.tileShadow, labelShadow = _a5.labelShadow;
            seriesRect = this.chart.getSeriesRect();
            boxes = this.squarify(this.dataRoot, new BBox(0, 0, seriesRect.width, seriesRect.height));
            labelMeta = this.buildLabelMeta(boxes);
            this.updateNodeMidPoint(boxes);
            updateRectFn = function(rect, datum, isDatumHighlighted) {
              var _a6, _b3, _c3, _d3, _e, _f;
              var box = boxes.get(datum);
              if (!box) {
                rect.visible = false;
                return;
              }
              var fill = isDatumHighlighted && highlightedFill !== void 0 ? highlightedFill : datum.fill;
              var fillOpacity = (_a6 = isDatumHighlighted ? highlightedFillOpacity : 1) !== null && _a6 !== void 0 ? _a6 : 1;
              var stroke = isDatumHighlighted && highlightedStroke !== void 0 ? highlightedStroke : datum.isLeaf ? tileStroke : groupStroke;
              var strokeWidth = isDatumHighlighted && highlightedDatumStrokeWidth !== void 0 ? highlightedDatumStrokeWidth : datum.isLeaf ? tileStrokeWidth : groupStrokeWidth;
              var format2 = _this.getTileFormat(datum, isDatumHighlighted);
              var fillColor = validateColor((_b3 = format2 === null || format2 === void 0 ? void 0 : format2.fill) !== null && _b3 !== void 0 ? _b3 : fill);
              if ((_c3 = format2 === null || format2 === void 0 ? void 0 : format2.gradient) !== null && _c3 !== void 0 ? _c3 : gradient) {
                var start = Color.tryParseFromString(fill).brighter().toString();
                var end = Color.tryParseFromString(fill).darker().toString();
                rect.fill = "linear-gradient(180deg, " + start + ", " + end + ")";
              } else {
                rect.fill = fillColor;
              }
              rect.fillOpacity = (_d3 = format2 === null || format2 === void 0 ? void 0 : format2.fillOpacity) !== null && _d3 !== void 0 ? _d3 : fillOpacity;
              rect.stroke = validateColor((_e = format2 === null || format2 === void 0 ? void 0 : format2.stroke) !== null && _e !== void 0 ? _e : stroke);
              rect.strokeWidth = (_f = format2 === null || format2 === void 0 ? void 0 : format2.strokeWidth) !== null && _f !== void 0 ? _f : strokeWidth;
              rect.fillShadow = tileShadow;
              rect.crisp = true;
              rect.x = box.x;
              rect.y = box.y;
              rect.width = box.width;
              rect.height = box.height;
              rect.visible = true;
              if (isDatumHighlighted && !datum.isLeaf) {
                var padding = _this.getNodePadding(datum, box);
                var x0 = box.x + padding.left;
                var x1 = box.x + box.width - padding.right;
                var y0 = box.y + padding.top;
                var y1 = box.y + box.height - padding.bottom;
                if (rect.clipPath) {
                  rect.clipPath.clear();
                } else {
                  rect.clipPath = new Path2D();
                }
                rect.clipMode = "punch-out";
                rect.clipPath.moveTo(x0, y0);
                rect.clipPath.lineTo(x1, y0);
                rect.clipPath.lineTo(x1, y1);
                rect.clipPath.lineTo(x0, y1);
                rect.clipPath.lineTo(x0, y0);
                rect.clipPath.closePath();
              }
            };
            this.groupSelection.selectByClass(Rect).forEach(function(rect) {
              return updateRectFn(rect, rect.datum, false);
            });
            this.highlightSelection.selectByClass(Rect).forEach(function(rect) {
              var isDatumHighlighted = _this.isDatumHighlighted(rect.datum);
              rect.visible = isDatumHighlighted;
              if (rect.visible) {
                updateRectFn(rect, rect.datum, isDatumHighlighted);
              }
            });
            updateLabelFn = function(text, datum, highlighted, key2) {
              var meta = labelMeta.get(datum);
              var label = meta === null || meta === void 0 ? void 0 : meta[key2];
              if (!label) {
                text.visible = false;
                return;
              }
              text.text = label.text;
              text.fontFamily = label.style.fontFamily;
              text.fontSize = label.style.fontSize;
              text.fontWeight = label.style.fontWeight;
              text.fill = highlighted ? highlightedTextColor !== null && highlightedTextColor !== void 0 ? highlightedTextColor : label.style.color : label.style.color;
              text.fillShadow = highlighted ? void 0 : labelShadow;
              text.textAlign = label.hAlign;
              text.textBaseline = label.vAlign;
              text.x = label.x;
              text.y = label.y;
              text.visible = true;
            };
            this.groupSelection.selectByTag(TextNodeTag.Name).forEach(function(text) {
              return updateLabelFn(text, text.datum, false, "label");
            });
            this.highlightSelection.selectByTag(TextNodeTag.Name).forEach(function(text) {
              var isDatumHighlighted = _this.isDatumHighlighted(text.datum);
              text.visible = isDatumHighlighted;
              if (text.visible) {
                updateLabelFn(text, text.datum, isDatumHighlighted, "label");
              }
            });
            this.groupSelection.selectByTag(TextNodeTag.Value).forEach(function(text) {
              return updateLabelFn(text, text.datum, false, "value");
            });
            this.highlightSelection.selectByTag(TextNodeTag.Value).forEach(function(text) {
              var isDatumHighlighted = _this.isDatumHighlighted(text.datum);
              text.visible = isDatumHighlighted;
              if (text.visible) {
                updateLabelFn(text, text.datum, isDatumHighlighted, "value");
              }
            });
            return [
              2
              /*return*/
            ];
          });
        });
      };
      TreemapSeries2.prototype.updateNodeMidPoint = function(boxes) {
        boxes.forEach(function(box, treeNodeDatum) {
          treeNodeDatum.nodeMidPoint = {
            x: box.x + box.width / 2,
            y: box.y
          };
        });
      };
      TreemapSeries2.prototype.buildLabelMeta = function(boxes) {
        var _a5 = this, labels = _a5.labels, title = _a5.title, subtitle = _a5.subtitle, nodePadding = _a5.nodePadding, labelKey = _a5.labelKey;
        var labelMeta = /* @__PURE__ */ new Map();
        boxes.forEach(function(box, datum) {
          if (!labelKey || datum.depth === 0) {
            return;
          }
          var labelText = datum.isLeaf ? datum.label : datum.label.toUpperCase();
          var labelStyle;
          if (datum.isLeaf) {
            labelStyle = [labels.large, labels.medium, labels.small].find(function(s) {
              var _a6 = getTextSize(labelText, s), width = _a6.width, height = _a6.height;
              return width < box.width && height < box.height;
            }) || labels.small;
          } else if (datum.depth === 1) {
            labelStyle = title;
          } else {
            labelStyle = subtitle;
          }
          var labelSize = getTextSize(labelText, labelStyle);
          var availTextWidth = box.width - 2 * nodePadding;
          var availTextHeight = box.height - 2 * nodePadding;
          var minSizeRatio = 3;
          if (labelStyle.fontSize > box.width / minSizeRatio || labelStyle.fontSize > box.height / minSizeRatio) {
            return;
          }
          if (labelSize.width > availTextWidth) {
            var textLength = Math.floor(labelText.length * availTextWidth / labelSize.width) - 1;
            labelText = labelText.substring(0, textLength) + "…";
          }
          var valueConfig = labels.value;
          var valueStyle = valueConfig.style;
          var valueMargin = (labelStyle.fontSize + valueStyle.fontSize) / 8;
          var valueText = String(datum.isLeaf ? valueConfig.formatter ? valueConfig.formatter({ datum: datum.datum }) : valueConfig.key ? datum.datum[valueConfig.key] : "" : "");
          var valueSize = getTextSize(valueText, valueStyle);
          var hasValueText = valueText && valueSize.width < availTextWidth && valueSize.height + labelSize.height + valueMargin < availTextHeight;
          labelMeta.set(datum, {
            label: __assign15({ text: labelText, style: labelStyle }, datum.isLeaf ? {
              hAlign: "center",
              vAlign: "middle",
              x: box.x + box.width / 2,
              y: box.y + box.height / 2 - (hasValueText ? valueSize.height / 2 + valueMargin / 2 : 0)
            } : {
              hAlign: "left",
              vAlign: "top",
              x: box.x + nodePadding,
              y: box.y + nodePadding
            }),
            value: hasValueText ? {
              text: valueText,
              style: valueStyle,
              hAlign: "center",
              vAlign: "middle",
              x: box.x + box.width / 2,
              y: box.y + box.height / 2 + labelSize.height / 2 + valueMargin / 2
            } : void 0
          });
        });
        return labelMeta;
      };
      TreemapSeries2.prototype.getDomain = function(_direction) {
        return [0, 1];
      };
      TreemapSeries2.prototype.getNodeClickEvent = function(event, datum) {
        return new TreemapSeriesNodeClickEvent(this.labelKey, this.sizeKey, this.colorKey, event, datum, this);
      };
      TreemapSeries2.prototype.getNodeDoubleClickEvent = function(event, datum) {
        return new TreemapSeriesNodeDoubleClickEvent(this.labelKey, this.sizeKey, this.colorKey, event, datum, this);
      };
      TreemapSeries2.prototype.getTooltipHtml = function(nodeDatum) {
        var _a5;
        if (!this.highlightGroups && !nodeDatum.isLeaf) {
          return "";
        }
        var _b2 = this, tooltip = _b2.tooltip, sizeKey = _b2.sizeKey, labelKey = _b2.labelKey, colorKey = _b2.colorKey, rootName = _b2.rootName, seriesId = _b2.id, labels = _b2.labels;
        var datum = nodeDatum.datum;
        var tooltipRenderer = tooltip.renderer;
        var title = nodeDatum.depth ? datum[labelKey] : rootName || datum[labelKey];
        var content = "";
        var format2 = this.getTileFormat(nodeDatum, false);
        var color = (format2 === null || format2 === void 0 ? void 0 : format2.fill) || nodeDatum.fill || "gray";
        var valueKey = labels.value.key;
        var valueFormatter = labels.value.formatter;
        if (valueKey || valueFormatter) {
          var valueText = "";
          if (valueFormatter) {
            valueText = valueFormatter({ datum });
          } else {
            var value = datum[valueKey];
            if (typeof value === "number" && isFinite(value)) {
              valueText = toFixed(value);
            }
          }
          if (valueText) {
            if (labels.value.name) {
              content += "<b>" + labels.value.name + ":</b> ";
            }
            content += valueText;
          }
        }
        var defaults = {
          title,
          backgroundColor: color,
          content
        };
        if (tooltipRenderer) {
          return toTooltipHtml(tooltipRenderer({
            datum: nodeDatum.datum,
            parent: (_a5 = nodeDatum.parent) === null || _a5 === void 0 ? void 0 : _a5.datum,
            depth: nodeDatum.depth,
            sizeKey,
            labelKey,
            colorKey,
            title,
            color,
            seriesId
          }), defaults);
        }
        if (!title && !content) {
          return "";
        }
        return toTooltipHtml(defaults);
      };
      TreemapSeries2.prototype.getLegendData = function() {
        return [];
      };
      TreemapSeries2.className = "TreemapSeries";
      TreemapSeries2.type = "treemap";
      __decorate39([
        Validate(NUMBER(0))
      ], TreemapSeries2.prototype, "nodePadding", void 0);
      __decorate39([
        Validate(STRING)
      ], TreemapSeries2.prototype, "labelKey", void 0);
      __decorate39([
        Validate(OPT_STRING)
      ], TreemapSeries2.prototype, "sizeKey", void 0);
      __decorate39([
        Validate(OPT_STRING)
      ], TreemapSeries2.prototype, "colorKey", void 0);
      __decorate39([
        Validate(NUMBER_ARRAY)
      ], TreemapSeries2.prototype, "colorDomain", void 0);
      __decorate39([
        Validate(COLOR_STRING_ARRAY)
      ], TreemapSeries2.prototype, "colorRange", void 0);
      __decorate39([
        Validate(OPT_STRING)
      ], TreemapSeries2.prototype, "groupFill", void 0);
      __decorate39([
        Validate(OPT_COLOR_STRING)
      ], TreemapSeries2.prototype, "groupStroke", void 0);
      __decorate39([
        Validate(OPT_NUMBER(0))
      ], TreemapSeries2.prototype, "groupStrokeWidth", void 0);
      __decorate39([
        Validate(OPT_COLOR_STRING)
      ], TreemapSeries2.prototype, "tileStroke", void 0);
      __decorate39([
        Validate(OPT_NUMBER(0))
      ], TreemapSeries2.prototype, "tileStrokeWidth", void 0);
      __decorate39([
        Validate(BOOLEAN)
      ], TreemapSeries2.prototype, "gradient", void 0);
      __decorate39([
        Validate(OPT_FUNCTION)
      ], TreemapSeries2.prototype, "formatter", void 0);
      __decorate39([
        Validate(STRING)
      ], TreemapSeries2.prototype, "colorName", void 0);
      __decorate39([
        Validate(STRING)
      ], TreemapSeries2.prototype, "rootName", void 0);
      __decorate39([
        Validate(OPT_BOOLEAN)
      ], TreemapSeries2.prototype, "highlightGroups", void 0);
      return TreemapSeries2;
    }(HierarchySeries);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/chartTypes.js
var types, CHART_TYPES;
var init_chartTypes = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/chartTypes.js"() {
    types = {
      area: "cartesian",
      bar: "cartesian",
      column: "cartesian",
      histogram: "cartesian",
      line: "cartesian",
      scatter: "cartesian",
      treemap: "hierarchy",
      pie: "polar"
    };
    CHART_TYPES = {
      add: function(seriesType, chartType2) {
        types[seriesType] = chartType2;
      },
      delete: function(seriesType) {
        delete types[seriesType];
      },
      has: function(seriesType) {
        return Object.prototype.hasOwnProperty.call(types, seriesType);
      },
      isCartesian: function(seriesType) {
        return types[seriesType] === "cartesian";
      },
      isPolar: function(seriesType) {
        return types[seriesType] === "polar";
      },
      isHierarchy: function(seriesType) {
        return types[seriesType] === "hierarchy";
      },
      get seriesTypes() {
        return Object.keys(types);
      },
      get cartesianTypes() {
        var _this = this;
        return this.seriesTypes.filter(function(t) {
          return _this.isCartesian(t);
        });
      },
      get polarTypes() {
        var _this = this;
        return this.seriesTypes.filter(function(t) {
          return _this.isPolar(t);
        });
      },
      get hierarchyTypes() {
        var _this = this;
        return this.seriesTypes.filter(function(t) {
          return _this.isHierarchy(t);
        });
      }
    };
  }
});

// node_modules/ag-charts-community/dist/esm/es5/util/object.js
function deepMerge(target2, source) {
  if (isPlainObject(target2) && isPlainObject(source)) {
    var result_1 = {};
    Object.keys(target2).forEach(function(key2) {
      if (key2 in source) {
        result_1[key2] = deepMerge(target2[key2], source[key2]);
      } else {
        result_1[key2] = target2[key2];
      }
    });
    Object.keys(source).forEach(function(key2) {
      if (!(key2 in target2)) {
        result_1[key2] = source[key2];
      }
    });
    return result_1;
  }
  if (Array.isArray(target2) && !Array.isArray(source) || isObject(target2) && !isObject(source)) {
    return target2;
  }
  return source;
}
function isObject(value) {
  return value && typeof value === "object";
}
function isPlainObject(x) {
  return isObject(x) && x.constructor === Object;
}
var init_object = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/util/object.js"() {
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/themes/chartTheme.js
var __assign16, __read38, palette, BOLD, INSIDE, RIGHT, ChartTheme;
var init_chartTheme = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/themes/chartTheme.js"() {
    init_object();
    init_chartTypes();
    __assign16 = function() {
      __assign16 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign16.apply(this, arguments);
    };
    __read38 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    palette = {
      fills: ["#f3622d", "#fba71b", "#57b757", "#41a9c9", "#4258c9", "#9a42c8", "#c84164", "#888888"],
      strokes: ["#aa4520", "#b07513", "#3d803d", "#2d768d", "#2e3e8d", "#6c2e8c", "#8c2d46", "#5f5f5f"]
    };
    BOLD = "bold";
    INSIDE = "inside";
    RIGHT = "right";
    ChartTheme = /** @class */
    function() {
      function ChartTheme2(options) {
        options = deepMerge({}, options || {});
        var _a5 = options.overrides, overrides = _a5 === void 0 ? null : _a5, _b2 = options.palette, palette10 = _b2 === void 0 ? null : _b2;
        var defaults = this.createChartConfigPerChartType(this.getDefaults());
        if (overrides) {
          var common = overrides.common, cartesian = overrides.cartesian, polar = overrides.polar, hierarchy = overrides.hierarchy;
          var applyOverrides = function(type2, seriesTypes, overrideOpts) {
            if (overrideOpts) {
              defaults[type2] = deepMerge(defaults[type2], overrideOpts);
              seriesTypes.forEach(function(s) {
                var seriesType = s;
                defaults[seriesType] = deepMerge(defaults[seriesType], overrideOpts);
              });
            }
          };
          applyOverrides("common", Object.keys(defaults), common);
          applyOverrides("cartesian", CHART_TYPES.cartesianTypes, cartesian);
          applyOverrides("polar", CHART_TYPES.polarTypes, polar);
          applyOverrides("hierarchy", CHART_TYPES.hierarchyTypes, hierarchy);
          CHART_TYPES.seriesTypes.forEach(function(s) {
            var _a6;
            var seriesType = s;
            var chartConfig = overrides[seriesType];
            if (chartConfig) {
              if (chartConfig.series) {
                chartConfig.series = (_a6 = {}, _a6[seriesType] = chartConfig.series, _a6);
              }
              defaults[seriesType] = deepMerge(defaults[seriesType], chartConfig);
            }
          });
        }
        this.palette = palette10 !== null && palette10 !== void 0 ? palette10 : this.getPalette();
        this.config = Object.freeze(defaults);
      }
      ChartTheme2.prototype.getPalette = function() {
        return palette;
      };
      ChartTheme2.getAxisDefaults = function() {
        return {
          top: {},
          right: {},
          bottom: {},
          left: {},
          thickness: 0,
          title: {
            enabled: false,
            text: "Axis Title",
            fontStyle: void 0,
            fontWeight: BOLD,
            fontSize: 12,
            fontFamily: this.fontFamily,
            color: "rgb(70, 70, 70)"
          },
          label: {
            fontStyle: void 0,
            fontWeight: void 0,
            fontSize: 12,
            fontFamily: this.fontFamily,
            padding: 5,
            rotation: void 0,
            color: "rgb(87, 87, 87)",
            formatter: void 0,
            autoRotate: false,
            avoidCollisions: true
          },
          line: {
            width: 1,
            color: "rgb(195, 195, 195)"
          },
          tick: {
            width: 1,
            size: 6,
            color: "rgb(195, 195, 195)"
          },
          gridStyle: [
            {
              stroke: "rgb(219, 219, 219)",
              lineDash: [4, 2]
            }
          ],
          crossLines: {
            enabled: false,
            fill: "rgb(187,221,232)",
            stroke: "rgb(70,162,192)",
            strokeWidth: 1,
            label: {
              enabled: false,
              fontStyle: void 0,
              fontWeight: void 0,
              fontSize: 12,
              fontFamily: this.fontFamily,
              padding: 5,
              color: "rgb(87, 87, 87)",
              rotation: void 0
            }
          }
        };
      };
      ChartTheme2.getSeriesDefaults = function() {
        return {
          tooltip: {
            enabled: true,
            renderer: void 0
          },
          visible: true,
          showInLegend: true,
          highlightStyle: {
            item: {
              fill: "yellow",
              fillOpacity: 1
            },
            series: {
              dimOpacity: 1
            },
            text: {
              color: "black"
            }
          },
          nodeClickRange: "exact"
        };
      };
      ChartTheme2.getBarSeriesDefaults = function() {
        return __assign16(__assign16({}, this.getSeriesDefaults()), { flipXY: false, fillOpacity: 1, strokeOpacity: 1, xKey: "", xName: "", normalizedTo: void 0, strokeWidth: 1, lineDash: [0], lineDashOffset: 0, label: {
          enabled: false,
          fontStyle: void 0,
          fontWeight: void 0,
          fontSize: 12,
          fontFamily: this.fontFamily,
          color: "rgb(70, 70, 70)",
          formatter: void 0,
          placement: INSIDE
        }, shadow: {
          enabled: false,
          color: "rgba(0, 0, 0, 0.5)",
          xOffset: 3,
          yOffset: 3,
          blur: 5
        } });
      };
      ChartTheme2.getLineSeriesDefaults = function() {
        var seriesDefaults2 = this.getSeriesDefaults();
        return __assign16(__assign16({}, seriesDefaults2), { tooltip: __assign16(__assign16({}, seriesDefaults2.tooltip), { format: void 0, position: {
          type: "node"
        } }) });
      };
      ChartTheme2.getAreaSeriesDefaults = function() {
        var seriesDefaults2 = this.getSeriesDefaults();
        return __assign16(__assign16({}, seriesDefaults2), { nodeClickRange: "nearest", tooltip: __assign16(__assign16({}, seriesDefaults2.tooltip), { position: {
          type: "node"
        } }) });
      };
      ChartTheme2.getScatterSeriesDefaults = function() {
        var seriesDefaults2 = this.getSeriesDefaults();
        return __assign16(__assign16({}, seriesDefaults2), { tooltip: __assign16(__assign16({}, seriesDefaults2.tooltip), { position: {
          type: "node"
        } }) });
      };
      ChartTheme2.getCartesianSeriesMarkerDefaults = function() {
        return {
          enabled: true,
          shape: "circle",
          size: 6,
          maxSize: 30,
          strokeWidth: 1,
          formatter: void 0
        };
      };
      ChartTheme2.getChartDefaults = function() {
        return {
          background: {
            visible: true,
            fill: "white"
          },
          padding: {
            top: 20,
            right: 20,
            bottom: 20,
            left: 20
          },
          title: {
            enabled: false,
            text: "Title",
            fontStyle: void 0,
            fontWeight: BOLD,
            fontSize: 16,
            fontFamily: this.fontFamily,
            color: "rgb(70, 70, 70)"
          },
          subtitle: {
            enabled: false,
            text: "Subtitle",
            fontStyle: void 0,
            fontWeight: void 0,
            fontSize: 12,
            fontFamily: this.fontFamily,
            color: "rgb(140, 140, 140)"
          },
          footnote: {
            enabled: false,
            text: "Footnote",
            fontStyle: void 0,
            fontWeight: void 0,
            fontSize: 12,
            fontFamily: this.fontFamily,
            color: "rgb(140, 140, 140)",
            spacing: 30
          },
          legend: {
            enabled: true,
            position: RIGHT,
            spacing: 20,
            listeners: {},
            item: {
              paddingX: 16,
              paddingY: 8,
              marker: {
                shape: void 0,
                size: 15,
                strokeWidth: 1,
                padding: 8
              },
              label: {
                color: "black",
                fontStyle: void 0,
                fontWeight: void 0,
                fontSize: 12,
                fontFamily: this.fontFamily,
                formatter: void 0
              }
            },
            reverseOrder: false,
            pagination: {
              marker: {
                size: 12
              },
              activeStyle: {
                fill: "rgb(70, 70, 70)"
              },
              inactiveStyle: {
                fill: "rgb(219, 219, 219)"
              },
              highlightStyle: {
                fill: "rgb(70, 70, 70)"
              },
              label: {
                color: "rgb(70, 70, 70)"
              }
            }
          },
          tooltip: {
            enabled: true,
            range: "nearest",
            delay: 0
          },
          listeners: {}
        };
      };
      ChartTheme2.prototype.createChartConfigPerChartType = function(config) {
        var typeToAliases = {
          cartesian: CHART_TYPES.cartesianTypes,
          polar: CHART_TYPES.polarTypes,
          hierarchy: CHART_TYPES.hierarchyTypes,
          groupedCategory: []
        };
        Object.entries(typeToAliases).forEach(function(_a5) {
          var _b2 = __read38(_a5, 2), type2 = _b2[0], aliases = _b2[1];
          aliases.forEach(function(alias) {
            if (!config[alias]) {
              config[alias] = deepMerge({}, config[type2]);
            }
          });
        });
        return config;
      };
      ChartTheme2.prototype.getDefaults = function() {
        var defaults = deepMerge({}, ChartTheme2.defaults);
        var getOverridesByType = function(seriesTypes) {
          var result = {};
          result.series = seriesTypes.reduce(function(obj, seriesType) {
            if (Object.prototype.hasOwnProperty.call(ChartTheme2.seriesThemeOverrides, seriesType)) {
              obj[seriesType] = ChartTheme2.seriesThemeOverrides[seriesType]({
                seriesDefaults: ChartTheme2.getSeriesDefaults(),
                defaultFontFamily: ChartTheme2.fontFamily
              });
            }
            return obj;
          }, {});
          return result;
        };
        var extension = {
          cartesian: getOverridesByType(CHART_TYPES.cartesianTypes),
          groupedCategory: getOverridesByType(CHART_TYPES.cartesianTypes),
          polar: getOverridesByType(CHART_TYPES.polarTypes),
          hierarchy: getOverridesByType(CHART_TYPES.hierarchyTypes)
        };
        return deepMerge(defaults, extension);
      };
      ChartTheme2.prototype.mergeWithParentDefaults = function(parentDefaults, defaults) {
        return deepMerge(parentDefaults, defaults);
      };
      ChartTheme2.fontFamily = "Verdana, sans-serif";
      ChartTheme2.seriesThemeOverrides = {};
      ChartTheme2.cartesianDefaults = __assign16(__assign16({}, ChartTheme2.getChartDefaults()), { axes: {
        number: __assign16({}, ChartTheme2.getAxisDefaults()),
        log: __assign16(__assign16({}, ChartTheme2.getAxisDefaults()), { base: 10 }),
        category: __assign16(__assign16({}, ChartTheme2.getAxisDefaults()), { groupPaddingInner: 0.1, label: __assign16(__assign16({}, ChartTheme2.getAxisDefaults().label), { autoRotate: true }) }),
        groupedCategory: __assign16({}, ChartTheme2.getAxisDefaults()),
        time: __assign16({}, ChartTheme2.getAxisDefaults())
      }, series: {
        column: __assign16(__assign16({}, ChartTheme2.getBarSeriesDefaults()), { flipXY: false }),
        bar: __assign16(__assign16({}, ChartTheme2.getBarSeriesDefaults()), { flipXY: true }),
        line: __assign16(__assign16({}, ChartTheme2.getLineSeriesDefaults()), { title: void 0, xKey: "", xName: "", yKey: "", yName: "", strokeWidth: 2, strokeOpacity: 1, lineDash: [0], lineDashOffset: 0, marker: __assign16(__assign16({}, ChartTheme2.getCartesianSeriesMarkerDefaults()), { fillOpacity: 1, strokeOpacity: 1 }), label: {
          enabled: false,
          fontStyle: void 0,
          fontWeight: void 0,
          fontSize: 12,
          fontFamily: ChartTheme2.fontFamily,
          color: "rgb(70, 70, 70)",
          formatter: void 0
        } }),
        scatter: __assign16(__assign16({}, ChartTheme2.getScatterSeriesDefaults()), { title: void 0, xKey: "", yKey: "", sizeKey: void 0, labelKey: void 0, xName: "", yName: "", sizeName: "Size", labelName: "Label", marker: __assign16({}, ChartTheme2.getCartesianSeriesMarkerDefaults()), label: {
          enabled: false,
          fontStyle: void 0,
          fontWeight: void 0,
          fontSize: 12,
          fontFamily: ChartTheme2.fontFamily,
          color: "rgb(70, 70, 70)"
        } }),
        area: __assign16(__assign16({}, ChartTheme2.getAreaSeriesDefaults()), { xKey: "", xName: "", normalizedTo: void 0, fillOpacity: 0.8, strokeOpacity: 1, strokeWidth: 2, lineDash: [0], lineDashOffset: 0, shadow: {
          enabled: false,
          color: "rgba(0, 0, 0, 0.5)",
          xOffset: 3,
          yOffset: 3,
          blur: 5
        }, marker: __assign16(__assign16({}, ChartTheme2.getCartesianSeriesMarkerDefaults()), { fillOpacity: 1, strokeOpacity: 1, enabled: false }), label: {
          enabled: false,
          fontStyle: void 0,
          fontWeight: void 0,
          fontSize: 12,
          fontFamily: ChartTheme2.fontFamily,
          color: "rgb(70, 70, 70)",
          formatter: void 0
        } }),
        histogram: __assign16(__assign16({}, ChartTheme2.getSeriesDefaults()), { xKey: "", yKey: "", xName: "", yName: "", strokeWidth: 1, fillOpacity: 1, strokeOpacity: 1, lineDash: [0], lineDashOffset: 0, areaPlot: false, bins: void 0, aggregation: "sum", label: {
          enabled: false,
          fontStyle: void 0,
          fontWeight: void 0,
          fontSize: 12,
          fontFamily: ChartTheme2.fontFamily,
          color: "rgb(70, 70, 70)",
          formatter: void 0
        }, shadow: {
          enabled: true,
          color: "rgba(0, 0, 0, 0.5)",
          xOffset: 0,
          yOffset: 0,
          blur: 5
        } })
      }, navigator: {
        enabled: false,
        height: 30,
        mask: {
          fill: "#999999",
          stroke: "#999999",
          strokeWidth: 1,
          fillOpacity: 0.2
        },
        minHandle: {
          fill: "#f2f2f2",
          stroke: "#999999",
          strokeWidth: 1,
          width: 8,
          height: 16,
          gripLineGap: 2,
          gripLineLength: 8
        },
        maxHandle: {
          fill: "#f2f2f2",
          stroke: "#999999",
          strokeWidth: 1,
          width: 8,
          height: 16,
          gripLineGap: 2,
          gripLineLength: 8
        }
      } });
      ChartTheme2.polarDefaults = __assign16(__assign16({}, ChartTheme2.getChartDefaults()), { series: {
        pie: __assign16(__assign16({}, ChartTheme2.getSeriesDefaults()), { title: {
          enabled: true,
          text: "",
          fontStyle: void 0,
          fontWeight: "bold",
          fontSize: 14,
          fontFamily: ChartTheme2.fontFamily,
          color: "rgb(70, 70, 70)"
        }, angleKey: "", angleName: "", radiusKey: void 0, radiusName: void 0, calloutLabelKey: void 0, calloutLabelName: void 0, sectorLabelKey: void 0, sectorLabelName: void 0, calloutLabel: {
          enabled: true,
          fontStyle: void 0,
          fontWeight: void 0,
          fontSize: 12,
          fontFamily: ChartTheme2.fontFamily,
          color: "rgb(70, 70, 70)",
          offset: 3,
          minAngle: 0
        }, sectorLabel: {
          enabled: true,
          fontStyle: void 0,
          fontWeight: void 0,
          fontSize: 12,
          fontFamily: ChartTheme2.fontFamily,
          color: "rgb(70, 70, 70)",
          positionOffset: 0,
          positionRatio: 0.5
        }, calloutLine: {
          length: 10,
          strokeWidth: 2
        }, fillOpacity: 1, strokeOpacity: 1, strokeWidth: 1, lineDash: [0], lineDashOffset: 0, rotation: 0, outerRadiusOffset: 0, innerRadiusOffset: 0, shadow: {
          enabled: false,
          color: "rgba(0, 0, 0, 0.5)",
          xOffset: 3,
          yOffset: 3,
          blur: 5
        }, innerLabels: {
          fontStyle: void 0,
          fontWeight: void 0,
          fontSize: 12,
          fontFamily: ChartTheme2.fontFamily,
          color: "rgb(70, 70, 70)",
          margin: 2
        } })
      } });
      ChartTheme2.hierarchyDefaults = __assign16(__assign16({}, ChartTheme2.getChartDefaults()), { series: {
        treemap: __assign16(__assign16({}, ChartTheme2.getSeriesDefaults()), { showInLegend: false, labelKey: "label", sizeKey: "size", colorKey: "color", colorDomain: [-5, 5], colorRange: ["#cb4b3f", "#6acb64"], groupFill: "#272931", groupStroke: "black", groupStrokeWidth: 1, tileStroke: "black", tileStrokeWidth: 1, gradient: true, tileShadow: {
          enabled: false,
          color: "rgba(0, 0, 0, 0.5)",
          xOffset: 3,
          yOffset: 3,
          blur: 5
        }, labelShadow: {
          enabled: true,
          color: "rgba(0, 0, 0, 0.4)",
          xOffset: 1.5,
          yOffset: 1.5,
          blur: 5
        }, highlightGroups: true, nodePadding: 2, title: {
          enabled: true,
          color: "white",
          fontStyle: void 0,
          fontWeight: "bold",
          fontSize: 12,
          fontFamily: "Verdana, sans-serif",
          padding: 15
        }, subtitle: {
          enabled: true,
          color: "white",
          fontStyle: void 0,
          fontWeight: void 0,
          fontSize: 9,
          fontFamily: "Verdana, sans-serif",
          padding: 13
        }, labels: {
          large: {
            enabled: true,
            fontStyle: void 0,
            fontWeight: "bold",
            fontSize: 18,
            fontFamily: "Verdana, sans-serif",
            color: "white"
          },
          medium: {
            enabled: true,
            fontStyle: void 0,
            fontWeight: "bold",
            fontSize: 14,
            fontFamily: "Verdana, sans-serif",
            color: "white"
          },
          small: {
            enabled: true,
            fontStyle: void 0,
            fontWeight: "bold",
            fontSize: 10,
            fontFamily: "Verdana, sans-serif",
            color: "white"
          },
          value: {
            style: {
              enabled: true,
              fontStyle: void 0,
              fontWeight: void 0,
              fontSize: 12,
              fontFamily: "Verdana, sans-serif",
              color: "white"
            }
          }
        } })
      } });
      ChartTheme2.defaults = {
        cartesian: ChartTheme2.cartesianDefaults,
        groupedCategory: ChartTheme2.cartesianDefaults,
        polar: ChartTheme2.polarDefaults,
        hierarchy: ChartTheme2.hierarchyDefaults
      };
      return ChartTheme2;
    }();
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/themes/darkTheme.js
var __extends51, __assign17, DarkTheme;
var init_darkTheme = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/themes/darkTheme.js"() {
    init_chartTheme();
    init_chartTypes();
    __extends51 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __assign17 = function() {
      __assign17 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign17.apply(this, arguments);
    };
    DarkTheme = /** @class */
    function(_super) {
      __extends51(DarkTheme2, _super);
      function DarkTheme2(options) {
        return _super.call(this, options) || this;
      }
      DarkTheme2.prototype.getDefaults = function() {
        var fontColor = DarkTheme2.fontColor;
        var mutedFontColor = DarkTheme2.mutedFontColor;
        var axisDefaults = {
          title: {
            color: fontColor
          },
          label: {
            color: fontColor
          },
          gridStyle: [
            {
              stroke: "rgb(88, 88, 88)",
              lineDash: [4, 2]
            }
          ]
        };
        var seriesLabelDefaults = {
          label: {
            color: fontColor
          }
        };
        var chartAxesDefaults = {
          axes: {
            number: __assign17({}, axisDefaults),
            category: __assign17({}, axisDefaults),
            time: __assign17({}, axisDefaults)
          }
        };
        var chartDefaults = {
          background: {
            fill: "rgb(34, 38, 41)"
          },
          title: {
            color: fontColor
          },
          subtitle: {
            color: mutedFontColor
          },
          legend: {
            item: {
              label: {
                color: fontColor
              }
            },
            pagination: {
              activeStyle: {
                fill: fontColor
              },
              inactiveStyle: {
                fill: mutedFontColor
              },
              highlightStyle: {
                fill: fontColor
              },
              label: {
                color: fontColor
              }
            }
          }
        };
        var getOverridesByType = function(seriesTypes) {
          return seriesTypes.reduce(function(obj, seriesType) {
            if (Object.prototype.hasOwnProperty.call(DarkTheme2.seriesDarkThemeOverrides, seriesType)) {
              obj[seriesType] = DarkTheme2.seriesDarkThemeOverrides[seriesType]({
                seriesLabelDefaults: DarkTheme2.seriesLabelDefaults
              });
            }
            return obj;
          }, {});
        };
        return this.mergeWithParentDefaults(_super.prototype.getDefaults.call(this), {
          cartesian: __assign17(__assign17(__assign17({}, chartDefaults), chartAxesDefaults), { series: __assign17({ bar: __assign17({}, seriesLabelDefaults), column: __assign17({}, seriesLabelDefaults), histogram: __assign17({}, seriesLabelDefaults) }, getOverridesByType(CHART_TYPES.cartesianTypes)) }),
          groupedCategory: __assign17(__assign17(__assign17({}, chartDefaults), chartAxesDefaults), { series: __assign17({ bar: __assign17({}, seriesLabelDefaults), column: __assign17({}, seriesLabelDefaults), histogram: __assign17({}, seriesLabelDefaults) }, getOverridesByType(CHART_TYPES.cartesianTypes)) }),
          polar: __assign17(__assign17({}, chartDefaults), { series: __assign17({ pie: {
            calloutLabel: {
              color: fontColor
            },
            sectorLabel: {
              color: fontColor
            },
            title: {
              color: fontColor
            },
            innerLabels: {
              color: fontColor
            }
          } }, getOverridesByType(CHART_TYPES.polarTypes)) }),
          hierarchy: __assign17(__assign17({}, chartDefaults), { series: __assign17({ treemap: {
            tileStroke: "white",
            groupStroke: "white",
            title: {
              color: fontColor
            },
            subtitle: {
              color: mutedFontColor
            },
            labels: {
              large: {
                color: fontColor
              },
              medium: {
                color: fontColor
              },
              small: {
                color: fontColor
              },
              value: {
                style: {
                  color: fontColor
                }
              }
            }
          } }, getOverridesByType(CHART_TYPES.hierarchyTypes)) })
        });
      };
      DarkTheme2.fontColor = "rgb(200, 200, 200)";
      DarkTheme2.mutedFontColor = "rgb(150, 150, 150)";
      DarkTheme2.seriesLabelDefaults = {
        label: {
          color: DarkTheme2.fontColor
        }
      };
      DarkTheme2.seriesDarkThemeOverrides = {};
      return DarkTheme2;
    }(ChartTheme);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/util/module.js
function registerModule(module) {
  var otherModule = REGISTERED_MODULES.find(function(other) {
    return module.type === other.type && module.optionsKey === other.optionsKey;
  });
  if (otherModule) {
    if (module.packageType === "enterprise" && otherModule.packageType === "community") {
      var index = REGISTERED_MODULES.indexOf(otherModule);
      REGISTERED_MODULES.splice(index, 1, module);
    } else {
    }
  } else {
    REGISTERED_MODULES.push(module);
  }
}
var __values27, BaseModuleInstance, REGISTERED_MODULES;
var init_module = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/util/module.js"() {
    __values27 = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    BaseModuleInstance = /** @class */
    function() {
      function BaseModuleInstance2() {
        this.destroyFns = [];
      }
      BaseModuleInstance2.prototype.destroy = function() {
        var e_1, _a5;
        try {
          for (var _b2 = __values27(this.destroyFns), _c2 = _b2.next(); !_c2.done; _c2 = _b2.next()) {
            var destroyFn = _c2.value;
            destroyFn();
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c2 && !_c2.done && (_a5 = _b2.return))
              _a5.call(_b2);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
      };
      return BaseModuleInstance2;
    }();
    REGISTERED_MODULES = [];
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/shapes/rangeHandle.js
var __extends52, __decorate40, RangeHandle;
var init_rangeHandle = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/shapes/rangeHandle.js"() {
    init_path();
    init_bbox();
    init_validation();
    __extends52 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate40 = function(decorators, target2, key2, desc) {
      var c = arguments.length, r = c < 3 ? target2 : desc === null ? desc = Object.getOwnPropertyDescriptor(target2, key2) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target2, key2, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target2, key2, r) : d(target2, key2)) || r;
      return c > 3 && r && Object.defineProperty(target2, key2, r), r;
    };
    RangeHandle = /** @class */
    function(_super) {
      __extends52(RangeHandle2, _super);
      function RangeHandle2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._fill = "#f2f2f2";
        _this._stroke = "#999999";
        _this._strokeWidth = 1;
        _this._lineCap = "square";
        _this._centerX = 0;
        _this._centerY = 0;
        _this._width = 8;
        _this._gripLineGap = 2;
        _this._gripLineLength = 8;
        _this._height = 16;
        return _this;
      }
      Object.defineProperty(RangeHandle2.prototype, "centerX", {
        get: function() {
          return this._centerX;
        },
        set: function(value) {
          if (this._centerX !== value) {
            this._centerX = value;
            this.dirtyPath = true;
          }
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(RangeHandle2.prototype, "centerY", {
        get: function() {
          return this._centerY;
        },
        set: function(value) {
          if (this._centerY !== value) {
            this._centerY = value;
            this.dirtyPath = true;
          }
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(RangeHandle2.prototype, "width", {
        get: function() {
          return this._width;
        },
        set: function(value) {
          if (this._width !== value) {
            this._width = value;
            this.dirtyPath = true;
          }
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(RangeHandle2.prototype, "gripLineGap", {
        get: function() {
          return this._gripLineGap;
        },
        set: function(value) {
          if (this._gripLineGap !== value) {
            this._gripLineGap = value;
            this.dirtyPath = true;
          }
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(RangeHandle2.prototype, "gripLineLength", {
        get: function() {
          return this._gripLineLength;
        },
        set: function(value) {
          if (this._gripLineLength !== value) {
            this._gripLineLength = value;
            this.dirtyPath = true;
          }
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(RangeHandle2.prototype, "height", {
        get: function() {
          return this._height;
        },
        set: function(value) {
          if (this._height !== value) {
            this._height = value;
            this.dirtyPath = true;
          }
        },
        enumerable: false,
        configurable: true
      });
      RangeHandle2.prototype.computeBBox = function() {
        var _a5 = this, centerX = _a5.centerX, centerY = _a5.centerY, width = _a5.width, height = _a5.height;
        var x = centerX - width / 2;
        var y = centerY - height / 2;
        return new BBox(x, y, width, height);
      };
      RangeHandle2.prototype.isPointInPath = function(x, y) {
        var point = this.transformPoint(x, y);
        var bbox = this.computeBBox();
        return bbox.containsPoint(point.x, point.y);
      };
      RangeHandle2.prototype.updatePath = function() {
        var _a5 = this, path = _a5.path, centerX = _a5.centerX, centerY = _a5.centerY, width = _a5.width, height = _a5.height;
        path.clear();
        var x = centerX - width / 2;
        var y = centerY - height / 2;
        var ax = this.align(x);
        var ay = this.align(y);
        var axw = ax + this.align(x, width);
        var ayh = ay + this.align(y, height);
        path.moveTo(ax, ay);
        path.lineTo(axw, ay);
        path.lineTo(axw, ayh);
        path.lineTo(ax, ayh);
        path.lineTo(ax, ay);
        var dx = this.gripLineGap / 2;
        var dy = this.gripLineLength / 2;
        path.moveTo(this.align(centerX - dx), this.align(centerY - dy));
        path.lineTo(this.align(centerX - dx), this.align(centerY + dy));
        path.moveTo(this.align(centerX + dx), this.align(centerY - dy));
        path.lineTo(this.align(centerX + dx), this.align(centerY + dy));
      };
      RangeHandle2.className = "RangeHandle";
      __decorate40([
        Validate(COLOR_STRING)
      ], RangeHandle2.prototype, "_fill", void 0);
      __decorate40([
        Validate(COLOR_STRING)
      ], RangeHandle2.prototype, "_stroke", void 0);
      __decorate40([
        Validate(NUMBER(0))
      ], RangeHandle2.prototype, "_strokeWidth", void 0);
      __decorate40([
        Validate(LINE_CAP)
      ], RangeHandle2.prototype, "_lineCap", void 0);
      __decorate40([
        Validate(NUMBER(0))
      ], RangeHandle2.prototype, "_width", void 0);
      __decorate40([
        Validate(NUMBER(0))
      ], RangeHandle2.prototype, "_gripLineGap", void 0);
      __decorate40([
        Validate(NUMBER(0))
      ], RangeHandle2.prototype, "_gripLineLength", void 0);
      __decorate40([
        Validate(NUMBER(0))
      ], RangeHandle2.prototype, "_height", void 0);
      return RangeHandle2;
    }(Path);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/shapes/rangeMask.js
var __extends53, __decorate41, RangeMask;
var init_rangeMask = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/shapes/rangeMask.js"() {
    init_path();
    init_bbox();
    init_validation();
    __extends53 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate41 = function(decorators, target2, key2, desc) {
      var c = arguments.length, r = c < 3 ? target2 : desc === null ? desc = Object.getOwnPropertyDescriptor(target2, key2) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target2, key2, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target2, key2, r) : d(target2, key2)) || r;
      return c > 3 && r && Object.defineProperty(target2, key2, r), r;
    };
    RangeMask = /** @class */
    function(_super) {
      __extends53(RangeMask2, _super);
      function RangeMask2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._stroke = "#999999";
        _this._strokeWidth = 1;
        _this._fill = "#999999";
        _this._fillOpacity = 0.2;
        _this._lineCap = "square";
        _this._x = 0;
        _this._y = 0;
        _this._width = 200;
        _this._height = 30;
        _this.minRange = 0.05;
        _this._min = 0;
        _this._max = 1;
        return _this;
      }
      Object.defineProperty(RangeMask2.prototype, "x", {
        get: function() {
          return this._x;
        },
        set: function(value) {
          if (this._x !== value) {
            this._x = value;
            this.dirtyPath = true;
          }
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(RangeMask2.prototype, "y", {
        get: function() {
          return this._y;
        },
        set: function(value) {
          if (this._y !== value) {
            this._y = value;
            this.dirtyPath = true;
          }
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(RangeMask2.prototype, "width", {
        get: function() {
          return this._width;
        },
        set: function(value) {
          if (this._width !== value) {
            this._width = value;
            this.dirtyPath = true;
          }
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(RangeMask2.prototype, "height", {
        get: function() {
          return this._height;
        },
        set: function(value) {
          if (this._height !== value) {
            this._height = value;
            this.dirtyPath = true;
          }
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(RangeMask2.prototype, "min", {
        get: function() {
          return this._min;
        },
        set: function(value) {
          var _a5;
          value = Math.min(Math.max(value, 0), this.max - this.minRange);
          if (isNaN(value)) {
            return;
          }
          if (this._min !== value) {
            this._min = value;
            this.dirtyPath = true;
            (_a5 = this.onRangeChange) === null || _a5 === void 0 ? void 0 : _a5.call(this);
          }
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(RangeMask2.prototype, "max", {
        get: function() {
          return this._max;
        },
        set: function(value) {
          var _a5;
          value = Math.max(Math.min(value, 1), this.min + this.minRange);
          if (isNaN(value)) {
            return;
          }
          if (this._max !== value) {
            this._max = value;
            this.dirtyPath = true;
            (_a5 = this.onRangeChange) === null || _a5 === void 0 ? void 0 : _a5.call(this);
          }
        },
        enumerable: false,
        configurable: true
      });
      RangeMask2.prototype.computeBBox = function() {
        var _a5 = this, x = _a5.x, y = _a5.y, width = _a5.width, height = _a5.height;
        return new BBox(x, y, width, height);
      };
      RangeMask2.prototype.computeVisibleRangeBBox = function() {
        var _a5 = this, x = _a5.x, y = _a5.y, width = _a5.width, height = _a5.height, min = _a5.min, max = _a5.max;
        var minX = x + width * min;
        var maxX = x + width * max;
        return new BBox(minX, y, maxX - minX, height);
      };
      RangeMask2.prototype.updatePath = function() {
        var _a5 = this, path = _a5.path, x = _a5.x, y = _a5.y, width = _a5.width, height = _a5.height, min = _a5.min, max = _a5.max;
        path.clear();
        var ax = this.align(x);
        var ay = this.align(y);
        var axw = ax + this.align(x, width);
        var ayh = ay + this.align(y, height);
        path.moveTo(ax, ay);
        path.lineTo(axw, ay);
        path.lineTo(axw, ayh);
        path.lineTo(ax, ayh);
        path.lineTo(ax, ay);
        var minX = this.align(x + width * min);
        var maxX = this.align(x + width * max);
        path.moveTo(minX, ay);
        path.lineTo(minX, ayh);
        path.lineTo(maxX, ayh);
        path.lineTo(maxX, ay);
        path.lineTo(minX, ay);
      };
      RangeMask2.className = "RangeMask";
      __decorate41([
        Validate(COLOR_STRING)
      ], RangeMask2.prototype, "_stroke", void 0);
      __decorate41([
        Validate(NUMBER(0))
      ], RangeMask2.prototype, "_strokeWidth", void 0);
      __decorate41([
        Validate(COLOR_STRING)
      ], RangeMask2.prototype, "_fill", void 0);
      __decorate41([
        Validate(NUMBER(0, 1))
      ], RangeMask2.prototype, "_fillOpacity", void 0);
      __decorate41([
        Validate(LINE_CAP)
      ], RangeMask2.prototype, "_lineCap", void 0);
      __decorate41([
        Validate(NUMBER(0))
      ], RangeMask2.prototype, "_width", void 0);
      __decorate41([
        Validate(NUMBER(0))
      ], RangeMask2.prototype, "_height", void 0);
      __decorate41([
        Validate(NUMBER())
      ], RangeMask2.prototype, "_min", void 0);
      __decorate41([
        Validate(NUMBER())
      ], RangeMask2.prototype, "_max", void 0);
      return RangeMask2;
    }(Path);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/shapes/rangeSelector.js
var __extends54, __assign18, RangeSelector;
var init_rangeSelector = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/shapes/rangeSelector.js"() {
    init_group();
    init_rangeHandle();
    init_rangeMask();
    init_node();
    __extends54 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __assign18 = function() {
      __assign18 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign18.apply(this, arguments);
    };
    RangeSelector = /** @class */
    function(_super) {
      __extends54(RangeSelector2, _super);
      function RangeSelector2() {
        var _this = _super.call(this, { name: "rangeSelectorGroup" }) || this;
        _this.minHandle = new RangeHandle();
        _this.maxHandle = new RangeHandle();
        _this.mask = function() {
          var _a5 = RangeSelector2.defaults, x = _a5.x, y = _a5.y, width = _a5.width, height = _a5.height, min = _a5.min, max = _a5.max;
          var mask = new RangeMask();
          mask.x = x;
          mask.y = y;
          mask.width = width;
          mask.height = height;
          mask.min = min;
          mask.max = max;
          var _b2 = _this, minHandle = _b2.minHandle, maxHandle = _b2.maxHandle;
          minHandle.centerX = x;
          maxHandle.centerX = x + width;
          minHandle.centerY = maxHandle.centerY = y + height / 2;
          _this.append([mask, minHandle, maxHandle]);
          mask.onRangeChange = function() {
            var _a6;
            _this.updateHandles();
            (_a6 = _this.onRangeChange) === null || _a6 === void 0 ? void 0 : _a6.call(_this);
          };
          return mask;
        }();
        _this._x = RangeSelector2.defaults.x;
        _this._y = RangeSelector2.defaults.y;
        _this._width = RangeSelector2.defaults.width;
        _this._height = RangeSelector2.defaults.height;
        _this._min = RangeSelector2.defaults.min;
        _this._max = RangeSelector2.defaults.max;
        _this.isContainerNode = true;
        return _this;
      }
      Object.defineProperty(RangeSelector2.prototype, "x", {
        get: function() {
          return this.mask.x;
        },
        set: function(value) {
          this.mask.x = value;
          this.updateHandles();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(RangeSelector2.prototype, "y", {
        get: function() {
          return this.mask.y;
        },
        set: function(value) {
          this.mask.y = value;
          this.updateHandles();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(RangeSelector2.prototype, "width", {
        get: function() {
          return this.mask.width;
        },
        set: function(value) {
          this.mask.width = value;
          this.updateHandles();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(RangeSelector2.prototype, "height", {
        get: function() {
          return this.mask.height;
        },
        set: function(value) {
          this.mask.height = value;
          this.updateHandles();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(RangeSelector2.prototype, "min", {
        get: function() {
          return this.mask.min;
        },
        set: function(value) {
          this.mask.min = value;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(RangeSelector2.prototype, "max", {
        get: function() {
          return this.mask.max;
        },
        set: function(value) {
          this.mask.max = value;
        },
        enumerable: false,
        configurable: true
      });
      RangeSelector2.prototype.updateHandles = function() {
        var _a5 = this, minHandle = _a5.minHandle, maxHandle = _a5.maxHandle, x = _a5.x, y = _a5.y, width = _a5.width, height = _a5.height, mask = _a5.mask;
        minHandle.centerX = x + width * mask.min;
        maxHandle.centerX = x + width * mask.max;
        minHandle.centerY = maxHandle.centerY = y + height / 2;
      };
      RangeSelector2.prototype.computeBBox = function() {
        return this.mask.computeBBox();
      };
      RangeSelector2.prototype.computeVisibleRangeBBox = function() {
        return this.mask.computeVisibleRangeBBox();
      };
      RangeSelector2.prototype.render = function(renderCtx) {
        var ctx = renderCtx.ctx, forceRender = renderCtx.forceRender, stats = renderCtx.stats;
        if (this.dirty === RedrawType.NONE && !forceRender) {
          if (stats)
            stats.nodesSkipped++;
          return;
        }
        this.computeTransformMatrix();
        this.matrix.toContext(ctx);
        var _a5 = this, mask = _a5.mask, minHandle = _a5.minHandle, maxHandle = _a5.maxHandle;
        [mask, minHandle, maxHandle].forEach(function(child) {
          if (child.visible && (forceRender || child.dirty > RedrawType.NONE)) {
            ctx.save();
            child.render(__assign18(__assign18({}, renderCtx), { ctx, forceRender }));
            ctx.restore();
          }
        });
        this.markClean({ force: true });
        if (stats)
          stats.nodesRendered++;
      };
      RangeSelector2.className = "Range";
      RangeSelector2.defaults = {
        x: 0,
        y: 0,
        width: 200,
        height: 30,
        min: 0,
        max: 1
      };
      return RangeSelector2;
    }(Group);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/navigator/navigatorMask.js
var NavigatorMask;
var init_navigatorMask = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/navigator/navigatorMask.js"() {
    NavigatorMask = /** @class */
    function() {
      function NavigatorMask2(rangeMask) {
        this.rm = rangeMask;
      }
      Object.defineProperty(NavigatorMask2.prototype, "fill", {
        get: function() {
          return this.rm.fill;
        },
        set: function(value) {
          this.rm.fill = value;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(NavigatorMask2.prototype, "stroke", {
        get: function() {
          return this.rm.stroke;
        },
        set: function(value) {
          this.rm.stroke = value;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(NavigatorMask2.prototype, "strokeWidth", {
        get: function() {
          return this.rm.strokeWidth;
        },
        set: function(value) {
          this.rm.strokeWidth = value;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(NavigatorMask2.prototype, "fillOpacity", {
        get: function() {
          return this.rm.fillOpacity;
        },
        set: function(value) {
          this.rm.fillOpacity = value;
        },
        enumerable: false,
        configurable: true
      });
      return NavigatorMask2;
    }();
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/navigator/navigatorHandle.js
var NavigatorHandle;
var init_navigatorHandle = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/navigator/navigatorHandle.js"() {
    NavigatorHandle = /** @class */
    function() {
      function NavigatorHandle2(rangeHandle) {
        this.rh = rangeHandle;
      }
      Object.defineProperty(NavigatorHandle2.prototype, "fill", {
        get: function() {
          return this.rh.fill;
        },
        set: function(value) {
          this.rh.fill = value;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(NavigatorHandle2.prototype, "stroke", {
        get: function() {
          return this.rh.stroke;
        },
        set: function(value) {
          this.rh.stroke = value;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(NavigatorHandle2.prototype, "strokeWidth", {
        get: function() {
          return this.rh.strokeWidth;
        },
        set: function(value) {
          this.rh.strokeWidth = value;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(NavigatorHandle2.prototype, "width", {
        get: function() {
          return this.rh.width;
        },
        set: function(value) {
          this.rh.width = value;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(NavigatorHandle2.prototype, "height", {
        get: function() {
          return this.rh.height;
        },
        set: function(value) {
          this.rh.height = value;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(NavigatorHandle2.prototype, "gripLineGap", {
        get: function() {
          return this.rh.gripLineGap;
        },
        set: function(value) {
          this.rh.gripLineGap = value;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(NavigatorHandle2.prototype, "gripLineLength", {
        get: function() {
          return this.rh.gripLineLength;
        },
        set: function(value) {
          this.rh.gripLineLength = value;
        },
        enumerable: false,
        configurable: true
      });
      return NavigatorHandle2;
    }();
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/navigator/navigator.js
var __extends55, __decorate42, Navigator;
var init_navigator = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/navigator/navigator.js"() {
    init_rangeSelector();
    init_navigatorMask();
    init_navigatorHandle();
    init_module();
    init_validation();
    init_bbox();
    __extends55 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate42 = function(decorators, target2, key2, desc) {
      var c = arguments.length, r = c < 3 ? target2 : desc === null ? desc = Object.getOwnPropertyDescriptor(target2, key2) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target2, key2, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target2, key2, r) : d(target2, key2)) || r;
      return c > 3 && r && Object.defineProperty(target2, key2, r), r;
    };
    Navigator = /** @class */
    function(_super) {
      __extends55(Navigator2, _super);
      function Navigator2(ctx) {
        var _this = _super.call(this) || this;
        _this.ctx = ctx;
        _this.rs = new RangeSelector();
        _this.mask = new NavigatorMask(_this.rs.mask);
        _this.minHandle = new NavigatorHandle(_this.rs.minHandle);
        _this.maxHandle = new NavigatorHandle(_this.rs.maxHandle);
        _this.minHandleDragging = false;
        _this.maxHandleDragging = false;
        _this.panHandleOffset = NaN;
        _this._enabled = false;
        _this.margin = 10;
        _this._visible = true;
        _this.rs.onRangeChange = function() {
          return _this.ctx.zoomManager.updateZoom("navigator", { x: { min: _this.rs.min, max: _this.rs.max } });
        };
        [
          ctx.interactionManager.addListener("drag-start", function(event) {
            return _this.onDragStart(event);
          }),
          ctx.interactionManager.addListener("drag", function(event) {
            return _this.onDrag(event);
          }),
          ctx.interactionManager.addListener("hover", function(event) {
            return _this.onDrag(event);
          }),
          ctx.interactionManager.addListener("drag-end", function() {
            return _this.onDragStop();
          })
        ].forEach(function(s) {
          return _this.destroyFns.push(function() {
            return ctx.interactionManager.removeListener(s);
          });
        });
        [
          ctx.layoutService.addListener("before-series", function(event) {
            return _this.layout(event);
          }),
          ctx.layoutService.addListener("layout-complete", function(event) {
            return _this.layoutComplete(event);
          })
        ].forEach(function(s) {
          return _this.destroyFns.push(function() {
            return ctx.layoutService.removeListener(s);
          });
        });
        ctx.scene.root.appendChild(_this.rs);
        _this.destroyFns.push(function() {
          var _a5;
          return (_a5 = ctx.scene.root) === null || _a5 === void 0 ? void 0 : _a5.removeChild(_this.rs);
        });
        _this.updateGroupVisibility();
        return _this;
      }
      Object.defineProperty(Navigator2.prototype, "enabled", {
        get: function() {
          return this._enabled;
        },
        set: function(value) {
          this._enabled = value;
          this.updateGroupVisibility();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Navigator2.prototype, "width", {
        get: function() {
          return this.rs.width;
        },
        set: function(value) {
          this.rs.width = value;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Navigator2.prototype, "height", {
        get: function() {
          return this.rs.height;
        },
        set: function(value) {
          this.rs.height = value;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Navigator2.prototype, "min", {
        get: function() {
          return this.rs.min;
        },
        set: function(value) {
          this.rs.min = value;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Navigator2.prototype, "max", {
        get: function() {
          return this.rs.max;
        },
        set: function(value) {
          this.rs.max = value;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Navigator2.prototype, "visible", {
        get: function() {
          return this._visible;
        },
        set: function(value) {
          this._visible = value;
          this.updateGroupVisibility();
        },
        enumerable: false,
        configurable: true
      });
      Navigator2.prototype.updateGroupVisibility = function() {
        this.rs.visible = this.enabled && this.visible;
      };
      Navigator2.prototype.layout = function(_a5) {
        var shrinkRect = _a5.shrinkRect;
        if (this.enabled) {
          var navigatorTotalHeight = this.rs.height + this.margin;
          shrinkRect.shrink(navigatorTotalHeight, "bottom");
          this.rs.y = shrinkRect.y + shrinkRect.height + this.margin;
        }
        return { shrinkRect };
      };
      Navigator2.prototype.layoutComplete = function(_a5) {
        var _b2 = _a5.series, rect = _b2.rect, visible = _b2.visible;
        if (this.enabled && visible) {
          this.rs.x = rect.x;
          this.rs.width = rect.width;
        }
        this.visible = visible;
      };
      Navigator2.prototype.update = function() {
      };
      Navigator2.prototype.onDragStart = function(offset4) {
        if (!this.enabled) {
          return;
        }
        var offsetX = offset4.offsetX, offsetY = offset4.offsetY;
        var rs = this.rs;
        var minHandle = rs.minHandle, maxHandle = rs.maxHandle, x = rs.x, width = rs.width, min = rs.min;
        var visibleRange = rs.computeVisibleRangeBBox();
        if (!(this.minHandleDragging || this.maxHandleDragging)) {
          if (minHandle.containsPoint(offsetX, offsetY)) {
            this.minHandleDragging = true;
          } else if (maxHandle.containsPoint(offsetX, offsetY)) {
            this.maxHandleDragging = true;
          } else if (visibleRange.containsPoint(offsetX, offsetY)) {
            this.panHandleOffset = (offsetX - x) / width - min;
          }
        }
      };
      Navigator2.prototype.onDrag = function(offset4) {
        if (!this.enabled) {
          return;
        }
        var _a5 = this, rs = _a5.rs, panHandleOffset = _a5.panHandleOffset;
        var x = rs.x, y = rs.y, width = rs.width, height = rs.height, minHandle = rs.minHandle, maxHandle = rs.maxHandle;
        var offsetX = offset4.offsetX, offsetY = offset4.offsetY;
        var minX = x + width * rs.min;
        var maxX = x + width * rs.max;
        var visibleRange = new BBox(minX, y, maxX - minX, height);
        var getRatio = function() {
          return Math.min(Math.max((offsetX - x) / width, 0), 1);
        };
        if (minHandle.containsPoint(offsetX, offsetY) || maxHandle.containsPoint(offsetX, offsetY)) {
          this.ctx.cursorManager.updateCursor("navigator", "ew-resize");
        } else if (visibleRange.containsPoint(offsetX, offsetY)) {
          this.ctx.cursorManager.updateCursor("navigator", "grab");
        } else {
          this.ctx.cursorManager.updateCursor("navigator");
        }
        if (this.minHandleDragging) {
          rs.min = getRatio();
        } else if (this.maxHandleDragging) {
          rs.max = getRatio();
        } else if (!isNaN(panHandleOffset)) {
          var span = rs.max - rs.min;
          var min = Math.min(getRatio() - panHandleOffset, 1 - span);
          if (min <= rs.min) {
            rs.min = min;
            rs.max = rs.min + span;
          } else {
            rs.max = min + span;
            rs.min = rs.max - span;
          }
        }
      };
      Navigator2.prototype.onDragStop = function() {
        this.stopHandleDragging();
      };
      Navigator2.prototype.stopHandleDragging = function() {
        this.minHandleDragging = this.maxHandleDragging = false;
        this.panHandleOffset = NaN;
      };
      __decorate42([
        Validate(BOOLEAN)
      ], Navigator2.prototype, "_enabled", void 0);
      __decorate42([
        Validate(NUMBER(0))
      ], Navigator2.prototype, "margin", void 0);
      return Navigator2;
    }(BaseModuleInstance);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/util/navigator-module.js
var CHART_NAVIGATOR_MODULE;
var init_navigator_module = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/util/navigator-module.js"() {
    init_navigator();
    init_module();
    CHART_NAVIGATOR_MODULE = {
      type: "root",
      optionsKey: "navigator",
      packageType: "community",
      chartTypes: ["cartesian"],
      initialiseModule: function(ctx) {
        return {
          instance: new Navigator(ctx)
        };
      }
    };
    registerModule(CHART_NAVIGATOR_MODULE);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/background/background.js
var __extends56, __decorate43, Background;
var init_background = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/background/background.js"() {
    init_rect();
    init_group();
    init_module();
    init_proxy();
    init_validation();
    init_layers();
    __extends56 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate43 = function(decorators, target2, key2, desc) {
      var c = arguments.length, r = c < 3 ? target2 : desc === null ? desc = Object.getOwnPropertyDescriptor(target2, key2) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target2, key2, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target2, key2, r) : d(target2, key2)) || r;
      return c > 3 && r && Object.defineProperty(target2, key2, r), r;
    };
    Background = /** @class */
    function(_super) {
      __extends56(Background2, _super);
      function Background2(ctx) {
        var _a5;
        var _this = _super.call(this) || this;
        _this.onLayoutComplete = function(e) {
          var _a6 = e.chart, width = _a6.width, height = _a6.height;
          _this.rectNode.width = width;
          _this.rectNode.height = height;
        };
        _this.node = new Group({ name: "background" });
        _this.node.zIndex = Layers.SERIES_BACKGROUND_ZINDEX;
        _this.rectNode = new Rect();
        _this.node.appendChild(_this.rectNode);
        _this.fill = "white";
        _this.visible = true;
        (_a5 = ctx.scene.root) === null || _a5 === void 0 ? void 0 : _a5.appendChild(_this.node);
        _this.destroyFns.push(function() {
          var _a6;
          return (_a6 = ctx.scene.root) === null || _a6 === void 0 ? void 0 : _a6.removeChild(_this.node);
        });
        var layoutHandle = ctx.layoutService.addListener("layout-complete", _this.onLayoutComplete);
        _this.destroyFns.push(function() {
          return ctx.layoutService.removeListener(layoutHandle);
        });
        return _this;
      }
      Background2.prototype.update = function() {
      };
      __decorate43([
        Validate(BOOLEAN),
        ProxyPropertyOnWrite("node", "visible")
      ], Background2.prototype, "visible", void 0);
      __decorate43([
        Validate(OPT_COLOR_STRING),
        ProxyPropertyOnWrite("rectNode", "fill")
      ], Background2.prototype, "fill", void 0);
      return Background2;
    }(BaseModuleInstance);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/background/backgroundModule.js
var CHART_BACKGROUND_MODULE;
var init_backgroundModule = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/background/backgroundModule.js"() {
    init_background();
    init_module();
    CHART_BACKGROUND_MODULE = {
      type: "root",
      optionsKey: "background",
      packageType: "community",
      chartTypes: ["cartesian", "polar", "hierarchy"],
      initialiseModule: function(ctx) {
        return {
          instance: new Background(ctx)
        };
      }
    };
    registerModule(CHART_BACKGROUND_MODULE);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/module-support.js
var module_support_exports = {};
__export(module_support_exports, {
  AND: () => AND,
  ARRAY: () => ARRAY,
  ActionOnSet: () => ActionOnSet,
  BOOLEAN: () => BOOLEAN,
  BOOLEAN_ARRAY: () => BOOLEAN_ARRAY,
  BaseModuleInstance: () => BaseModuleInstance,
  CHART_BACKGROUND_MODULE: () => CHART_BACKGROUND_MODULE,
  CHART_NAVIGATOR_MODULE: () => CHART_NAVIGATOR_MODULE,
  COLOR_STRING: () => COLOR_STRING,
  COLOR_STRING_ARRAY: () => COLOR_STRING_ARRAY,
  CartesianSeries: () => CartesianSeries,
  CartesianSeriesMarker: () => CartesianSeriesMarker,
  CartesianSeriesNodeBaseClickEvent: () => CartesianSeriesNodeBaseClickEvent,
  CartesianSeriesNodeClickEvent: () => CartesianSeriesNodeClickEvent,
  CartesianSeriesNodeDoubleClickEvent: () => CartesianSeriesNodeDoubleClickEvent,
  ChartAxisDirection: () => ChartAxisDirection,
  ChartUpdateType: () => ChartUpdateType,
  CursorManager: () => CursorManager,
  DATE: () => DATE,
  DATETIME_MS: () => DATETIME_MS,
  DATE_ARRAY: () => DATE_ARRAY,
  DataModel: () => DataModel,
  FONT_STYLE: () => FONT_STYLE,
  FONT_WEIGHT: () => FONT_WEIGHT,
  FUNCTION: () => FUNCTION,
  GREATER_THAN: () => GREATER_THAN,
  HighlightManager: () => HighlightManager,
  HighlightStyle: () => HighlightStyle,
  INTERACTION_RANGE: () => INTERACTION_RANGE,
  InteractionManager: () => InteractionManager,
  LESS_THAN: () => LESS_THAN,
  LINE_CAP: () => LINE_CAP,
  LINE_DASH: () => LINE_DASH,
  LINE_JOIN: () => LINE_JOIN,
  Layers: () => Layers,
  LayoutService: () => LayoutService,
  NUMBER: () => NUMBER,
  NUMBER_ARRAY: () => NUMBER_ARRAY,
  NUMBER_OR_NAN: () => NUMBER_OR_NAN,
  OPTIONAL: () => OPTIONAL,
  OPT_ARRAY: () => OPT_ARRAY,
  OPT_BOOLEAN: () => OPT_BOOLEAN,
  OPT_BOOLEAN_ARRAY: () => OPT_BOOLEAN_ARRAY,
  OPT_COLOR_STRING: () => OPT_COLOR_STRING,
  OPT_COLOR_STRING_ARRAY: () => OPT_COLOR_STRING_ARRAY,
  OPT_DATE: () => OPT_DATE,
  OPT_DATETIME_MS: () => OPT_DATETIME_MS,
  OPT_DATE_OR_DATETIME_MS: () => OPT_DATE_OR_DATETIME_MS,
  OPT_FONT_STYLE: () => OPT_FONT_STYLE,
  OPT_FONT_WEIGHT: () => OPT_FONT_WEIGHT,
  OPT_FUNCTION: () => OPT_FUNCTION,
  OPT_LINE_CAP: () => OPT_LINE_CAP,
  OPT_LINE_DASH: () => OPT_LINE_DASH,
  OPT_LINE_JOIN: () => OPT_LINE_JOIN,
  OPT_NUMBER: () => OPT_NUMBER,
  OPT_NUMBER_ARRAY: () => OPT_NUMBER_ARRAY,
  OPT_STRING: () => OPT_STRING,
  OPT_STRING_ARRAY: () => OPT_STRING_ARRAY,
  OR: () => OR,
  POSITION: () => POSITION,
  ProxyOnWrite: () => ProxyOnWrite,
  ProxyPropertyOnWrite: () => ProxyPropertyOnWrite,
  REGISTERED_MODULES: () => REGISTERED_MODULES,
  SMALLEST_KEY_INTERVAL: () => SMALLEST_KEY_INTERVAL,
  STRING: () => STRING,
  STRING_ARRAY: () => STRING_ARRAY,
  STRING_UNION: () => STRING_UNION,
  SUM_VALUE_EXTENT: () => SUM_VALUE_EXTENT,
  Series: () => Series,
  SeriesNodeBaseClickEvent: () => SeriesNodeBaseClickEvent,
  SeriesNodeClickEvent: () => SeriesNodeClickEvent,
  SeriesNodeDoubleClickEvent: () => SeriesNodeDoubleClickEvent,
  SeriesNodePickMode: () => SeriesNodePickMode,
  SeriesTooltip: () => SeriesTooltip,
  SeriesTooltipInteraction: () => SeriesTooltipInteraction,
  TooltipManager: () => TooltipManager,
  UpdateService: () => UpdateService,
  Validate: () => Validate,
  ZoomManager: () => ZoomManager,
  keyProperty: () => keyProperty,
  predicateWithMessage: () => predicateWithMessage,
  registerModule: () => registerModule,
  sumProperties: () => sumProperties,
  valueProperty: () => valueProperty
});
var init_module_support = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/module-support.js"() {
    init_validation();
    init_module();
    init_navigator_module();
    init_proxy();
    init_backgroundModule();
    init_chartAxisDirection();
    init_dataModel();
    init_updateService();
    init_layoutService();
    init_cursorManager();
    init_highlightManager();
    init_interactionManager();
    init_tooltipManager();
    init_zoomManager();
    init_layers();
    init_series();
    init_cartesianSeries();
    init_chartUpdateType();
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/series/seriesTypes.js
function initialiseSeriesModules() {
  REGISTERED_MODULES.filter(function(m) {
    return m.type === "series";
  }).filter(function(m) {
    return !initialisedSeriesModules.has(m);
  }).forEach(function(m) {
    return initialiseSeriesModule(m);
  });
}
function initialiseSeriesModule(mod2) {
  var seriesType = mod2.optionsKey;
  var instance = mod2.initialiseModule({
    seriesFactory: {
      add: function(factory) {
        extraSeriesFactories[seriesType] = factory;
      },
      delete: function() {
        delete extraSeriesFactories[seriesType];
      }
    },
    defaults: {
      add: function(defaultOptions) {
        seriesDefaults[seriesType] = defaultOptions;
      },
      delete: function() {
        delete seriesDefaults[seriesType];
      }
    },
    themes: {
      chartTheme: {
        add: function(fn) {
          ChartTheme.seriesThemeOverrides[seriesType] = fn;
        },
        delete: function() {
          delete ChartTheme.seriesThemeOverrides[seriesType];
        }
      },
      darkTheme: {
        add: function(fn) {
          DarkTheme.seriesDarkThemeOverrides[seriesType] = fn;
        },
        delete: function() {
          delete DarkTheme.seriesDarkThemeOverrides[seriesType];
        }
      }
    }
  });
  initialisedSeriesModules.set(mod2, instance);
  var chartType2 = mod2.chartTypes[0];
  CHART_TYPES.add(seriesType, chartType2);
}
function getSeries(chartType2) {
  if (Object.prototype.hasOwnProperty.call(extraSeriesFactories, chartType2)) {
    var factory = extraSeriesFactories[chartType2];
    return factory();
  }
  if (Object.prototype.hasOwnProperty.call(builtinSeriesTypes, chartType2)) {
    var SeriesConstructor = builtinSeriesTypes[chartType2];
    return new SeriesConstructor();
  }
  throw new Error("AG Charts - unknown series type: " + chartType2);
}
var builtinSeriesTypes, extraSeriesFactories, initialisedSeriesModules, seriesDefaults;
var init_seriesTypes = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/series/seriesTypes.js"() {
    init_areaSeries();
    init_barSeries();
    init_histogramSeries();
    init_lineSeries();
    init_scatterSeries();
    init_pieSeries();
    init_treemapSeries();
    init_chartTypes();
    init_chartTheme();
    init_darkTheme();
    init_module_support();
    builtinSeriesTypes = {
      area: AreaSeries,
      bar: BarSeries,
      column: BarSeries,
      histogram: HistogramSeries,
      line: LineSeries,
      pie: PieSeries,
      scatter: ScatterSeries,
      treemap: TreemapSeries
    };
    extraSeriesFactories = {};
    initialisedSeriesModules = /* @__PURE__ */ new Map();
    seriesDefaults = {};
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/mapping/defaults.js
var DEFAULT_CARTESIAN_CHART_OVERRIDES, DEFAULT_BAR_CHART_OVERRIDES, DEFAULT_SCATTER_HISTOGRAM_CHART_OVERRIDES;
var init_defaults = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/mapping/defaults.js"() {
    init_numberAxis();
    init_categoryAxis();
    DEFAULT_CARTESIAN_CHART_OVERRIDES = {
      axes: [
        {
          type: NumberAxis.type,
          position: "left"
        },
        {
          type: CategoryAxis.type,
          position: "bottom"
        }
      ]
    };
    DEFAULT_BAR_CHART_OVERRIDES = {
      axes: [
        {
          type: "number",
          position: "bottom"
        },
        {
          type: "category",
          position: "left"
        }
      ]
    };
    DEFAULT_SCATTER_HISTOGRAM_CHART_OVERRIDES = {
      axes: [
        {
          type: "number",
          position: "bottom"
        },
        {
          type: "number",
          position: "left"
        }
      ]
    };
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/mapping/transforms.js
function transform(input, transforms) {
  var result = {};
  for (var p in input) {
    var t = transforms[p] || function(x) {
      return x;
    };
    result[p] = t(input[p], input);
  }
  return result;
}
function is2dArray2(input) {
  return input != null && input instanceof Array && input[0] instanceof Array;
}
function yNamesMapping(p, src) {
  if (p == null) {
    return {};
  }
  if (!(p instanceof Array)) {
    return p;
  }
  var yKeys = src.yKeys;
  if (yKeys == null || is2dArray2(yKeys)) {
    throw new Error("AG Charts - yNames and yKeys mismatching configuration.");
  }
  var result = {};
  yKeys.forEach(function(k, i) {
    result[k] = p[i];
  });
  return result;
}
function yKeysMapping(p, src) {
  if (p == null) {
    return [[]];
  }
  if (is2dArray2(p)) {
    return p;
  }
  return src.grouped ? p.map(function(v) {
    return [v];
  }) : [p];
}
function barSeriesTransform(options) {
  var result = __assign19({}, options);
  delete result["yKey"];
  delete result["yName"];
  return transform(result, {
    yNames: yNamesMapping,
    yKeys: yKeysMapping
  });
}
function identityTransform(input) {
  return input;
}
function applySeriesTransform(options) {
  var type2 = options.type || "line";
  var transform2 = SERIES_TRANSFORMS[type2];
  return (transform2 !== null && transform2 !== void 0 ? transform2 : identityTransform)(options);
}
var __assign19, SERIES_TRANSFORMS;
var init_transforms = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/mapping/transforms.js"() {
    __assign19 = function() {
      __assign19 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign19.apply(this, arguments);
    };
    SERIES_TRANSFORMS = {
      area: identityTransform,
      bar: barSeriesTransform,
      column: barSeriesTransform,
      histogram: identityTransform,
      line: identityTransform,
      pie: identityTransform,
      scatter: identityTransform,
      treemap: identityTransform
    };
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/themes/materialLight.js
var __extends57, palette2, MaterialLight;
var init_materialLight = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/themes/materialLight.js"() {
    init_chartTheme();
    __extends57 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    palette2 = {
      fills: [
        "#f44336",
        "#e91e63",
        "#9c27b0",
        "#673ab7",
        "#3f51b5",
        "#2196f3",
        "#03a9f4",
        "#00bcd4",
        "#009688",
        "#4caf50",
        "#8bc34a",
        "#cddc39",
        "#ffeb3b",
        "#ffc107",
        "#ff9800",
        "#ff5722"
      ],
      strokes: [
        "#ab2f26",
        "#a31545",
        "#6d1b7b",
        "#482980",
        "#2c397f",
        "#1769aa",
        "#0276ab",
        "#008494",
        "#00695f",
        "#357a38",
        "#618834",
        "#909a28",
        "#b3a429",
        "#b38705",
        "#b36a00",
        "#b33d18"
      ]
    };
    MaterialLight = /** @class */
    function(_super) {
      __extends57(MaterialLight2, _super);
      function MaterialLight2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      MaterialLight2.prototype.getPalette = function() {
        return palette2;
      };
      return MaterialLight2;
    }(ChartTheme);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/themes/materialDark.js
var __extends58, palette3, MaterialDark;
var init_materialDark = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/themes/materialDark.js"() {
    init_darkTheme();
    __extends58 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    palette3 = {
      fills: [
        "#f44336",
        "#e91e63",
        "#9c27b0",
        "#673ab7",
        "#3f51b5",
        "#2196f3",
        "#03a9f4",
        "#00bcd4",
        "#009688",
        "#4caf50",
        "#8bc34a",
        "#cddc39",
        "#ffeb3b",
        "#ffc107",
        "#ff9800",
        "#ff5722"
      ],
      strokes: [
        "#ab2f26",
        "#a31545",
        "#6d1b7b",
        "#482980",
        "#2c397f",
        "#1769aa",
        "#0276ab",
        "#008494",
        "#00695f",
        "#357a38",
        "#618834",
        "#909a28",
        "#b3a429",
        "#b38705",
        "#b36a00",
        "#b33d18"
      ]
    };
    MaterialDark = /** @class */
    function(_super) {
      __extends58(MaterialDark2, _super);
      function MaterialDark2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      MaterialDark2.prototype.getPalette = function() {
        return palette3;
      };
      return MaterialDark2;
    }(DarkTheme);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/themes/pastelLight.js
var __extends59, palette4, PastelLight;
var init_pastelLight = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/themes/pastelLight.js"() {
    init_chartTheme();
    __extends59 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    palette4 = {
      fills: ["#c16068", "#a2bf8a", "#ebcc87", "#80a0c3", "#b58dae", "#85c0d1"],
      strokes: ["#874349", "#718661", "#a48f5f", "#5a7088", "#7f637a", "#5d8692"]
    };
    PastelLight = /** @class */
    function(_super) {
      __extends59(PastelLight2, _super);
      function PastelLight2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      PastelLight2.prototype.getPalette = function() {
        return palette4;
      };
      return PastelLight2;
    }(ChartTheme);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/themes/pastelDark.js
var __extends60, palette5, PastelDark;
var init_pastelDark = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/themes/pastelDark.js"() {
    init_darkTheme();
    __extends60 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    palette5 = {
      fills: ["#c16068", "#a2bf8a", "#ebcc87", "#80a0c3", "#b58dae", "#85c0d1"],
      strokes: ["#874349", "#718661", "#a48f5f", "#5a7088", "#7f637a", "#5d8692"]
    };
    PastelDark = /** @class */
    function(_super) {
      __extends60(PastelDark2, _super);
      function PastelDark2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      PastelDark2.prototype.getPalette = function() {
        return palette5;
      };
      return PastelDark2;
    }(DarkTheme);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/themes/solarLight.js
var __extends61, palette6, SolarLight;
var init_solarLight = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/themes/solarLight.js"() {
    init_chartTheme();
    __extends61 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    palette6 = {
      fills: [
        "#febe76",
        "#ff7979",
        "#badc58",
        "#f9ca23",
        "#f0932b",
        "#eb4c4b",
        "#6ab04c",
        "#7ed6df",
        "#e056fd",
        "#686de0"
      ],
      strokes: [
        "#b28553",
        "#b35555",
        "#829a3e",
        "#ae8d19",
        "#a8671e",
        "#a43535",
        "#4a7b35",
        "#58969c",
        "#9d3cb1",
        "#494c9d"
      ]
    };
    SolarLight = /** @class */
    function(_super) {
      __extends61(SolarLight2, _super);
      function SolarLight2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      SolarLight2.prototype.getPalette = function() {
        return palette6;
      };
      return SolarLight2;
    }(ChartTheme);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/themes/solarDark.js
var __extends62, palette7, SolarDark;
var init_solarDark = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/themes/solarDark.js"() {
    init_darkTheme();
    __extends62 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    palette7 = {
      fills: [
        "#febe76",
        "#ff7979",
        "#badc58",
        "#f9ca23",
        "#f0932b",
        "#eb4c4b",
        "#6ab04c",
        "#7ed6df",
        "#e056fd",
        "#686de0"
      ],
      strokes: [
        "#b28553",
        "#b35555",
        "#829a3e",
        "#ae8d19",
        "#a8671e",
        "#a43535",
        "#4a7b35",
        "#58969c",
        "#9d3cb1",
        "#494c9d"
      ]
    };
    SolarDark = /** @class */
    function(_super) {
      __extends62(SolarDark2, _super);
      function SolarDark2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      SolarDark2.prototype.getPalette = function() {
        return palette7;
      };
      return SolarDark2;
    }(DarkTheme);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/themes/vividLight.js
var __extends63, palette8, VividLight;
var init_vividLight = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/themes/vividLight.js"() {
    init_chartTheme();
    __extends63 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    palette8 = {
      fills: ["#5BC0EB", "#FDE74C", "#9BC53D", "#E55934", "#FA7921", "#fa3081"],
      strokes: ["#4086a4", "#b1a235", "#6c8a2b", "#a03e24", "#af5517", "#af225a"]
    };
    VividLight = /** @class */
    function(_super) {
      __extends63(VividLight2, _super);
      function VividLight2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      VividLight2.prototype.getPalette = function() {
        return palette8;
      };
      return VividLight2;
    }(ChartTheme);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/themes/vividDark.js
var __extends64, palette9, VividDark;
var init_vividDark = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/themes/vividDark.js"() {
    init_darkTheme();
    __extends64 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    palette9 = {
      fills: ["#5BC0EB", "#FDE74C", "#9BC53D", "#E55934", "#FA7921", "#fa3081"],
      strokes: ["#4086a4", "#b1a235", "#6c8a2b", "#a03e24", "#af5517", "#af225a"]
    };
    VividDark = /** @class */
    function(_super) {
      __extends64(VividDark2, _super);
      function VividDark2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      VividDark2.prototype.getPalette = function() {
        return palette9;
      };
      return VividDark2;
    }(DarkTheme);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/mapping/themes.js
function getChartTheme(value) {
  var _a5;
  if (value instanceof ChartTheme) {
    return value;
  }
  var stockTheme = themes[value];
  if (stockTheme) {
    return stockTheme();
  }
  value = value;
  var overrides = [];
  var palette10;
  while (typeof value === "object") {
    overrides.push((_a5 = value.overrides) !== null && _a5 !== void 0 ? _a5 : {});
    if (value.palette && palette10 == null) {
      palette10 = value.palette;
    }
    value = value.baseTheme;
  }
  overrides.reverse();
  var flattenedTheme = __assign20({ baseTheme: value, overrides: jsonMerge(overrides) }, palette10 ? { palette: palette10 } : {});
  if (flattenedTheme.baseTheme || flattenedTheme.overrides) {
    var baseTheme = getChartTheme(flattenedTheme.baseTheme);
    return new baseTheme.constructor(flattenedTheme);
  }
  return lightTheme();
}
var __assign20, lightTheme, darkTheme, lightThemes, darkThemes, themes;
var init_themes = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/mapping/themes.js"() {
    init_chartTheme();
    init_darkTheme();
    init_materialLight();
    init_materialDark();
    init_pastelLight();
    init_pastelDark();
    init_solarLight();
    init_solarDark();
    init_vividLight();
    init_vividDark();
    init_json();
    __assign20 = function() {
      __assign20 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign20.apply(this, arguments);
    };
    lightTheme = function() {
      return new ChartTheme();
    };
    darkTheme = function() {
      return new DarkTheme();
    };
    lightThemes = {
      undefined: lightTheme,
      null: lightTheme,
      "ag-default": lightTheme,
      "ag-material": function() {
        return new MaterialLight();
      },
      "ag-pastel": function() {
        return new PastelLight();
      },
      "ag-solar": function() {
        return new SolarLight();
      },
      "ag-vivid": function() {
        return new VividLight();
      }
    };
    darkThemes = {
      undefined: darkTheme,
      null: darkTheme,
      "ag-default-dark": darkTheme,
      "ag-material-dark": function() {
        return new MaterialDark();
      },
      "ag-pastel-dark": function() {
        return new PastelDark();
      },
      "ag-solar-dark": function() {
        return new SolarDark();
      },
      "ag-vivid-dark": function() {
        return new VividDark();
      }
    };
    themes = __assign20(__assign20({}, darkThemes), lightThemes);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/mapping/prepareSeries.js
function groupSeriesByType(seriesOptions) {
  var e_1, _a5;
  var indexMap = {};
  var result = [];
  try {
    for (var seriesOptions_1 = __values28(seriesOptions), seriesOptions_1_1 = seriesOptions_1.next(); !seriesOptions_1_1.done; seriesOptions_1_1 = seriesOptions_1.next()) {
      var s = seriesOptions_1_1.value;
      if (s.type !== "column" && s.type !== "bar" && (s.type !== "area" || s.stacked !== true)) {
        result.push([s]);
        continue;
      }
      var seriesType = s.type || "line";
      var groupingKey = s.stacked ? "stacked" : "grouped";
      var indexKey = seriesType + "-" + s.xKey + "-" + groupingKey;
      if (indexMap[indexKey] == null) {
        indexMap[indexKey] = [];
        result.push(indexMap[indexKey]);
      }
      indexMap[indexKey].push(s);
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (seriesOptions_1_1 && !seriesOptions_1_1.done && (_a5 = seriesOptions_1.return))
        _a5.call(seriesOptions_1);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return result;
}
function reduceSeries(series) {
  var options = {};
  series.forEach(function(s, idx) {
    Object.keys(s).forEach(function(prop) {
      var _a5;
      var reducerConfig = REDUCE_CONFIG[prop];
      var defaultReduce = function() {
        var _a6, _b3;
        options[prop] = (_b3 = (_a6 = s[prop]) !== null && _a6 !== void 0 ? _a6 : options[prop]) !== null && _b3 !== void 0 ? _b3 : void 0;
      };
      if (!reducerConfig) {
        defaultReduce();
        return;
      }
      var outputProp = reducerConfig.outputProp, reducer = reducerConfig.reducer, _b2 = reducerConfig.start, start = _b2 === void 0 ? void 0 : _b2, _c2 = reducerConfig.seriesType, seriesType = _c2 === void 0 ? [s.type] : _c2;
      if (!seriesType.includes(s.type)) {
        defaultReduce();
        return;
      }
      var result = reducer((_a5 = options[outputProp]) !== null && _a5 !== void 0 ? _a5 : start, s, idx, series.length);
      if (result !== void 0) {
        options[outputProp] = result;
      }
    });
  });
  return options;
}
function processSeriesOptions(seriesOptions) {
  var e_2, _a5;
  var result = [];
  var preprocessed = seriesOptions.map(function(series2) {
    if ((series2.type === "bar" || series2.type === "column") && series2.yKey != null && !series2.stacked) {
      return __assign21(__assign21({}, series2), { grouped: series2.grouped != null ? series2.grouped : true });
    }
    return series2;
  });
  try {
    for (var _b2 = __values28(groupSeriesByType(preprocessed)), _c2 = _b2.next(); !_c2.done; _c2 = _b2.next()) {
      var series = _c2.value;
      switch (series[0].type) {
        case "column":
        case "bar":
        case "area":
          result.push(reduceSeries(series));
          break;
        case "line":
        default:
          if (series.length > 1) {
            Logger.warn("unexpected grouping of series type: " + series[0].type);
          }
          result.push(series[0]);
          break;
      }
    }
  } catch (e_2_1) {
    e_2 = { error: e_2_1 };
  } finally {
    try {
      if (_c2 && !_c2.done && (_a5 = _b2.return))
        _a5.call(_b2);
    } finally {
      if (e_2)
        throw e_2.error;
    }
  }
  return result;
}
var __assign21, __values28, __read39, __spread24, FAIL, SKIP, ARRAY_REDUCER, BOOLEAN_OR_REDUCER, DEFAULTING_ARRAY_REDUCER, YKEYS_REDUCER, STACK_GROUPS_REDUCER, REDUCE_CONFIG;
var init_prepareSeries = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/mapping/prepareSeries.js"() {
    init_logger();
    __assign21 = function() {
      __assign21 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign21.apply(this, arguments);
    };
    __values28 = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read39 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread24 = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read39(arguments[i]));
      return ar;
    };
    FAIL = Symbol();
    SKIP = Symbol();
    ARRAY_REDUCER = function(prop) {
      return function(result, next) {
        var _a5;
        return result.concat.apply(result, __spread24((_a5 = next[prop]) !== null && _a5 !== void 0 ? _a5 : []));
      };
    };
    BOOLEAN_OR_REDUCER = function(prop, defaultValue) {
      return function(result, next) {
        if (typeof next[prop] === "boolean") {
          return (result !== null && result !== void 0 ? result : false) || next[prop];
        }
        return result !== null && result !== void 0 ? result : defaultValue;
      };
    };
    DEFAULTING_ARRAY_REDUCER = function(prop, defaultValue) {
      return function(result, next, idx, length) {
        var _a5;
        var sparse = defaultValue === SKIP || defaultValue === FAIL;
        var nextValue = (_a5 = next[prop]) !== null && _a5 !== void 0 ? _a5 : defaultValue;
        if (nextValue === FAIL) {
          throw new Error("AG Charts - missing value for property [" + prop + "] on series config.");
        } else if (nextValue === SKIP) {
          return result;
        }
        if (result.length === 0 && !sparse) {
          while (result.length < length) {
            result = result.concat(defaultValue);
          }
        }
        if (!sparse) {
          result[idx] = nextValue;
          return result;
        }
        return result.concat(nextValue);
      };
    };
    YKEYS_REDUCER = function(prop, activationValue) {
      return function(result, next) {
        if (next[prop] === activationValue) {
          return result.concat.apply(result, __spread24(next.yKey ? [next.yKey] : next.yKeys));
        }
        return result;
      };
    };
    STACK_GROUPS_REDUCER = function() {
      return function(result, next) {
        var _a5;
        return __assign21(__assign21({}, result), (_a5 = {}, _a5[next.stackGroup] = __spread24(result[next.stackGroup] || [], [next.yKey]), _a5));
      };
    };
    REDUCE_CONFIG = {
      hideInChart: { outputProp: "hideInChart", reducer: ARRAY_REDUCER("hideInChart"), start: [] },
      hideInLegend: { outputProp: "hideInLegend", reducer: ARRAY_REDUCER("hideInLegend"), start: [] },
      yKey: { outputProp: "yKeys", reducer: DEFAULTING_ARRAY_REDUCER("yKey", SKIP), start: [] },
      fill: { outputProp: "fills", reducer: DEFAULTING_ARRAY_REDUCER("fill", SKIP), start: [] },
      stroke: { outputProp: "strokes", reducer: DEFAULTING_ARRAY_REDUCER("stroke", SKIP), start: [] },
      yName: { outputProp: "yNames", reducer: DEFAULTING_ARRAY_REDUCER("yName", SKIP), start: [] },
      visible: { outputProp: "visibles", reducer: DEFAULTING_ARRAY_REDUCER("visible", true), start: [] },
      grouped: {
        outputProp: "grouped",
        reducer: BOOLEAN_OR_REDUCER("grouped"),
        seriesType: ["bar", "column"],
        start: void 0
      },
      showInLegend: {
        outputProp: "hideInLegend",
        reducer: YKEYS_REDUCER("showInLegend", false),
        seriesType: ["bar", "column"],
        start: []
      },
      stackGroup: {
        outputProp: "stackGroups",
        reducer: STACK_GROUPS_REDUCER(),
        seriesType: ["bar", "column"],
        start: {}
      }
    };
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/chartAxesTypes.js
var types2, CHART_AXES_TYPES;
var init_chartAxesTypes = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/chartAxesTypes.js"() {
    types2 = {
      number: "number",
      time: "time",
      log: "log",
      category: "category",
      groupedCategory: "groupedCategory"
    };
    CHART_AXES_TYPES = {
      has: function(axisType) {
        return Object.prototype.hasOwnProperty.call(types2, axisType);
      },
      get axesTypes() {
        return Object.keys(types2);
      }
    };
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/mapping/prepare.js
function optionsType(input) {
  var _a5, _b2, _c2, _d2;
  return (_d2 = (_a5 = input.type) !== null && _a5 !== void 0 ? _a5 : (_c2 = (_b2 = input.series) === null || _b2 === void 0 ? void 0 : _b2[0]) === null || _c2 === void 0 ? void 0 : _c2.type) !== null && _d2 !== void 0 ? _d2 : "line";
}
function isAgCartesianChartOptions(input) {
  var specifiedType = optionsType(input);
  if (specifiedType == null) {
    return true;
  }
  if (specifiedType === "cartesian") {
    Logger.warnOnce("type '" + specifiedType + "' is deprecated, use a series type instead");
    return true;
  }
  return CHART_TYPES.isCartesian(specifiedType);
}
function isAgHierarchyChartOptions(input) {
  var specifiedType = optionsType(input);
  if (specifiedType == null) {
    return false;
  }
  if (specifiedType === "hierarchy") {
    Logger.warnOnce("type '" + specifiedType + "' is deprecated, use a series type instead");
    return true;
  }
  return CHART_TYPES.isHierarchy(specifiedType);
}
function isAgPolarChartOptions(input) {
  var specifiedType = optionsType(input);
  if (specifiedType == null) {
    return false;
  }
  if (specifiedType === "polar") {
    Logger.warnOnce("type '" + specifiedType + "' is deprecated, use a series type instead");
    return true;
  }
  return CHART_TYPES.isPolar(specifiedType);
}
function isSeriesOptionType(input) {
  if (input == null) {
    return false;
  }
  return CHART_TYPES.has(input);
}
function isAxisOptionType(input) {
  if (input == null) {
    return false;
  }
  return CHART_AXES_TYPES.has(input);
}
function countArrayElements(input) {
  var e_1, _a5;
  var count = 0;
  try {
    for (var input_1 = __values29(input), input_1_1 = input_1.next(); !input_1_1.done; input_1_1 = input_1.next()) {
      var next = input_1_1.value;
      if (next instanceof Array) {
        count += countArrayElements(next);
      }
      if (next != null) {
        count++;
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (input_1_1 && !input_1_1.done && (_a5 = input_1.return))
        _a5.call(input_1);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return count;
}
function takeColours(context, colours, maxCount) {
  var result = [];
  for (var count = 0; count < maxCount; count++) {
    result.push(colours[(count + context.colourIndex) % colours.length]);
  }
  return result;
}
function prepareOptions(newOptions, fallbackOptions, seriesDefaults2) {
  var e_2, _a5, e_3, _b2;
  var _c2, _d2, _e, _f;
  var options = jsonMerge([fallbackOptions, newOptions], noDataCloneMergeOptions);
  sanityCheckOptions(options);
  var userSuppliedOptionsType = options.type;
  var type2 = optionsType(options);
  var globalTooltipPositionOptions = ((_c2 = options.tooltip) === null || _c2 === void 0 ? void 0 : _c2.position) || {};
  var checkSeriesType = function(type3) {
    if (type3 != null && !(isSeriesOptionType(type3) || (seriesDefaults2 === null || seriesDefaults2 === void 0 ? void 0 : seriesDefaults2[type3]))) {
      throw new Error("AG Charts - unknown series type: " + type3 + "; expected one of: " + CHART_TYPES.seriesTypes);
    }
  };
  checkSeriesType(type2);
  try {
    for (var _g = __values29((_d2 = options.series) !== null && _d2 !== void 0 ? _d2 : []), _h = _g.next(); !_h.done; _h = _g.next()) {
      var seriesType = _h.value.type;
      if (seriesType == null)
        continue;
      checkSeriesType(seriesType);
    }
  } catch (e_2_1) {
    e_2 = { error: e_2_1 };
  } finally {
    try {
      if (_h && !_h.done && (_a5 = _g.return))
        _a5.call(_g);
    } finally {
      if (e_2)
        throw e_2.error;
    }
  }
  options = __assign22(__assign22({}, options), { type: type2 });
  var defaultSeriesType = "line";
  if (isAgCartesianChartOptions(options)) {
    defaultSeriesType = "line";
  } else if (isAgHierarchyChartOptions(options)) {
    defaultSeriesType = "treemap";
  } else if (isAgPolarChartOptions(options)) {
    defaultSeriesType = "pie";
  }
  var defaultOverrides = {};
  if (seriesDefaults2 && Object.prototype.hasOwnProperty.call(seriesDefaults2, type2)) {
    defaultOverrides = seriesDefaults2[type2];
  } else if (type2 === "bar") {
    defaultOverrides = DEFAULT_BAR_CHART_OVERRIDES;
  } else if (type2 === "scatter" || type2 === "histogram") {
    defaultOverrides = DEFAULT_SCATTER_HISTOGRAM_CHART_OVERRIDES;
  } else if (isAgCartesianChartOptions(options)) {
    defaultOverrides = DEFAULT_CARTESIAN_CHART_OVERRIDES;
  }
  var _j = prepareMainOptions(defaultOverrides, options), context = _j.context, mergedOptions = _j.mergedOptions, axesThemes = _j.axesThemes, seriesThemes = _j.seriesThemes;
  mergedOptions.series = processSeriesOptions((mergedOptions.series || []).map(function(s) {
    var type3 = defaultSeriesType;
    if (s.type) {
      type3 = s.type;
    } else if (isSeriesOptionType(userSuppliedOptionsType)) {
      type3 = userSuppliedOptionsType;
    }
    var mergedSeries = mergeSeriesOptions(s, type3, seriesThemes, globalTooltipPositionOptions);
    if (type3 === "pie") {
      preparePieOptions(seriesThemes.pie, s, mergedSeries);
    }
    return mergedSeries;
  })).map(function(s) {
    return prepareSeries(context, s);
  });
  var checkAxisType = function(type3) {
    var isAxisType = isAxisOptionType(type3);
    if (!isAxisType) {
      Logger.warnOnce("AG Charts - unknown axis type: " + type3 + "; expected one of: " + CHART_AXES_TYPES.axesTypes + ", ignoring.");
    }
    return isAxisType;
  };
  if (isAgCartesianChartOptions(mergedOptions)) {
    var validAxesTypes = true;
    try {
      for (var _k = __values29((_e = mergedOptions.axes) !== null && _e !== void 0 ? _e : []), _l = _k.next(); !_l.done; _l = _k.next()) {
        var axisType = _l.value.type;
        if (!checkAxisType(axisType)) {
          validAxesTypes = false;
        }
      }
    } catch (e_3_1) {
      e_3 = { error: e_3_1 };
    } finally {
      try {
        if (_l && !_l.done && (_b2 = _k.return))
          _b2.call(_k);
      } finally {
        if (e_3)
          throw e_3.error;
      }
    }
    if (!validAxesTypes) {
      mergedOptions.axes = defaultOverrides.axes;
    } else {
      mergedOptions.axes = (_f = mergedOptions.axes) === null || _f === void 0 ? void 0 : _f.map(function(axis) {
        var axisType2 = axis.type;
        var axesTheme = jsonMerge([
          axesThemes[axisType2],
          axesThemes[axisType2][axis.position || "unknown"] || {}
        ]);
        return prepareAxis(axis, axesTheme);
      });
    }
  }
  prepareEnabledOptions(options, mergedOptions);
  return mergedOptions;
}
function sanityCheckOptions(options) {
  var deprecatedArrayProps = {
    yKeys: "yKey",
    yNames: "yName"
  };
  Object.entries(deprecatedArrayProps).forEach(function(_a5) {
    var _b2;
    var _c2 = __read40(_a5, 2), oldProp = _c2[0], newProp = _c2[1];
    if ((_b2 = options.series) === null || _b2 === void 0 ? void 0 : _b2.some(function(s) {
      return s[oldProp] != null;
    })) {
      Logger.warnOnce("property [series." + oldProp + "] is deprecated, please use [series." + newProp + "] and multiple series instead.");
    }
  });
}
function mergeSeriesOptions(series, type2, seriesThemes, globalTooltipPositionOptions) {
  var _a5;
  var mergedTooltipPosition = jsonMerge([__assign22({}, globalTooltipPositionOptions), (_a5 = series.tooltip) === null || _a5 === void 0 ? void 0 : _a5.position], noDataCloneMergeOptions);
  var mergedSeries = jsonMerge([
    seriesThemes[type2] || {},
    __assign22(__assign22({}, series), { type: type2, tooltip: __assign22(__assign22({}, series.tooltip), { position: mergedTooltipPosition }) })
  ], noDataCloneMergeOptions);
  return mergedSeries;
}
function prepareMainOptions(defaultOverrides, options) {
  var _a5 = prepareTheme(options), theme = _a5.theme, cleanedTheme = _a5.cleanedTheme, axesThemes = _a5.axesThemes, seriesThemes = _a5.seriesThemes;
  var context = { colourIndex: 0, palette: theme.palette };
  var mergedOptions = jsonMerge([defaultOverrides, cleanedTheme, options], noDataCloneMergeOptions);
  return { context, mergedOptions, axesThemes, seriesThemes };
}
function prepareTheme(options) {
  var theme = getChartTheme(options.theme);
  var themeConfig = theme.config[optionsType(options) || "cartesian"];
  var seriesThemes = Object.entries(theme.config).reduce(function(result, _a5) {
    var _b2 = __read40(_a5, 2), seriesType = _b2[0], series = _b2[1].series;
    result[seriesType] = series === null || series === void 0 ? void 0 : series[seriesType];
    return result;
  }, {});
  return {
    theme,
    axesThemes: themeConfig["axes"] || {},
    seriesThemes,
    cleanedTheme: jsonMerge([themeConfig, { axes: DELETE, series: DELETE }])
  };
}
function prepareSeries(context, input) {
  var defaults = [];
  for (var _i = 2; _i < arguments.length; _i++) {
    defaults[_i - 2] = arguments[_i];
  }
  var paletteOptions = calculateSeriesPalette(context, input);
  var removeOptions = { stacked: DELETE };
  var mergedResult = jsonMerge(__spread25(defaults, [paletteOptions, input, removeOptions]), noDataCloneMergeOptions);
  return applySeriesTransform(mergedResult);
}
function calculateSeriesPalette(context, input) {
  var paletteOptions = {};
  var _a5 = context.palette, fills = _a5.fills, strokes = _a5.strokes;
  var inputAny = input;
  var colourCount = countArrayElements(inputAny["yKeys"] || []) || 1;
  switch (input.type) {
    case "pie":
      colourCount = Math.max(fills.length, strokes.length);
    case "area":
    case "bar":
    case "column":
      paletteOptions.fills = takeColours(context, fills, colourCount);
      paletteOptions.strokes = takeColours(context, strokes, colourCount);
      break;
    case "histogram":
      paletteOptions.fill = takeColours(context, fills, 1)[0];
      paletteOptions.stroke = takeColours(context, strokes, 1)[0];
      break;
    case "scatter":
      paletteOptions.marker = {
        stroke: takeColours(context, strokes, 1)[0],
        fill: takeColours(context, fills, 1)[0]
      };
      break;
    case "line":
      paletteOptions.stroke = takeColours(context, fills, 1)[0];
      paletteOptions.marker = {
        stroke: takeColours(context, strokes, 1)[0],
        fill: takeColours(context, fills, 1)[0]
      };
      break;
  }
  context.colourIndex += colourCount;
  return paletteOptions;
}
function prepareAxis(axis, axisTheme) {
  var removeOptions = { top: DELETE, bottom: DELETE, left: DELETE, right: DELETE };
  if (axis.crossLines) {
    if (!Array.isArray(axis.crossLines)) {
      Logger.warn("axis[].crossLines should be an array.");
      axis.crossLines = [];
    }
    var crossLinesTheme_1 = axisTheme.crossLines;
    axis.crossLines = axis.crossLines.map(function(crossLine) {
      return jsonMerge([crossLinesTheme_1, crossLine]);
    });
  }
  var cleanTheme = { crossLines: DELETE };
  return jsonMerge([axisTheme, cleanTheme, axis, removeOptions], noDataCloneMergeOptions);
}
function prepareEnabledOptions(options, mergedOptions) {
  jsonWalk(options, function(_, visitingUserOpts, visitingMergedOpts) {
    if (!visitingMergedOpts)
      return;
    var _enabledFromTheme = visitingMergedOpts._enabledFromTheme;
    if (_enabledFromTheme != null) {
      delete visitingMergedOpts._enabledFromTheme;
    }
    if (!("enabled" in visitingMergedOpts))
      return;
    if (_enabledFromTheme)
      return;
    if (visitingUserOpts.enabled == null) {
      visitingMergedOpts.enabled = true;
    }
  }, { skip: ["data", "theme"] }, mergedOptions);
  jsonWalk(mergedOptions, function(_, visitingMergedOpts) {
    if (visitingMergedOpts._enabledFromTheme != null) {
      delete visitingMergedOpts._enabledFromTheme;
    }
  }, { skip: ["data", "theme"] });
}
function preparePieOptions(pieSeriesTheme, seriesOptions, mergedSeries) {
  if (Array.isArray(seriesOptions.innerLabels)) {
    mergedSeries.innerLabels = seriesOptions.innerLabels.map(function(ln) {
      return jsonMerge([pieSeriesTheme.innerLabels, ln]);
    });
  } else {
    mergedSeries.innerLabels = DELETE;
  }
}
var __assign22, __values29, __read40, __spread25, noDataCloneMergeOptions;
var init_prepare = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/mapping/prepare.js"() {
    init_defaults();
    init_json();
    init_transforms();
    init_themes();
    init_prepareSeries();
    init_logger();
    init_chartTypes();
    init_chartAxesTypes();
    __assign22 = function() {
      __assign22 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign22.apply(this, arguments);
    };
    __values29 = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read40 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread25 = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read40(arguments[i]));
      return ar;
    };
    noDataCloneMergeOptions = {
      avoidDeepClone: ["data"]
    };
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/crossline/crossLineLabelPosition.js
var horizontalCrosslineTranslationDirections, verticalCrossLineTranslationDirections, calculateLabelTranslation, POSITION_TOP_COORDINATES, POSITION_LEFT_COORDINATES, POSITION_RIGHT_COORDINATES, POSITION_BOTTOM_COORDINATES, POSITION_INSIDE_COORDINATES, POSITION_TOP_LEFT_COORDINATES, POSITION_BOTTOM_LEFT_COORDINATES, POSITION_TOP_RIGHT_COORDINATES, POSITION_BOTTOM_RIGHT_COORDINATES, labeldDirectionHandling;
var init_crossLineLabelPosition = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/crossline/crossLineLabelPosition.js"() {
    horizontalCrosslineTranslationDirections = {
      top: { xTranslationDirection: 0, yTranslationDirection: -1 },
      bottom: { xTranslationDirection: 0, yTranslationDirection: 1 },
      left: { xTranslationDirection: -1, yTranslationDirection: 0 },
      right: { xTranslationDirection: 1, yTranslationDirection: 0 },
      topLeft: { xTranslationDirection: 1, yTranslationDirection: -1 },
      topRight: { xTranslationDirection: -1, yTranslationDirection: -1 },
      bottomLeft: { xTranslationDirection: 1, yTranslationDirection: 1 },
      bottomRight: { xTranslationDirection: -1, yTranslationDirection: 1 },
      inside: { xTranslationDirection: 0, yTranslationDirection: 0 },
      insideLeft: { xTranslationDirection: 1, yTranslationDirection: 0 },
      insideRight: { xTranslationDirection: -1, yTranslationDirection: 0 },
      insideTop: { xTranslationDirection: 0, yTranslationDirection: 1 },
      insideBottom: { xTranslationDirection: 0, yTranslationDirection: -1 },
      insideTopLeft: { xTranslationDirection: 1, yTranslationDirection: 1 },
      insideBottomLeft: { xTranslationDirection: 1, yTranslationDirection: -1 },
      insideTopRight: { xTranslationDirection: -1, yTranslationDirection: 1 },
      insideBottomRight: { xTranslationDirection: -1, yTranslationDirection: -1 }
    };
    verticalCrossLineTranslationDirections = {
      top: { xTranslationDirection: 1, yTranslationDirection: 0 },
      bottom: { xTranslationDirection: -1, yTranslationDirection: 0 },
      left: { xTranslationDirection: 0, yTranslationDirection: -1 },
      right: { xTranslationDirection: 0, yTranslationDirection: 1 },
      topLeft: { xTranslationDirection: -1, yTranslationDirection: -1 },
      topRight: { xTranslationDirection: -1, yTranslationDirection: 1 },
      bottomLeft: { xTranslationDirection: 1, yTranslationDirection: -1 },
      bottomRight: { xTranslationDirection: 1, yTranslationDirection: 1 },
      inside: { xTranslationDirection: 0, yTranslationDirection: 0 },
      insideLeft: { xTranslationDirection: 0, yTranslationDirection: 1 },
      insideRight: { xTranslationDirection: 0, yTranslationDirection: -1 },
      insideTop: { xTranslationDirection: -1, yTranslationDirection: 0 },
      insideBottom: { xTranslationDirection: 1, yTranslationDirection: 0 },
      insideTopLeft: { xTranslationDirection: -1, yTranslationDirection: 1 },
      insideBottomLeft: { xTranslationDirection: 1, yTranslationDirection: 1 },
      insideTopRight: { xTranslationDirection: -1, yTranslationDirection: -1 },
      insideBottomRight: { xTranslationDirection: 1, yTranslationDirection: -1 }
    };
    calculateLabelTranslation = function(_a5) {
      var _b2;
      var yDirection = _a5.yDirection, _c2 = _a5.padding, padding = _c2 === void 0 ? 0 : _c2, position = _a5.position, bbox = _a5.bbox;
      var crossLineTranslationDirections = yDirection ? horizontalCrosslineTranslationDirections : verticalCrossLineTranslationDirections;
      var _d2 = (_b2 = crossLineTranslationDirections[position]) !== null && _b2 !== void 0 ? _b2 : crossLineTranslationDirections["top"], xTranslationDirection = _d2.xTranslationDirection, yTranslationDirection = _d2.yTranslationDirection;
      var w = yDirection ? bbox.width : bbox.height;
      var h = yDirection ? bbox.height : bbox.width;
      var xTranslation = xTranslationDirection * (padding + w / 2);
      var yTranslation = yTranslationDirection * (padding + h / 2);
      return {
        xTranslation,
        yTranslation
      };
    };
    POSITION_TOP_COORDINATES = function(_a5) {
      var yDirection = _a5.yDirection, xEnd = _a5.xEnd, yStart = _a5.yStart, yEnd = _a5.yEnd;
      if (yDirection) {
        return { x: xEnd / 2, y: yStart };
      } else {
        return { x: xEnd, y: !isNaN(yEnd) ? (yStart + yEnd) / 2 : yStart };
      }
    };
    POSITION_LEFT_COORDINATES = function(_a5) {
      var yDirection = _a5.yDirection, xStart = _a5.xStart, xEnd = _a5.xEnd, yStart = _a5.yStart, yEnd = _a5.yEnd;
      if (yDirection) {
        return { x: xStart, y: !isNaN(yEnd) ? (yStart + yEnd) / 2 : yStart };
      } else {
        return { x: xEnd / 2, y: yStart };
      }
    };
    POSITION_RIGHT_COORDINATES = function(_a5) {
      var yDirection = _a5.yDirection, xEnd = _a5.xEnd, yStart = _a5.yStart, yEnd = _a5.yEnd;
      if (yDirection) {
        return { x: xEnd, y: !isNaN(yEnd) ? (yStart + yEnd) / 2 : yStart };
      } else {
        return { x: xEnd / 2, y: !isNaN(yEnd) ? yEnd : yStart };
      }
    };
    POSITION_BOTTOM_COORDINATES = function(_a5) {
      var yDirection = _a5.yDirection, xStart = _a5.xStart, xEnd = _a5.xEnd, yStart = _a5.yStart, yEnd = _a5.yEnd;
      if (yDirection) {
        return { x: xEnd / 2, y: !isNaN(yEnd) ? yEnd : yStart };
      } else {
        return { x: xStart, y: !isNaN(yEnd) ? (yStart + yEnd) / 2 : yStart };
      }
    };
    POSITION_INSIDE_COORDINATES = function(_a5) {
      var xEnd = _a5.xEnd, yStart = _a5.yStart, yEnd = _a5.yEnd;
      return { x: xEnd / 2, y: !isNaN(yEnd) ? (yStart + yEnd) / 2 : yStart };
    };
    POSITION_TOP_LEFT_COORDINATES = function(_a5) {
      var yDirection = _a5.yDirection, xStart = _a5.xStart, xEnd = _a5.xEnd, yStart = _a5.yStart;
      if (yDirection) {
        return { x: xStart / 2, y: yStart };
      } else {
        return { x: xEnd, y: yStart };
      }
    };
    POSITION_BOTTOM_LEFT_COORDINATES = function(_a5) {
      var yDirection = _a5.yDirection, xStart = _a5.xStart, yStart = _a5.yStart, yEnd = _a5.yEnd;
      if (yDirection) {
        return { x: xStart, y: !isNaN(yEnd) ? yEnd : yStart };
      } else {
        return { x: xStart, y: yStart };
      }
    };
    POSITION_TOP_RIGHT_COORDINATES = function(_a5) {
      var yDirection = _a5.yDirection, xEnd = _a5.xEnd, yStart = _a5.yStart, yEnd = _a5.yEnd;
      if (yDirection) {
        return { x: xEnd, y: yStart };
      } else {
        return { x: xEnd, y: !isNaN(yEnd) ? yEnd : yStart };
      }
    };
    POSITION_BOTTOM_RIGHT_COORDINATES = function(_a5) {
      var yDirection = _a5.yDirection, xStart = _a5.xStart, xEnd = _a5.xEnd, yStart = _a5.yStart, yEnd = _a5.yEnd;
      if (yDirection) {
        return { x: xEnd, y: !isNaN(yEnd) ? yEnd : yStart };
      } else {
        return { x: xStart, y: !isNaN(yEnd) ? yEnd : yStart };
      }
    };
    labeldDirectionHandling = {
      top: { c: POSITION_TOP_COORDINATES },
      bottom: { c: POSITION_BOTTOM_COORDINATES },
      left: { c: POSITION_LEFT_COORDINATES },
      right: { c: POSITION_RIGHT_COORDINATES },
      topLeft: { c: POSITION_TOP_LEFT_COORDINATES },
      topRight: { c: POSITION_TOP_RIGHT_COORDINATES },
      bottomLeft: { c: POSITION_BOTTOM_LEFT_COORDINATES },
      bottomRight: { c: POSITION_BOTTOM_RIGHT_COORDINATES },
      inside: { c: POSITION_INSIDE_COORDINATES },
      insideLeft: { c: POSITION_LEFT_COORDINATES },
      insideRight: { c: POSITION_RIGHT_COORDINATES },
      insideTop: { c: POSITION_TOP_COORDINATES },
      insideBottom: { c: POSITION_BOTTOM_COORDINATES },
      insideTopLeft: { c: POSITION_TOP_LEFT_COORDINATES },
      insideBottomLeft: { c: POSITION_BOTTOM_LEFT_COORDINATES },
      insideTopRight: { c: POSITION_TOP_RIGHT_COORDINATES },
      insideBottomRight: { c: POSITION_BOTTOM_RIGHT_COORDINATES }
    };
  }
});

// node_modules/ag-charts-community/dist/esm/es5/scene/shape/range.js
var __extends65, __assign23, __decorate44, Range;
var init_range = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/scene/shape/range.js"() {
    init_shape();
    init_bbox();
    init_node();
    __extends65 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __assign23 = function() {
      __assign23 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign23.apply(this, arguments);
    };
    __decorate44 = function(decorators, target2, key2, desc) {
      var c = arguments.length, r = c < 3 ? target2 : desc === null ? desc = Object.getOwnPropertyDescriptor(target2, key2) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target2, key2, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target2, key2, r) : d(target2, key2)) || r;
      return c > 3 && r && Object.defineProperty(target2, key2, r), r;
    };
    Range = /** @class */
    function(_super) {
      __extends65(Range2, _super);
      function Range2() {
        var _this = _super.call(this) || this;
        _this.x1 = 0;
        _this.y1 = 0;
        _this.x2 = 0;
        _this.y2 = 0;
        _this.startLine = false;
        _this.endLine = false;
        _this.isRange = false;
        _this.restoreOwnStyles();
        return _this;
      }
      Range2.prototype.computeBBox = function() {
        return new BBox(this.x1, this.y1, this.x2 - this.x1, this.y2 - this.y1);
      };
      Range2.prototype.isPointInPath = function(_x, _y) {
        return false;
      };
      Range2.prototype.render = function(renderCtx) {
        var _a5;
        var ctx = renderCtx.ctx, forceRender = renderCtx.forceRender, stats = renderCtx.stats;
        if (this.dirty === RedrawType.NONE && !forceRender) {
          if (stats)
            stats.nodesSkipped += this.nodeCount.count;
          return;
        }
        this.computeTransformMatrix();
        this.matrix.toContext(ctx);
        var _b2 = this, x1 = _b2.x1, y1 = _b2.y1, x2 = _b2.x2, y2 = _b2.y2;
        x1 = this.align(x1);
        y1 = this.align(y1);
        x2 = this.align(x2);
        y2 = this.align(y2);
        var _c2 = this, fill = _c2.fill, opacity = _c2.opacity, isRange = _c2.isRange;
        var fillActive = !!(isRange && fill);
        if (fillActive) {
          var fillOpacity = this.fillOpacity;
          ctx.fillStyle = fill;
          ctx.globalAlpha = opacity * fillOpacity;
          ctx.beginPath();
          ctx.moveTo(x1, y1);
          ctx.lineTo(x2, y1);
          ctx.lineTo(x2, y2);
          ctx.lineTo(x1, y2);
          ctx.closePath();
          ctx.fill();
        }
        var _d2 = this, stroke = _d2.stroke, strokeWidth = _d2.strokeWidth, startLine = _d2.startLine, endLine = _d2.endLine;
        var strokeActive = !!((startLine || endLine) && stroke && strokeWidth);
        if (strokeActive) {
          var _e = this, strokeOpacity = _e.strokeOpacity, lineDash = _e.lineDash, lineDashOffset = _e.lineDashOffset, lineCap = _e.lineCap, lineJoin = _e.lineJoin;
          ctx.strokeStyle = stroke;
          ctx.globalAlpha = opacity * strokeOpacity;
          ctx.lineWidth = strokeWidth;
          if (lineDash) {
            ctx.setLineDash(lineDash);
          }
          if (lineDashOffset) {
            ctx.lineDashOffset = lineDashOffset;
          }
          if (lineCap) {
            ctx.lineCap = lineCap;
          }
          if (lineJoin) {
            ctx.lineJoin = lineJoin;
          }
          ctx.beginPath();
          if (startLine) {
            ctx.moveTo(x1, y1);
            ctx.lineTo(x2, y1);
          }
          if (endLine) {
            ctx.moveTo(x2, y2);
            ctx.lineTo(x1, y2);
          }
          ctx.stroke();
        }
        (_a5 = this.fillShadow) === null || _a5 === void 0 ? void 0 : _a5.markClean();
        _super.prototype.render.call(this, renderCtx);
      };
      Range2.className = "Range";
      Range2.defaultStyles = __assign23(__assign23({}, Shape.defaultStyles), { strokeWidth: 1 });
      __decorate44([
        SceneChangeDetection({ redraw: RedrawType.MINOR })
      ], Range2.prototype, "x1", void 0);
      __decorate44([
        SceneChangeDetection({ redraw: RedrawType.MINOR })
      ], Range2.prototype, "y1", void 0);
      __decorate44([
        SceneChangeDetection({ redraw: RedrawType.MINOR })
      ], Range2.prototype, "x2", void 0);
      __decorate44([
        SceneChangeDetection({ redraw: RedrawType.MINOR })
      ], Range2.prototype, "y2", void 0);
      __decorate44([
        SceneChangeDetection({ redraw: RedrawType.MINOR })
      ], Range2.prototype, "startLine", void 0);
      __decorate44([
        SceneChangeDetection({ redraw: RedrawType.MINOR })
      ], Range2.prototype, "endLine", void 0);
      __decorate44([
        SceneChangeDetection({ redraw: RedrawType.MINOR })
      ], Range2.prototype, "isRange", void 0);
      return Range2;
    }(Shape);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/crossline/crossLine.js
var __decorate45, __read41, __spread26, CROSSLINE_LABEL_POSITIONS, OPT_CROSSLINE_LABEL_POSITION, OPT_CROSSLINE_TYPE, CrossLineLabel, CrossLine;
var init_crossLine = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/crossline/crossLine.js"() {
    init_node();
    init_group();
    init_text();
    init_continuousScale();
    init_id();
    init_chartAxisDirection();
    init_crossLineLabelPosition();
    init_value();
    init_layers();
    init_range();
    init_validation();
    init_label();
    __decorate45 = function(decorators, target2, key2, desc) {
      var c = arguments.length, r = c < 3 ? target2 : desc === null ? desc = Object.getOwnPropertyDescriptor(target2, key2) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target2, key2, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target2, key2, r) : d(target2, key2)) || r;
      return c > 3 && r && Object.defineProperty(target2, key2, r), r;
    };
    __read41 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread26 = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read41(arguments[i]));
      return ar;
    };
    CROSSLINE_LABEL_POSITIONS = [
      "top",
      "left",
      "right",
      "bottom",
      "topLeft",
      "topRight",
      "bottomLeft",
      "bottomRight",
      "inside",
      "insideLeft",
      "insideRight",
      "insideTop",
      "insideBottom",
      "insideTopLeft",
      "insideBottomLeft",
      "insideTopRight",
      "insideBottomRight"
    ];
    OPT_CROSSLINE_LABEL_POSITION = predicateWithMessage(function(v, ctx) {
      return OPTIONAL(v, ctx, function(v2) {
        return CROSSLINE_LABEL_POSITIONS.includes(v2);
      });
    }, "expecting an optional crossLine label position keyword such as 'topLeft', 'topRight' or 'inside'");
    OPT_CROSSLINE_TYPE = predicateWithMessage(function(v, ctx) {
      return OPTIONAL(v, ctx, function(v2) {
        return v2 === "range" || v2 === "line";
      });
    }, "expecting a crossLine type keyword such as 'range' or 'line'");
    CrossLineLabel = /** @class */
    function() {
      function CrossLineLabel2() {
        this.enabled = void 0;
        this.text = void 0;
        this.fontStyle = void 0;
        this.fontWeight = void 0;
        this.fontSize = 14;
        this.fontFamily = "Verdana, sans-serif";
        this.padding = 5;
        this.color = "rgba(87, 87, 87, 1)";
        this.position = void 0;
        this.rotation = void 0;
        this.parallel = void 0;
      }
      __decorate45([
        Validate(OPT_BOOLEAN)
      ], CrossLineLabel2.prototype, "enabled", void 0);
      __decorate45([
        Validate(OPT_STRING)
      ], CrossLineLabel2.prototype, "text", void 0);
      __decorate45([
        Validate(OPT_FONT_STYLE)
      ], CrossLineLabel2.prototype, "fontStyle", void 0);
      __decorate45([
        Validate(OPT_FONT_WEIGHT)
      ], CrossLineLabel2.prototype, "fontWeight", void 0);
      __decorate45([
        Validate(NUMBER(0))
      ], CrossLineLabel2.prototype, "fontSize", void 0);
      __decorate45([
        Validate(STRING)
      ], CrossLineLabel2.prototype, "fontFamily", void 0);
      __decorate45([
        Validate(NUMBER(0))
      ], CrossLineLabel2.prototype, "padding", void 0);
      __decorate45([
        Validate(OPT_COLOR_STRING)
      ], CrossLineLabel2.prototype, "color", void 0);
      __decorate45([
        Validate(OPT_CROSSLINE_LABEL_POSITION)
      ], CrossLineLabel2.prototype, "position", void 0);
      __decorate45([
        Validate(OPT_NUMBER(-360, 360))
      ], CrossLineLabel2.prototype, "rotation", void 0);
      __decorate45([
        Validate(OPT_BOOLEAN)
      ], CrossLineLabel2.prototype, "parallel", void 0);
      return CrossLineLabel2;
    }();
    CrossLine = /** @class */
    function() {
      function CrossLine2() {
        this.id = createId(this);
        this.enabled = void 0;
        this.type = void 0;
        this.range = void 0;
        this.value = void 0;
        this.fill = void 0;
        this.fillOpacity = void 0;
        this.stroke = void 0;
        this.strokeWidth = void 0;
        this.strokeOpacity = void 0;
        this.lineDash = void 0;
        this.label = new CrossLineLabel();
        this.scale = void 0;
        this.clippedRange = [-Infinity, Infinity];
        this.gridLength = 0;
        this.sideFlag = -1;
        this.parallelFlipRotation = 0;
        this.regularFlipRotation = 0;
        this.direction = ChartAxisDirection.X;
        this.group = new Group({ name: "" + this.id, layer: true, zIndex: CrossLine2.LINE_LAYER_ZINDEX });
        this.crossLineRange = new Range();
        this.crossLineLabel = new Text();
        this.labelPoint = void 0;
        this.data = [];
        this.startLine = false;
        this.endLine = false;
        this.isRange = false;
        var _a5 = this, group2 = _a5.group, crossLineRange = _a5.crossLineRange, crossLineLabel = _a5.crossLineLabel;
        group2.append([crossLineRange, crossLineLabel]);
        crossLineRange.pointerEvents = PointerEvents.None;
      }
      CrossLine2.prototype.update = function(visible) {
        if (!this.enabled) {
          return;
        }
        this.group.visible = visible;
        if (!visible) {
          return;
        }
        var dataCreated = this.createNodeData();
        if (!dataCreated) {
          this.group.visible = false;
          return;
        }
        this.updateNodes();
        this.group.zIndex = this.getZIndex(this.isRange);
      };
      CrossLine2.prototype.updateNodes = function() {
        this.updateRangeNode();
        if (this.label.enabled) {
          this.updateLabel();
          this.positionLabel();
        }
      };
      CrossLine2.prototype.createNodeData = function() {
        var _a5, _b2, _c2;
        var _d2, _e;
        var _f = this, scale = _f.scale, gridLength = _f.gridLength, sideFlag = _f.sideFlag, direction = _f.direction, _g = _f.label.position, position = _g === void 0 ? "top" : _g, clippedRange = _f.clippedRange, _h = _f.strokeWidth, strokeWidth = _h === void 0 ? 0 : _h;
        if (!scale) {
          return false;
        }
        var bandwidth = (_d2 = scale.bandwidth) !== null && _d2 !== void 0 ? _d2 : 0;
        var clippedRangeClamper = function(x) {
          return Math.max(Math.min.apply(Math, __spread26(clippedRange)), Math.min(Math.max.apply(Math, __spread26(clippedRange)), x));
        };
        var _j = __read41([0, sideFlag * gridLength], 2), xStart = _j[0], xEnd = _j[1];
        var _k = __read41(this.getRange(), 2), yStart = _k[0], yEnd = _k[1];
        var _l = __read41([
          Number(scale.convert(yStart, { strict: false })),
          scale.convert(yEnd, { strict: false }) + bandwidth
        ], 2), clampedYStart = _l[0], clampedYEnd = _l[1];
        clampedYStart = clippedRangeClamper(clampedYStart);
        clampedYEnd = clippedRangeClamper(clampedYEnd);
        _a5 = __read41([Number(scale.convert(yStart)), scale.convert(yEnd) + bandwidth], 2), yStart = _a5[0], yEnd = _a5[1];
        var validRange = !isNaN(clampedYStart) && !isNaN(clampedYEnd) && (yStart === clampedYStart || yEnd === clampedYEnd || clampedYStart !== clampedYEnd) && Math.abs(clampedYEnd - clampedYStart) > 0;
        if (validRange) {
          var reverse = clampedYStart !== Math.min(clampedYStart, clampedYEnd);
          if (reverse) {
            _b2 = __read41([
              Math.min(clampedYStart, clampedYEnd),
              Math.max(clampedYStart, clampedYEnd)
            ], 2), clampedYStart = _b2[0], clampedYEnd = _b2[1];
            _c2 = __read41([yEnd, yStart], 2), yStart = _c2[0], yEnd = _c2[1];
          }
        }
        this.isRange = validRange;
        this.startLine = !isNaN(yStart) && strokeWidth > 0 && yStart === clampedYStart;
        this.endLine = !isNaN(yEnd) && strokeWidth > 0 && yEnd === clampedYEnd;
        if (!validRange && !this.startLine && !this.endLine) {
          return false;
        }
        this.data = [clampedYStart, clampedYEnd];
        if (this.label.enabled) {
          var yDirection = direction === ChartAxisDirection.Y;
          var _m = ((_e = labeldDirectionHandling[position]) !== null && _e !== void 0 ? _e : {}).c, c = _m === void 0 ? POSITION_TOP_COORDINATES : _m;
          var _o = c({ yDirection, xStart, xEnd, yStart: clampedYStart, yEnd: clampedYEnd }), labelX = _o.x, labelY = _o.y;
          this.labelPoint = {
            x: labelX,
            y: labelY
          };
        }
        return true;
      };
      CrossLine2.prototype.updateRangeNode = function() {
        var _a5;
        var _b2 = this, crossLineRange = _b2.crossLineRange, sideFlag = _b2.sideFlag, gridLength = _b2.gridLength, data = _b2.data, startLine = _b2.startLine, endLine = _b2.endLine, isRange = _b2.isRange, fill = _b2.fill, fillOpacity = _b2.fillOpacity, stroke = _b2.stroke, strokeWidth = _b2.strokeWidth, lineDash = _b2.lineDash;
        crossLineRange.x1 = 0;
        crossLineRange.x2 = sideFlag * gridLength;
        crossLineRange.y1 = data[0];
        crossLineRange.y2 = data[1];
        crossLineRange.startLine = startLine;
        crossLineRange.endLine = endLine;
        crossLineRange.isRange = isRange;
        crossLineRange.fill = fill;
        crossLineRange.fillOpacity = fillOpacity !== null && fillOpacity !== void 0 ? fillOpacity : 1;
        crossLineRange.stroke = stroke;
        crossLineRange.strokeWidth = strokeWidth !== null && strokeWidth !== void 0 ? strokeWidth : 1;
        crossLineRange.strokeOpacity = (_a5 = this.strokeOpacity) !== null && _a5 !== void 0 ? _a5 : 1;
        crossLineRange.lineDash = lineDash;
      };
      CrossLine2.prototype.updateLabel = function() {
        var _a5 = this, crossLineLabel = _a5.crossLineLabel, label = _a5.label;
        if (!label.text) {
          return;
        }
        crossLineLabel.fontStyle = label.fontStyle;
        crossLineLabel.fontWeight = label.fontWeight;
        crossLineLabel.fontSize = label.fontSize;
        crossLineLabel.fontFamily = label.fontFamily;
        crossLineLabel.fill = label.color;
        crossLineLabel.text = label.text;
      };
      CrossLine2.prototype.positionLabel = function() {
        var _a5 = this, crossLineLabel = _a5.crossLineLabel, _b2 = _a5.labelPoint, _c2 = _b2 === void 0 ? {} : _b2, _d2 = _c2.x, x = _d2 === void 0 ? void 0 : _d2, _e = _c2.y, y = _e === void 0 ? void 0 : _e, _f = _a5.label, parallel = _f.parallel, rotation = _f.rotation, _g = _f.position, position = _g === void 0 ? "top" : _g, _h = _f.padding, padding = _h === void 0 ? 0 : _h, direction = _a5.direction, parallelFlipRotation = _a5.parallelFlipRotation, regularFlipRotation = _a5.regularFlipRotation;
        if (x === void 0 || y === void 0) {
          return;
        }
        var _j = calculateLabelRotation({
          rotation,
          parallel,
          regularFlipRotation,
          parallelFlipRotation
        }), autoRotation = _j.autoRotation, labelRotation = _j.labelRotation;
        crossLineLabel.rotation = autoRotation + labelRotation;
        crossLineLabel.textBaseline = "middle";
        crossLineLabel.textAlign = "center";
        var bbox = this.computeLabelBBox();
        if (!bbox) {
          return;
        }
        var yDirection = direction === ChartAxisDirection.Y;
        var _k = calculateLabelTranslation({ yDirection, padding, position, bbox }), xTranslation = _k.xTranslation, yTranslation = _k.yTranslation;
        crossLineLabel.translationX = x + xTranslation;
        crossLineLabel.translationY = y + yTranslation;
      };
      CrossLine2.prototype.getZIndex = function(isRange) {
        if (isRange === void 0) {
          isRange = false;
        }
        if (isRange) {
          return CrossLine2.RANGE_LAYER_ZINDEX;
        }
        return CrossLine2.LINE_LAYER_ZINDEX;
      };
      CrossLine2.prototype.getRange = function() {
        var _a5;
        var _b2 = this, value = _b2.value, range2 = _b2.range, scale = _b2.scale;
        var isContinuous2 = scale instanceof ContinuousScale;
        var _c2 = __read41(range2 !== null && range2 !== void 0 ? range2 : [value, void 0], 2), start = _c2[0], end = _c2[1];
        if (!isContinuous2 && end === void 0) {
          end = start;
        }
        _a5 = __read41([checkDatum(start, isContinuous2), checkDatum(end, isContinuous2)], 2), start = _a5[0], end = _a5[1];
        if (isContinuous2 && start === end) {
          end = void 0;
        }
        if (start === void 0 && end !== void 0) {
          start = end;
          end = void 0;
        }
        return [start, end];
      };
      CrossLine2.prototype.computeLabelBBox = function() {
        return this.crossLineLabel.computeTransformedBBox();
      };
      CrossLine2.prototype.calculatePadding = function(padding, seriesRect) {
        var _a5, _b2, _c2, _d2, _e, _f;
        var _g = this, isRange = _g.isRange, startLine = _g.startLine, endLine = _g.endLine;
        if (!isRange && !startLine && !endLine) {
          return;
        }
        var crossLineLabelBBox = this.computeLabelBBox();
        var labelX = crossLineLabelBBox === null || crossLineLabelBBox === void 0 ? void 0 : crossLineLabelBBox.x;
        var labelY = crossLineLabelBBox === null || crossLineLabelBBox === void 0 ? void 0 : crossLineLabelBBox.y;
        if (labelX == void 0 || labelY == void 0) {
          return;
        }
        var labelWidth = (_a5 = crossLineLabelBBox === null || crossLineLabelBBox === void 0 ? void 0 : crossLineLabelBBox.width) !== null && _a5 !== void 0 ? _a5 : 0;
        var labelHeight = (_b2 = crossLineLabelBBox === null || crossLineLabelBBox === void 0 ? void 0 : crossLineLabelBBox.height) !== null && _b2 !== void 0 ? _b2 : 0;
        if (labelWidth > seriesRect.width || labelHeight > seriesRect.height) {
          return;
        }
        if (labelX + labelWidth >= seriesRect.x + seriesRect.width) {
          var paddingRight = labelX + labelWidth - (seriesRect.x + seriesRect.width);
          padding.right = ((_c2 = padding.right) !== null && _c2 !== void 0 ? _c2 : 0) >= paddingRight ? padding.right : paddingRight;
        } else if (labelX <= seriesRect.x) {
          var paddingLeft = seriesRect.x - labelX;
          padding.left = ((_d2 = padding.left) !== null && _d2 !== void 0 ? _d2 : 0) >= paddingLeft ? padding.left : paddingLeft;
        }
        if (labelY + labelHeight >= seriesRect.y + seriesRect.height) {
          var paddingBottom = labelY + labelHeight - (seriesRect.y + seriesRect.height);
          padding.bottom = ((_e = padding.bottom) !== null && _e !== void 0 ? _e : 0) >= paddingBottom ? padding.bottom : paddingBottom;
        } else if (labelY <= seriesRect.y) {
          var paddingTop = seriesRect.y - labelY;
          padding.top = ((_f = padding.top) !== null && _f !== void 0 ? _f : 0) >= paddingTop ? padding.top : paddingTop;
        }
      };
      CrossLine2.LINE_LAYER_ZINDEX = Layers.SERIES_CROSSLINE_LINE_ZINDEX;
      CrossLine2.RANGE_LAYER_ZINDEX = Layers.SERIES_CROSSLINE_RANGE_ZINDEX;
      CrossLine2.className = "CrossLine";
      __decorate45([
        Validate(OPT_BOOLEAN)
      ], CrossLine2.prototype, "enabled", void 0);
      __decorate45([
        Validate(OPT_CROSSLINE_TYPE)
      ], CrossLine2.prototype, "type", void 0);
      __decorate45([
        Validate(OPT_ARRAY(2))
      ], CrossLine2.prototype, "range", void 0);
      __decorate45([
        Validate(OPT_COLOR_STRING)
      ], CrossLine2.prototype, "fill", void 0);
      __decorate45([
        Validate(OPT_NUMBER(0, 1))
      ], CrossLine2.prototype, "fillOpacity", void 0);
      __decorate45([
        Validate(OPT_COLOR_STRING)
      ], CrossLine2.prototype, "stroke", void 0);
      __decorate45([
        Validate(OPT_NUMBER())
      ], CrossLine2.prototype, "strokeWidth", void 0);
      __decorate45([
        Validate(OPT_NUMBER(0, 1))
      ], CrossLine2.prototype, "strokeOpacity", void 0);
      __decorate45([
        Validate(OPT_LINE_DASH)
      ], CrossLine2.prototype, "lineDash", void 0);
      return CrossLine2;
    }();
  }
});

// node_modules/ag-charts-community/dist/esm/es5/scene/image.js
var __extends66, __decorate46, Image;
var init_image = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/scene/image.js"() {
    init_node();
    __extends66 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate46 = function(decorators, target2, key2, desc) {
      var c = arguments.length, r = c < 3 ? target2 : desc === null ? desc = Object.getOwnPropertyDescriptor(target2, key2) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target2, key2, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target2, key2, r) : d(target2, key2)) || r;
      return c > 3 && r && Object.defineProperty(target2, key2, r), r;
    };
    Image = /** @class */
    function(_super) {
      __extends66(Image2, _super);
      function Image2(sourceImage) {
        var _this = _super.call(this) || this;
        _this.x = 0;
        _this.y = 0;
        _this.width = 0;
        _this.height = 0;
        _this.opacity = 1;
        _this.sourceImage = sourceImage;
        return _this;
      }
      Image2.prototype.render = function(renderCtx) {
        var ctx = renderCtx.ctx, forceRender = renderCtx.forceRender, stats = renderCtx.stats;
        if (this.dirty === RedrawType.NONE && !forceRender) {
          if (stats)
            stats.nodesSkipped++;
          return;
        }
        this.computeTransformMatrix();
        this.matrix.toContext(ctx);
        var image = this.sourceImage;
        ctx.globalAlpha = this.opacity;
        ctx.drawImage(image, 0, 0, image.width, image.height, this.x, this.y, this.width, this.height);
        _super.prototype.render.call(this, renderCtx);
      };
      __decorate46([
        SceneChangeDetection({ redraw: RedrawType.MAJOR })
      ], Image2.prototype, "x", void 0);
      __decorate46([
        SceneChangeDetection({ redraw: RedrawType.MAJOR })
      ], Image2.prototype, "y", void 0);
      __decorate46([
        SceneChangeDetection({ redraw: RedrawType.MAJOR })
      ], Image2.prototype, "width", void 0);
      __decorate46([
        SceneChangeDetection({ redraw: RedrawType.MAJOR })
      ], Image2.prototype, "height", void 0);
      __decorate46([
        SceneChangeDetection({ redraw: RedrawType.MAJOR })
      ], Image2.prototype, "opacity", void 0);
      return Image2;
    }(Node);
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/background/backgroundImage.js
var BackgroundImage;
var init_backgroundImage = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/background/backgroundImage.js"() {
    init_image();
    BackgroundImage = /** @class */
    function() {
      function BackgroundImage2() {
        var _this = this;
        this._image = document.createElement("img");
        this.loadedSynchronously = true;
        this.left = void 0;
        this.top = void 0;
        this.right = void 0;
        this.bottom = void 0;
        this.width = void 0;
        this.height = void 0;
        this.opacity = 1;
        this.containerWidth = 0;
        this.containerHeight = 0;
        this.onload = void 0;
        this.onImageLoad = function() {
          if (_this.loadedSynchronously) {
            return;
          }
          _this.node.visible = false;
          _this.performLayout(_this.containerWidth, _this.containerHeight);
          if (_this.onload) {
            _this.onload();
          }
        };
        this.node = new Image(this._image);
        this._image.onload = this.onImageLoad;
      }
      Object.defineProperty(BackgroundImage2.prototype, "url", {
        get: function() {
          return this._image.src;
        },
        set: function(value) {
          this._image.src = value;
          this.loadedSynchronously = this.complete;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(BackgroundImage2.prototype, "complete", {
        get: function() {
          return this._image.width > 0 && this._image.height > 0;
        },
        enumerable: false,
        configurable: true
      });
      BackgroundImage2.prototype.performLayout = function(containerWidth, containerHeight) {
        this.containerWidth = containerWidth;
        this.containerHeight = containerHeight;
        if (!this.complete) {
          this.node.visible = false;
          return;
        }
        var position = this.calculatePosition(this._image.width, this._image.height);
        Object.assign(this.node, position);
        this.node.visible = true;
        this.node.opacity = this.opacity;
      };
      BackgroundImage2.prototype.calculatePosition = function(naturalWidth, naturalHeight) {
        var left = this.left;
        var right = this.right;
        var width = this.width;
        var top = this.top;
        var bottom = this.bottom;
        var height = this.height;
        if (left != null) {
          if (right != null) {
            width = this.containerWidth - left - right;
          } else if (width != null) {
            right = this.containerWidth - left + width;
          }
        } else if (right != null) {
          if (width != null) {
            left = this.containerWidth - right - width;
          }
        }
        if (top != null) {
          if (bottom != null) {
            height = this.containerHeight - bottom - top;
          } else if (height != null) {
            bottom = this.containerHeight - top - height;
          }
        } else if (bottom != null) {
          if (height != null) {
            top = this.containerHeight - bottom - height;
          }
        }
        if (width == null) {
          if (height == null) {
            width = naturalWidth;
            height = naturalHeight;
          } else {
            width = Math.ceil(naturalWidth * height / naturalHeight);
          }
        } else if (height == null) {
          height = Math.ceil(naturalHeight * width / naturalWidth);
        }
        if (left == null) {
          if (right == null) {
            left = Math.floor((this.containerWidth - width) / 2);
          } else {
            left = this.containerWidth - right - width;
          }
        }
        if (top == null) {
          if (bottom == null) {
            top = Math.floor((this.containerHeight - height) / 2);
          } else {
            top = this.containerHeight - height - bottom;
          }
        }
        return { x: left, y: top, width, height };
      };
      return BackgroundImage2;
    }();
  }
});

// node_modules/ag-charts-community/dist/esm/es5/chart/agChartV2.js
function chartType(options) {
  if (isAgCartesianChartOptions(options)) {
    return "cartesian";
  } else if (isAgPolarChartOptions(options)) {
    return "polar";
  } else if (isAgHierarchyChartOptions(options)) {
    return "hierarchy";
  }
  throw new Error("AG Chart - unknown type of chart for options with type: " + options.type);
}
function debug2(message) {
  var optionalParams = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    optionalParams[_i - 1] = arguments[_i];
  }
  if ([true, "opts"].includes(AgChartInternal.DEBUG())) {
    Logger.debug.apply(Logger, __spread27([message], optionalParams));
  }
}
function applyChartOptions(chart, processedOptions, userOptions) {
  var _a5, _b2, _c2, _d2;
  var completeOptions = jsonMerge([(_a5 = chart.processedOptions) !== null && _a5 !== void 0 ? _a5 : {}, processedOptions], noDataCloneMergeOptions);
  var modulesChanged = applyModules(chart, completeOptions);
  var skip = ["type", "data", "series", "autoSize", "listeners", "theme", "legend.listeners"];
  if (isAgCartesianChartOptions(processedOptions)) {
    skip.push("axes");
  } else if (isAgPolarChartOptions(processedOptions) || isAgHierarchyChartOptions(processedOptions)) {
  } else {
    throw new Error("AG Charts - couldn't apply configuration, check type of options and chart: " + processedOptions["type"]);
  }
  if (processedOptions.listeners) {
    registerListeners(chart, processedOptions.listeners);
  }
  applyOptionValues(chart, processedOptions, { skip });
  var forceNodeDataRefresh = false;
  if (processedOptions.series && processedOptions.series.length > 0) {
    applySeries(chart, processedOptions);
    forceNodeDataRefresh = true;
  }
  if (isAgCartesianChartOptions(processedOptions) && processedOptions.axes) {
    var axesPresent = applyAxes(chart, processedOptions);
    if (axesPresent) {
      forceNodeDataRefresh = true;
    }
  }
  var seriesOpts = processedOptions.series;
  var seriesDataUpdate = !!processedOptions.data || (seriesOpts === null || seriesOpts === void 0 ? void 0 : seriesOpts.some(function(s) {
    return s.data != null;
  }));
  var otherRefreshUpdate = processedOptions.legend || processedOptions.title || processedOptions.subtitle;
  forceNodeDataRefresh = forceNodeDataRefresh || seriesDataUpdate || !!otherRefreshUpdate;
  if (processedOptions.data) {
    chart.data = processedOptions.data;
  }
  if (processedOptions.autoSize != null) {
    chart.autoSize = processedOptions.autoSize;
  }
  if ((_b2 = processedOptions.legend) === null || _b2 === void 0 ? void 0 : _b2.listeners) {
    Object.assign(chart.legend.listeners, (_c2 = processedOptions.legend.listeners) !== null && _c2 !== void 0 ? _c2 : {});
  }
  if (processedOptions.listeners) {
    chart.updateAllSeriesListeners();
  }
  chart.processedOptions = completeOptions;
  chart.userOptions = jsonMerge([(_d2 = chart.userOptions) !== null && _d2 !== void 0 ? _d2 : {}, userOptions], noDataCloneMergeOptions);
  var majorChange = forceNodeDataRefresh || modulesChanged;
  var updateType = majorChange ? ChartUpdateType.PROCESS_DATA : ChartUpdateType.PERFORM_LAYOUT;
  debug2("chart update type", { updateType: ChartUpdateType[updateType] });
  chart.update(updateType, { forceNodeDataRefresh });
}
function applyModules(chart, options) {
  var e_1, _a5;
  var matchingChartType = function(module) {
    return chart instanceof CartesianChart && module.chartTypes.includes("cartesian") || chart instanceof PolarChart && module.chartTypes.includes("polar") || chart instanceof HierarchyChart && module.chartTypes.includes("hierarchy");
  };
  var modulesChanged = false;
  var rootModules = REGISTERED_MODULES.filter(function(m) {
    return m.type === "root";
  });
  try {
    for (var rootModules_1 = __values30(rootModules), rootModules_1_1 = rootModules_1.next(); !rootModules_1_1.done; rootModules_1_1 = rootModules_1.next()) {
      var next = rootModules_1_1.value;
      var shouldBeEnabled = matchingChartType(next) && options[next.optionsKey] != null;
      var isEnabled = chart.isModuleEnabled(next);
      if (shouldBeEnabled === isEnabled)
        continue;
      modulesChanged = true;
      if (shouldBeEnabled) {
        chart.addModule(next);
      } else {
        chart.removeModule(next);
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (rootModules_1_1 && !rootModules_1_1.done && (_a5 = rootModules_1.return))
        _a5.call(rootModules_1);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return modulesChanged;
}
function applySeries(chart, options) {
  var optSeries = options.series;
  if (!optSeries) {
    return;
  }
  var matchingTypes = chart.series.length === optSeries.length && chart.series.every(function(s, i) {
    var _a5;
    return s.type === ((_a5 = optSeries[i]) === null || _a5 === void 0 ? void 0 : _a5.type);
  });
  if (matchingTypes) {
    chart.series.forEach(function(s, i) {
      var _a5, _b2;
      var previousOpts = ((_b2 = (_a5 = chart.processedOptions) === null || _a5 === void 0 ? void 0 : _a5.series) === null || _b2 === void 0 ? void 0 : _b2[i]) || {};
      var seriesDiff = jsonDiff(previousOpts, optSeries[i] || {});
      if (!seriesDiff) {
        return;
      }
      debug2("applying series diff idx " + i, seriesDiff);
      applySeriesValues(s, seriesDiff, { path: "series[" + i + "]", index: i });
      s.markNodeDataDirty();
    });
    return;
  }
  chart.series = createSeries(optSeries);
}
function applyAxes(chart, options) {
  var optAxes = options.axes;
  if (!optAxes) {
    return false;
  }
  var matchingTypes = chart.axes.length === optAxes.length && chart.axes.every(function(a, i) {
    return a.type === optAxes[i].type;
  });
  if (matchingTypes) {
    var oldOpts_1 = chart.processedOptions;
    if (isAgCartesianChartOptions(oldOpts_1)) {
      chart.axes.forEach(function(a, i) {
        var _a5;
        var previousOpts = ((_a5 = oldOpts_1.axes) === null || _a5 === void 0 ? void 0 : _a5[i]) || {};
        var axisDiff = jsonDiff(previousOpts, optAxes[i]);
        debug2("applying axis diff idx " + i, axisDiff);
        var path = "axes[" + i + "]";
        var skip = ["axes[].type"];
        applyOptionValues(a, axisDiff, { path, skip });
      });
      return true;
    }
  }
  chart.axes = createAxis(chart, optAxes);
  return true;
}
function createSeries(options) {
  var e_2, _a5;
  var series = [];
  var index = 0;
  try {
    for (var _b2 = __values30(options || []), _c2 = _b2.next(); !_c2.done; _c2 = _b2.next()) {
      var seriesOptions = _c2.value;
      var path = "series[" + index++ + "]";
      var seriesInstance = getSeries(seriesOptions.type);
      applySeriesValues(seriesInstance, seriesOptions, { path, index });
      series.push(seriesInstance);
    }
  } catch (e_2_1) {
    e_2 = { error: e_2_1 };
  } finally {
    try {
      if (_c2 && !_c2.done && (_a5 = _b2.return))
        _a5.call(_b2);
    } finally {
      if (e_2)
        throw e_2.error;
    }
  }
  return series;
}
function createAxis(chart, options) {
  var e_3, _a5;
  var axes = [];
  var skip = ["axes[].type"];
  var moduleContext = chart.getModuleContext();
  var index = 0;
  try {
    for (var _b2 = __values30(options || []), _c2 = _b2.next(); !_c2.done; _c2 = _b2.next()) {
      var axisOptions = _c2.value;
      var axis = void 0;
      switch (axisOptions.type) {
        case "number":
          axis = new NumberAxis(moduleContext);
          break;
        case LogAxis.type:
          axis = new LogAxis(moduleContext);
          break;
        case CategoryAxis.type:
          axis = new CategoryAxis(moduleContext);
          break;
        case GroupedCategoryAxis.type:
          axis = new GroupedCategoryAxis(moduleContext);
          break;
        case TimeAxis.type:
          axis = new TimeAxis(moduleContext);
          break;
        default:
          throw new Error("AG Charts - unknown axis type: " + axisOptions["type"]);
      }
      var path = "axes[" + index++ + "]";
      applyAxisModules(axis, axisOptions);
      applyOptionValues(axis, axisOptions, { path, skip });
      axes.push(axis);
    }
  } catch (e_3_1) {
    e_3 = { error: e_3_1 };
  } finally {
    try {
      if (_c2 && !_c2.done && (_a5 = _b2.return))
        _a5.call(_b2);
    } finally {
      if (e_3)
        throw e_3.error;
    }
  }
  return axes;
}
function applyAxisModules(axis, options) {
  var e_4, _a5;
  var modulesChanged = false;
  var rootModules = REGISTERED_MODULES.filter(function(m) {
    return m.type === "axis";
  });
  try {
    for (var rootModules_2 = __values30(rootModules), rootModules_2_1 = rootModules_2.next(); !rootModules_2_1.done; rootModules_2_1 = rootModules_2.next()) {
      var next = rootModules_2_1.value;
      var shouldBeEnabled = options[next.optionsKey] != null;
      var isEnabled = axis.isModuleEnabled(next);
      if (shouldBeEnabled === isEnabled)
        continue;
      modulesChanged = true;
      if (shouldBeEnabled) {
        axis.addModule(next);
      } else {
        axis.removeModule(next);
      }
    }
  } catch (e_4_1) {
    e_4 = { error: e_4_1 };
  } finally {
    try {
      if (rootModules_2_1 && !rootModules_2_1.done && (_a5 = rootModules_2.return))
        _a5.call(rootModules_2);
    } finally {
      if (e_4)
        throw e_4.error;
    }
  }
  return modulesChanged;
}
function registerListeners(source, listeners) {
  source.clearEventListeners();
  for (var property in listeners) {
    var listener = listeners[property];
    if (typeof listener !== "function")
      continue;
    source.addEventListener(property, listener);
  }
}
function applyOptionValues(target2, options, _a5) {
  var _b2 = _a5 === void 0 ? {} : _a5, skip = _b2.skip, path = _b2.path;
  var applyOpts = __assign24(__assign24(__assign24({}, JSON_APPLY_OPTIONS), { skip }), path ? { path } : {});
  return jsonApply(target2, options, applyOpts);
}
function applySeriesValues(target2, options, _a5) {
  var _b2 = _a5 === void 0 ? {} : _a5, path = _b2.path, index = _b2.index;
  var skip = ["series[].listeners"];
  var ctrs = (JSON_APPLY_OPTIONS === null || JSON_APPLY_OPTIONS === void 0 ? void 0 : JSON_APPLY_OPTIONS.constructors) || {};
  var seriesTypeOverrides = {
    constructors: __assign24(__assign24({}, ctrs), { title: target2.type === "pie" ? PieTitle : ctrs["title"] })
  };
  var applyOpts = __assign24(__assign24(__assign24(__assign24(__assign24({}, JSON_APPLY_OPTIONS), seriesTypeOverrides), { skip: __spread27(["series[].type"], skip || []) }), path ? { path } : {}), { idx: index !== null && index !== void 0 ? index : -1 });
  var result = jsonApply(target2, options, applyOpts);
  var listeners = options === null || options === void 0 ? void 0 : options.listeners;
  if (listeners != null) {
    registerListeners(target2, listeners);
  }
  return result;
}
var __assign24, __awaiter16, __generator16, __read42, __spread27, __values30, AgChart, AgChartInstanceProxy, AgChartInternal, JSON_APPLY_OPTIONS;
var init_agChartV2 = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/chart/agChartV2.js"() {
    init_cartesianChart();
    init_polarChart();
    init_hierarchyChart();
    init_caption();
    init_seriesTypes();
    init_pieSeries();
    init_logAxis();
    init_numberAxis();
    init_categoryAxis();
    init_groupedCategoryAxis();
    init_timeAxis();
    init_chartUpdateType();
    init_dropShadow();
    init_json();
    init_prepare();
    init_crossLine();
    init_window();
    init_logger();
    init_backgroundImage();
    init_module_support();
    __assign24 = function() {
      __assign24 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign24.apply(this, arguments);
    };
    __awaiter16 = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __generator16 = function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    __read42 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread27 = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read42(arguments[i]));
      return ar;
    };
    __values30 = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    AgChart = /** @class */
    function() {
      function AgChart2() {
      }
      AgChart2.create = function(options) {
        return AgChartInternal.createOrUpdate(options);
      };
      AgChart2.update = function(chart, options) {
        if (!AgChartInstanceProxy.isInstance(chart)) {
          throw new Error("AG Charts - invalid chart reference passed");
        }
        AgChartInternal.createOrUpdate(options, chart);
      };
      AgChart2.updateDelta = function(chart, deltaOptions) {
        if (!AgChartInstanceProxy.isInstance(chart)) {
          throw new Error("AG Charts - invalid chart reference passed");
        }
        return AgChartInternal.updateUserDelta(chart, deltaOptions);
      };
      AgChart2.download = function(chart, options) {
        if (!(chart instanceof AgChartInstanceProxy)) {
          throw new Error("AG Charts - invalid chart reference passed");
        }
        return AgChartInternal.download(chart, options);
      };
      AgChart2.getImageDataURL = function(chart, options) {
        if (!(chart instanceof AgChartInstanceProxy)) {
          throw new Error("AG Charts - invalid chart reference passed");
        }
        return AgChartInternal.getImageDataURL(chart, options);
      };
      return AgChart2;
    }();
    AgChartInstanceProxy = /** @class */
    function() {
      function AgChartInstanceProxy2(chart) {
        this.chart = chart;
      }
      AgChartInstanceProxy2.isInstance = function(x) {
        var _a5, _b2;
        if (x instanceof AgChartInstanceProxy2) {
          return true;
        }
        if (((_a5 = x.constructor) === null || _a5 === void 0 ? void 0 : _a5.name) === "AgChartInstanceProxy" && x.chart != null) {
          return true;
        }
        var signatureProps = Object.keys((_b2 = x.constructor) === null || _b2 === void 0 ? void 0 : _b2.prototype);
        var heuristicTypeCheck = Object.keys(AgChartInstanceProxy2.prototype).every(function(prop) {
          return signatureProps.includes(prop);
        });
        if (heuristicTypeCheck && x.chart != null) {
          return true;
        }
        return false;
      };
      AgChartInstanceProxy2.prototype.getOptions = function() {
        return this.chart.getOptions();
      };
      AgChartInstanceProxy2.prototype.destroy = function() {
        this.chart.destroy();
      };
      return AgChartInstanceProxy2;
    }();
    AgChartInternal = /** @class */
    function() {
      function AgChartInternal2() {
      }
      AgChartInternal2.createOrUpdate = function(userOptions, proxy) {
        var _this = this;
        debug2(">>> createOrUpdate() user options", userOptions);
        var mixinOpts = {};
        if (AgChartInternal2.DEBUG() === true) {
          mixinOpts["debug"] = true;
        }
        var overrideDevicePixelRatio = userOptions.overrideDevicePixelRatio;
        delete userOptions["overrideDevicePixelRatio"];
        initialiseSeriesModules();
        var processedOptions = prepareOptions(userOptions, mixinOpts, seriesDefaults);
        var chart = proxy === null || proxy === void 0 ? void 0 : proxy.chart;
        if (chart == null || chartType(userOptions) !== chartType(chart.processedOptions)) {
          chart = AgChartInternal2.createChartInstance(processedOptions, overrideDevicePixelRatio, chart);
        }
        if (proxy == null) {
          proxy = new AgChartInstanceProxy(chart);
        } else {
          proxy.chart = chart;
        }
        var chartToUpdate = chart;
        chartToUpdate.queuedUserOptions.push(userOptions);
        var dequeue = function() {
          var queuedOptionsIdx = chartToUpdate.queuedUserOptions.indexOf(userOptions);
          chartToUpdate.queuedUserOptions.splice(0, queuedOptionsIdx);
        };
        chartToUpdate.requestFactoryUpdate(function() {
          return __awaiter16(_this, void 0, void 0, function() {
            var deltaOptions;
            return __generator16(this, function(_a5) {
              switch (_a5.label) {
                case 0:
                  if (chartToUpdate.destroyed)
                    return [
                      2
                      /*return*/
                    ];
                  deltaOptions = jsonDiff(chartToUpdate.processedOptions, processedOptions);
                  if (deltaOptions == null) {
                    dequeue();
                    return [
                      2
                      /*return*/
                    ];
                  }
                  return [4, AgChartInternal2.updateDelta(chartToUpdate, deltaOptions, userOptions)];
                case 1:
                  _a5.sent();
                  dequeue();
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        });
        return proxy;
      };
      AgChartInternal2.updateUserDelta = function(proxy, deltaOptions) {
        var _a5;
        var chart = proxy.chart, queuedUserOptions = proxy.chart.queuedUserOptions;
        var lastUpdateOptions = (_a5 = queuedUserOptions[queuedUserOptions.length - 1]) !== null && _a5 !== void 0 ? _a5 : chart.userOptions;
        var userOptions = jsonMerge([lastUpdateOptions, deltaOptions]);
        debug2(">>> updateUserDelta() user delta", deltaOptions);
        debug2("base options", lastUpdateOptions);
        AgChartInternal2.createOrUpdate(userOptions, proxy);
      };
      AgChartInternal2.download = function(proxy, opts2) {
        var _this = this;
        var asyncDownload = function() {
          return __awaiter16(_this, void 0, void 0, function() {
            var maybeClone, chart;
            return __generator16(this, function(_a5) {
              switch (_a5.label) {
                case 0:
                  return [4, AgChartInternal2.prepareResizedChart(proxy, opts2)];
                case 1:
                  maybeClone = _a5.sent();
                  chart = maybeClone.chart;
                  chart.scene.download(opts2 === null || opts2 === void 0 ? void 0 : opts2.fileName, opts2 === null || opts2 === void 0 ? void 0 : opts2.fileFormat);
                  if (maybeClone !== proxy) {
                    maybeClone.destroy();
                  }
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        asyncDownload();
      };
      AgChartInternal2.getImageDataURL = function(proxy, opts2) {
        return __awaiter16(this, void 0, void 0, function() {
          var maybeClone, chart, result;
          return __generator16(this, function(_a5) {
            switch (_a5.label) {
              case 0:
                return [4, AgChartInternal2.prepareResizedChart(proxy, opts2)];
              case 1:
                maybeClone = _a5.sent();
                chart = maybeClone.chart;
                result = chart.scene.canvas.getDataURL(opts2 === null || opts2 === void 0 ? void 0 : opts2.fileFormat);
                if (maybeClone !== proxy) {
                  maybeClone.destroy();
                }
                return [2, result];
            }
          });
        });
      };
      AgChartInternal2.prepareResizedChart = function(proxy, opts2) {
        return __awaiter16(this, void 0, void 0, function() {
          var chart, _a5, width, height, currentWidth, currentHeight, unchanged, options, clonedChart;
          return __generator16(this, function(_b2) {
            switch (_b2.label) {
              case 0:
                chart = proxy.chart;
                _a5 = opts2 || {}, width = _a5.width, height = _a5.height;
                currentWidth = chart.width;
                currentHeight = chart.height;
                unchanged = width === void 0 && height === void 0 || chart.scene.canvas.pixelRatio === 1 && currentWidth === width && currentHeight === height;
                if (unchanged) {
                  return [2, proxy];
                }
                width = width !== null && width !== void 0 ? width : currentWidth;
                height = height !== null && height !== void 0 ? height : currentHeight;
                options = __assign24(__assign24({}, chart.userOptions), {
                  container: document.createElement("div"),
                  width,
                  height,
                  autoSize: false,
                  overrideDevicePixelRatio: 1
                });
                clonedChart = AgChartInternal2.createOrUpdate(options);
                return [4, clonedChart.chart.waitForUpdate()];
              case 1:
                _b2.sent();
                return [2, clonedChart];
            }
          });
        });
      };
      AgChartInternal2.createChartInstance = function(options, overrideDevicePixelRatio, oldChart) {
        var transferableResource = oldChart === null || oldChart === void 0 ? void 0 : oldChart.destroy({ keepTransferableResources: true });
        if (isAgCartesianChartOptions(options)) {
          return new CartesianChart(document, overrideDevicePixelRatio, transferableResource);
        } else if (isAgHierarchyChartOptions(options)) {
          return new HierarchyChart(document, overrideDevicePixelRatio, transferableResource);
        } else if (isAgPolarChartOptions(options)) {
          return new PolarChart(document, overrideDevicePixelRatio, transferableResource);
        }
        throw new Error("AG Charts - couldn't apply configuration, check type of options: " + options["type"]);
      };
      AgChartInternal2.updateDelta = function(chart, processedOptions, userOptions) {
        return __awaiter16(this, void 0, void 0, function() {
          return __generator16(this, function(_a5) {
            switch (_a5.label) {
              case 0:
                if (processedOptions.type == null) {
                  processedOptions = __assign24(__assign24({}, processedOptions), { type: chart.processedOptions.type || optionsType(processedOptions) });
                }
                return [4, chart.awaitUpdateCompletion()];
              case 1:
                _a5.sent();
                if (chart.destroyed)
                  return [
                    2
                    /*return*/
                  ];
                debug2("applying delta", processedOptions);
                applyChartOptions(chart, processedOptions, userOptions);
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      AgChartInternal2.DEBUG = function() {
        var _a5;
        return (_a5 = windowValue("agChartsDebug")) !== null && _a5 !== void 0 ? _a5 : false;
      };
      return AgChartInternal2;
    }();
    JSON_APPLY_OPTIONS = {
      constructors: {
        title: Caption,
        subtitle: Caption,
        footnote: Caption,
        shadow: DropShadow,
        innerCircle: DoughnutInnerCircle,
        "axes[].crossLines[]": CrossLine,
        "series[].innerLabels[]": DoughnutInnerLabel,
        "background.image": BackgroundImage
      },
      allowedTypes: {
        "legend.pagination.marker.shape": ["primitive", "function"],
        "series[].marker.shape": ["primitive", "function"],
        "axis[].tick.count": ["primitive", "class-instance"]
      }
    };
  }
});

// node_modules/ag-charts-community/dist/esm/es5/version.js
var VERSION;
var init_version = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/version.js"() {
    VERSION = "7.3.0";
  }
});

// node_modules/ag-charts-community/dist/esm/es5/integrated-charts-scene.js
var integrated_charts_scene_exports = {};
__export(integrated_charts_scene_exports, {
  Arc: () => Arc,
  BBox: () => BBox,
  BandScale: () => BandScale,
  Caption: () => Caption,
  Circle: () => Circle,
  Diamond: () => Diamond,
  DropShadow: () => DropShadow,
  Group: () => Group,
  HdpiCanvas: () => HdpiCanvas,
  Image: () => Image,
  Label: () => Label,
  Line: () => Line,
  LinearScale: () => LinearScale,
  Marker: () => Marker,
  Node: () => Node,
  Path: () => Path,
  Path2D: () => Path2D,
  PointerEvents: () => PointerEvents,
  Rect: () => Rect,
  RedrawType: () => RedrawType,
  Scene: () => Scene,
  Sector: () => Sector,
  Selection: () => Selection,
  Shape: () => Shape,
  Square: () => Square,
  Text: () => Text,
  Tooltip: () => Tooltip,
  toRadians: () => toRadians,
  toTooltipHtml: () => toTooltipHtml
});
var init_integrated_charts_scene = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/integrated-charts-scene.js"() {
    init_caption();
    init_dropShadow();
    init_group();
    init_scene();
    init_node();
    init_selection();
    init_arc();
    init_line();
    init_path();
    init_rect();
    init_sector2();
    init_shape();
    init_text();
    init_bandScale();
    init_linearScale();
    init_angle();
    init_label();
    init_marker();
    init_circle();
    init_diamond();
    init_square();
    init_tooltip();
    init_hdpiCanvas();
    init_bbox();
    init_image();
    init_path2D();
  }
});

// node_modules/ag-charts-community/dist/esm/es5/integrated-charts-theme.js
var integrated_charts_theme_exports = {};
__export(integrated_charts_theme_exports, {
  ChartTheme: () => ChartTheme,
  getChartTheme: () => getChartTheme,
  themes: () => themes2
});
var __read43, themes2;
var init_integrated_charts_theme = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/integrated-charts-theme.js"() {
    init_themes();
    init_themes();
    init_chartTheme();
    __read43 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    themes2 = Object.entries(themes).reduce(function(obj, _a5) {
      var _b2 = __read43(_a5, 2), name = _b2[0], factory = _b2[1];
      obj[name] = factory();
      return obj;
    }, {});
  }
});

// node_modules/ag-charts-community/dist/esm/es5/sparklines-scale.js
var sparklines_scale_exports = {};
__export(sparklines_scale_exports, {
  BandScale: () => BandScale,
  ColorScale: () => ColorScale,
  ContinuousScale: () => ContinuousScale,
  LinearScale: () => LinearScale,
  TimeScale: () => TimeScale
});
var init_sparklines_scale = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/sparklines-scale.js"() {
    init_timeScale();
    init_bandScale();
    init_continuousScale();
    init_colorScale();
    init_linearScale();
  }
});

// node_modules/ag-charts-community/dist/esm/es5/sparklines-util.js
var sparklines_util_exports = {};
__export(sparklines_util_exports, {
  Color: () => Color,
  DELETE: () => DELETE,
  Padding: () => Padding,
  checkDatum: () => checkDatum,
  createId: () => createId,
  extent: () => extent,
  isContinuous: () => isContinuous,
  isDate: () => isDate,
  isDiscrete: () => isDiscrete,
  isNumber: () => isNumber,
  isString: () => isString,
  isStringObject: () => isStringObject,
  jsonApply: () => jsonApply,
  jsonDiff: () => jsonDiff,
  jsonMerge: () => jsonMerge,
  jsonWalk: () => jsonWalk,
  normalizeAngle180: () => normalizeAngle180,
  normalizeAngle360: () => normalizeAngle360,
  normalizeAngle360Inclusive: () => normalizeAngle360Inclusive,
  resetIds: () => resetIds,
  sanitizeHtml: () => sanitizeHtml,
  tickFormat: () => tickFormat,
  ticks: () => ticks_default,
  toDegrees: () => toDegrees,
  toRadians: () => toRadians
});
var init_sparklines_util = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/sparklines-util.js"() {
    init_value();
    init_id();
    init_padding();
    init_json();
    init_angle();
    init_array();
    init_numberFormat();
    init_sanitize();
    init_ticks();
    init_color();
  }
});

// node_modules/ag-charts-community/dist/esm/es5/main.js
var main_exports = {};
__export(main_exports, {
  AgChart: () => AgChart,
  Marker: () => Marker,
  VERSION: () => VERSION,
  _ModuleSupport: () => module_support_exports,
  _Scale: () => sparklines_scale_exports,
  _Scene: () => integrated_charts_scene_exports,
  _Theme: () => integrated_charts_theme_exports,
  _Util: () => sparklines_util_exports,
  __FORCE_MODULE_DETECTION: () => __FORCE_MODULE_DETECTION,
  time: () => time_exports
});
var init_main = __esm({
  "node_modules/ag-charts-community/dist/esm/es5/main.js"() {
    init_agChartOptions();
    init_time();
    init_agChartV2();
    init_version();
    init_marker();
    init_integrated_charts_scene();
    init_integrated_charts_theme();
    init_sparklines_scale();
    init_sparklines_util();
    init_module_support();
  }
});

// node_modules/ag-charts-react/lib/agChartsReact.js
var require_agChartsReact = __commonJS({
  "node_modules/ag-charts-react/lib/agChartsReact.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AgChartsReact = void 0;
    var react_1 = require_react();
    var PropTypes = require_prop_types();
    var ag_charts_community_1 = (init_main(), __toCommonJS(main_exports));
    var AgChartsReact = class extends react_1.Component {
      constructor(props) {
        super(props);
        this.props = props;
        this.chartRef = react_1.createRef();
      }
      render() {
        return react_1.createElement("div", {
          style: this.createStyleForDiv(),
          ref: this.chartRef
        });
      }
      createStyleForDiv() {
        var _a5;
        return Object.assign({ height: "100%" }, (_a5 = this.props.containerStyle) !== null && _a5 !== void 0 ? _a5 : {});
      }
      componentDidMount() {
        const options = this.applyContainerIfNotSet(this.props.options);
        const chart = ag_charts_community_1.AgChart.create(options);
        this.chart = chart;
        chart.chart.waitForUpdate().then(() => {
          var _a5, _b2;
          return (_b2 = (_a5 = this.props).onChartReady) === null || _b2 === void 0 ? void 0 : _b2.call(_a5, chart);
        });
      }
      applyContainerIfNotSet(propsOptions) {
        if (propsOptions.container) {
          return propsOptions;
        }
        return Object.assign(Object.assign({}, propsOptions), { container: this.chartRef.current });
      }
      shouldComponentUpdate(nextProps) {
        this.processPropsChanges(this.props, nextProps);
        return false;
      }
      processPropsChanges(prevProps, nextProps) {
        if (this.chart) {
          ag_charts_community_1.AgChart.update(this.chart, this.applyContainerIfNotSet(nextProps.options));
        }
      }
      componentWillUnmount() {
        if (this.chart) {
          this.chart.destroy();
          this.chart = void 0;
        }
      }
    };
    exports.AgChartsReact = AgChartsReact;
    AgChartsReact.propTypes = {
      options: PropTypes.object
    };
  }
});

// node_modules/ag-charts-react/main.js
var require_main = __commonJS({
  "node_modules/ag-charts-react/main.js"(exports) {
    exports.AgChartsReact = require_agChartsReact().AgChartsReact;
  }
});
export default require_main();
/*! Bundled license information:

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)
*/
//# sourceMappingURL=ag-charts-react.js.map
