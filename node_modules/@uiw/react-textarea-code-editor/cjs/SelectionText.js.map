{
  "version": 3,
  "sources": [
    "../src/SelectionText.ts"
  ],
  "names": [
    "SelectionText",
    "elm",
    "start",
    "end",
    "value",
    "selectionStart",
    "selectionEnd",
    "position",
    "isNaN",
    "insertText",
    "text",
    "focus",
    "setRangeText",
    "getSelectedValue",
    "slice",
    "getLineStartNumber",
    "charAt",
    "getIndentText",
    "str",
    "indent",
    "replace",
    "old",
    "lineStarInstert",
    "oldStart",
    "split",
    "map",
    "txt",
    "join",
    "length",
    "lineStarRemove",
    "reg",
    "RegExp",
    "newStart",
    "test",
    "notifyChange",
    "event",
    "Event",
    "bubbles",
    "cancelable",
    "dispatchEvent"
  ],
  "mappings": "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",
  "sourcesContent": [
    "export class SelectionText {\n  elm: HTMLTextAreaElement;\n  start: number;\n  end: number;\n  value: string;\n  constructor(elm: HTMLTextAreaElement) {\n    const { selectionStart, selectionEnd } = elm;\n    this.elm = elm;\n    this.start = selectionStart;\n    this.end = selectionEnd;\n    this.value = this.elm.value;\n  }\n  position(start?: number, end?: number) {\n    const { selectionStart, selectionEnd } = this.elm;\n    this.start = typeof start === 'number' && !isNaN(start) ? start : selectionStart;\n    this.end = typeof end === 'number' && !isNaN(end) ? end : selectionEnd;\n    this.elm.selectionStart = this.start;\n    this.elm.selectionEnd = this.end;\n    return this;\n  }\n  insertText(text: string) {\n    // Most of the used APIs only work with the field selected\n    this.elm.focus();\n    this.elm.setRangeText(text);\n    this.value = this.elm.value;\n    this.position();\n    return this;\n  }\n  getSelectedValue(start?: number, end?: number) {\n    const { selectionStart, selectionEnd } = this.elm;\n    return this.value.slice(\n      typeof start === 'number' && !isNaN(start) ? start : selectionStart,\n      typeof end === 'number' && !isNaN(end) ? start : selectionEnd,\n    );\n  }\n  getLineStartNumber() {\n    let start = this.start;\n    while (start > 0) {\n      start--;\n      if (this.value.charAt(start) === '\\n') {\n        start++;\n        break;\n      }\n    }\n    return start;\n  }\n  /** Indent on new lines */\n  getIndentText() {\n    const start = this.getLineStartNumber();\n    const str = this.getSelectedValue(start);\n    let indent = '';\n    str.replace(/(^(\\s)+)/, (str, old) => (indent = old));\n    return indent;\n  }\n  lineStarInstert(text: string) {\n    if (text) {\n      const oldStart = this.start;\n      const start = this.getLineStartNumber();\n      const str = this.getSelectedValue(start);\n      this.position(start, this.end)\n        .insertText(\n          str\n            .split('\\n')\n            .map((txt) => text + txt)\n            .join('\\n'),\n        )\n        .position(oldStart + text.length, this.end);\n    }\n    return this;\n  }\n  lineStarRemove(text: string) {\n    if (text) {\n      const oldStart = this.start;\n      const start = this.getLineStartNumber();\n      const str = this.getSelectedValue(start);\n      const reg = new RegExp(`^${text}`, 'g');\n      let newStart = oldStart - text.length;\n      if (!reg.test(str)) {\n        newStart = oldStart;\n      }\n      this.position(start, this.end)\n        .insertText(\n          str\n            .split('\\n')\n            .map((txt) => txt.replace(reg, ''))\n            .join('\\n'),\n        )\n        .position(newStart, this.end);\n    }\n  }\n  /** Notify any possible listeners of the change */\n  notifyChange() {\n    const event = new Event('input', { bubbles: true, cancelable: false });\n    this.elm.dispatchEvent(event);\n  }\n}\n"
  ]
}